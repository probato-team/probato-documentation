{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-probato","title":"What is Probato?","text":"<p>The name Probato originates from the Latin word Probatus, meaning \"related to proof,\" \"demonstrative,\" \"experimental,\" or \"proving necessary qualities for a role.\" This term reflects the essence of the framework: providing tools to ensure quality in software projects.</p> <p>In the context of software quality, Probato has a central objective:</p> <p>To support development teams in ensuring project quality through automated tests, providing efficiency, security, and agility with modern tools and best practices.</p> <p>Probato is an Open Source framework designed to grow with the community. Developers, testers, and enthusiasts are invited to collaborate with ideas, improvements, and features. This collaborative spirit aims to create a robust and accessible solution that meets real market demands and promotes best practices in test automation.</p> <p>Your contribution is always welcome: feedback, suggestions, development, or idea sharing are all elements that strengthen this project.</p>"},{"location":"#automated-testing","title":"Automated Testing","text":""},{"location":"#what-is-automated-testing","title":"What is Automated Testing?","text":"<p>Automated testing is the process of using scripts or tools to automatically verify that specific parts of a system function as expected. It reduces manual intervention, increasing efficiency and consistency in software development.</p>"},{"location":"#advantages-of-automated-testing","title":"Advantages of Automated Testing","text":"<ol> <li>Speed: Executes tests quickly, even for large test suites.</li> <li>Reusability: Scripts can be reused across multiple development cycles.</li> <li>Consistency: Reduces human errors by executing steps consistently.</li> <li>Broader coverage: Enables testing of complex and broad scenarios.</li> <li>Continuous validation: Simplifies regression testing after code changes.</li> <li>Long-term cost efficiency: Despite initial costs, reduces expenses over the project lifespan.</li> <li>Improved quality: Early defect detection ensures more reliable products.</li> <li>Rapid feedback: Provides immediate insights into system stability.</li> <li>Flexible execution: Works across various browsers, systems, and devices.</li> <li>CI/CD integration: Automates testing within continuous development pipelines.</li> </ol>"},{"location":"#disadvantages-of-automated-testing","title":"Disadvantages of Automated Testing","text":"<ol> <li>Initial cost: Configuring and creating tests require significant investment.</li> <li>Maintenance: Scripts must be updated as software evolves.</li> <li>Learning curve: Requires technical skills for development and maintenance.</li> <li>Rigidity: Small changes may necessitate script adjustments.</li> <li>Dynamic interfaces: Frequently changing systems pose challenges.</li> <li>Tool dependency: Automation may be constrained by available tools.</li> <li>Inconsistent results: External issues can cause false positives or negatives.</li> <li>Limited scope: Not all tests, such as usability, can be automated.</li> <li>Delayed ROI: Short projects may not justify the investment.</li> <li>Complex scenarios: Some contexts require custom solutions.</li> </ol>"},{"location":"#probato-as-an-automated-testing-framework","title":"Probato as an Automated Testing Framework","text":""},{"location":"#how-does-probato-contribute-to-test-automation","title":"How does Probato contribute to test automation?","text":"<p>Probato was developed to address automation challenges, offering a simplified and efficient structure. It abstracts technical complexity and promotes best practices, helping teams create and maintain automated tests more effectively.</p> <p>Its Open Source philosophy encourages community contributions, ensuring adaptability to market demands.</p>"},{"location":"#key-features-of-probato","title":"Key Features of Probato","text":"<ul> <li>Ease of use: Modern abstractions and integrations simplify test creation and maintenance.</li> <li>Management and analysis: Tools for tracking and detailed analysis of test executions.</li> <li>Integrated automation: Automatically generates reports and integrates with bug tracking systems.</li> <li>Extensibility: Extension points allow customization and new feature development.</li> <li>Continuous evolution: Plans for advanced analysis tools and broader integration support.</li> </ul> <p>Probato turns common automation challenges into opportunities, helping teams deliver high-quality software efficiently and confidently.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Probato was designed with a modular and highly extensible architecture to support functional test automation efficiently and scalably. It employs modern software design concepts, such as the Page Object Model (POM) and annotation-based dependency injection, enabling the creation of reusable, maintainable, and expandable scripts.</p>"},{"location":"architecture/#modular-layers-and-responsibility-isolation","title":"Modular Layers and Responsibility Isolation","text":"<p>Probato's architecture is composed of multiple layers, each with well-defined responsibilities, which simplifies the framework's maintenance and evolution.</p>"},{"location":"architecture/#interaction-layer-page-object-model","title":"Interaction Layer (Page Object Model)","text":"<ul> <li>Implements the POM pattern, encapsulating the logic for interacting with the user interface.</li> <li>Each page, screen, or component is represented as an object containing methods for possible interactions (clicks, data entry, verifications, etc.).</li> <li>Promotes code reuse and facilitates maintenance when the application interface changes.</li> </ul>"},{"location":"architecture/#testing-layer-scripts-and-procedures","title":"Testing Layer (Scripts and Procedures)","text":"<ul> <li>Tests are organized into scripts composed of actions divided into:<ul> <li>Preconditions</li> <li>Procedures</li> <li>Postconditions</li> </ul> </li> <li>Responsibility separation helps isolate failures and simplifies error diagnosis.</li> </ul>"},{"location":"architecture/#data-injection-layer","title":"Data Injection Layer","text":"<ul> <li>Allows flexible and dynamic use of test input data.</li> <li>Supports data injection via CSV files, with future plans for JSON, YAML, and database support through custom plugins.</li> </ul>"},{"location":"architecture/#persistence-layer-and-sql-connectors","title":"Persistence Layer and SQL Connectors","text":"<ul> <li>Provides an integrated SQL executor that connects to multiple databases.</li> <li>Enables defining database preconditions, dynamically altering states before tests, and restoring states after execution.</li> </ul>"},{"location":"architecture/#dependency-injection-with-annotations","title":"Dependency Injection with Annotations","text":"<ul> <li>Adopts a dependency injection model via Java annotations, promoting Inversion of Control (IoC).</li> <li>Simplifies manual configuration by automatically injecting required objects based on annotation declarations.</li> <li>Enhances modularity and component reuse.</li> </ul>"},{"location":"architecture/#junit-5-based-test-executor","title":"JUnit 5-Based Test Executor","text":"<p>Probato integrates with the JUnit 5 lifecycle, using dynamic tests and the <code>@TestFactory</code> annotation to generate test cases at runtime.</p>"},{"location":"architecture/#lifecycle-and-structure","title":"Lifecycle and Structure","text":"<ul> <li> <p>BeforeAll:   Loads extension points, configurations, and performs code and configuration validations. Also creates Dynamic tests.</p> </li> <li> <p>BeforeEach:   Loads necessary datasets and scripts and starts the execution of test scenarios.</p> </li> <li> <p>TestFactory:   Dynamically generates tests based on script classes, procedures, and Page Objects. Supports data-driven testing, allowing multiple executions with different data sets.</p> </li> <li> <p>AfterEach:   Submits the data collected during test execution to the Probato Manager and stores images and videos in storage.</p> </li> <li> <p>AfterAll:   Calculates software quality based on metrics and execution data and notifies collaborators about the execution's completion.</p> </li> </ul>"},{"location":"architecture/#multibrowser-execution-support","title":"Multibrowser Execution Support","text":"<ul> <li>Built on the Selenium API, enabling automation across multiple browsers.</li> <li>Extensible support for adding new browsers and execution contexts (different operating systems or browser versions).</li> </ul>"},{"location":"architecture/#extensibility-and-plugins","title":"Extensibility and Plugins","text":"<ul> <li>Designed to be extensible, allowing new features to be added without modifying the core framework.</li> <li>Plugin support for:<ul> <li>New browser drivers.</li> <li>Additional input data formats.</li> <li>New types of validation and data manipulation.</li> </ul> </li> </ul>"},{"location":"architecture/#execution-management-and-data-collection","title":"Execution Management and Data Collection","text":"<ul> <li>During tests, captures data such as:<ul> <li>Execution logs.</li> <li>Screenshots.</li> <li>Videos and executed steps.</li> </ul> </li> <li>Processes and sends data to an integrated web application that provides:<ul> <li>Centralized monitoring of executions.</li> <li>Detailed report generation.</li> <li>Bug tracking and versioning analysis.</li> </ul> </li> <li>Supports integration with tools such as TestLink and Mantis Bug Tracker.</li> </ul>"},{"location":"architecture/#advanced-configurations-and-customizations","title":"Advanced Configurations and Customizations","text":"<ul> <li>Offers options to:<ul> <li>Configure timeouts and intervals between actions.</li> <li>Adjust the quality of captured images and videos.</li> <li>Define execution on screen (primary or secondary monitors).</li> </ul> </li> </ul>"},{"location":"architecture/#notifications-and-continuous-integration","title":"Notifications and Continuous Integration","text":"<ul> <li>Sends automatic notifications to collaborators after each test execution.</li> <li>Easily integrates with CI/CD tools such as Jenkins, enabling full automation of test processes in the development cycle.</li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#simple-and-intuitive-structure","title":"Simple and Intuitive Structure","text":"<p>Probato provides an organized and modular structure for implementing tests, facilitating the reuse of components and the maintenance of scripts. This allows teams to focus more on test logic rather than implementation structure.</p>"},{"location":"features/#object-injection-with-annotations","title":"Object Injection with Annotations","text":"<p>Using annotations simplifies test configuration, enabling clear and concise object injection without additional implementations.</p>"},{"location":"features/#page-object-model-pom-pattern","title":"Page Object Model (POM) Pattern","text":"<p>Probato follows the Page Object Model pattern, helping to separate layers and organize code. This approach simplifies the maintenance and readability of scripts, especially in frameworks like Selenium.</p>"},{"location":"features/#test-procedure-organization","title":"Test Procedure Organization","text":"<p>Tests are organized into three stages:</p> <ol> <li>Preconditions</li> <li>Procedures</li> <li>Postconditions</li> </ol> <p>This structure allows for quickly identifying the source of failures and understanding whether errors are in the target functionalities or preparatory steps.</p>"},{"location":"features/#implicit-data-injection","title":"Implicit Data Injection","text":"<p>Scripts can be executed with different data sets, enabling comprehensive testing without duplicating code. This functionality enhances test efficiency and coverage.</p>"},{"location":"features/#sql-file-executor","title":"SQL File Executor","text":"<p>The integrated SQL executor connects to multiple databases to modify the application's state according to test preconditions. This offers flexibility when configuring test scenarios.</p>"},{"location":"features/#intuitive-test-workflow-creation","title":"Intuitive Test Workflow Creation","text":"<p>Workflows can be created with code, descriptions, and weights based on the relevance and complexity of functionalities. This helps prioritize and analyze the quality of the tested software.</p>"},{"location":"features/#timeout-and-interval-settings","title":"Timeout and Interval Settings","text":"<p>Probato allows:</p> <ul> <li>Configuring timeouts for wait times during test execution.</li> <li>Adjusting intervals between actions, optimizing test performance.</li> </ul>"},{"location":"features/#cross-browser-execution","title":"Cross-Browser Execution","text":"<p>Supports running tests on multiple browsers, with options such as:</p> <ul> <li>Maximized, normal, or custom mode (specific dimensions).</li> <li>Selecting the monitor for execution (primary or secondary).</li> </ul>"},{"location":"features/#data-management","title":"Data Management","text":"<p>Probato includes a web application for:</p> <ul> <li>Managing execution data.</li> <li>Analyzing software quality.</li> <li>Creating bugs from test results.</li> <li>Viewing histories and versioning.</li> <li>Generating detailed reports with logs and coverage charts.</li> </ul>"},{"location":"features/#data-capture-during-execution","title":"Data Capture During Execution","text":"<p>Collects and stores information such as:</p> <ul> <li>Test suites and workflows.</li> <li>Executed steps.</li> <li>Applied data.</li> <li>SQL scripts.</li> <li>Videos and screenshots (in case of failures).</li> </ul> <p>The quality of the images can be adjusted for detailed failure analysis.</p>"},{"location":"features/#execution-notifications","title":"Execution Notifications","text":"<p>Sends notifications to collaborators when new executions occur, keeping everyone updated on the test status.</p>"},{"location":"features/#extensibility","title":"Extensibility","text":"<p>Probato allows customizations through plugins, including:</p> <ul> <li>Support for new browsers.</li> <li>Additional validations.</li> <li>Data input in new formats.</li> <li>Custom SQL or NoSQL executors.</li> </ul>"},{"location":"features/#integration-with-cicd-tools","title":"Integration with CI/CD Tools","text":"<p>Easily integrates with continuous integration systems, such as:</p> <ul> <li>Jenkins</li> <li>Travis CI</li> <li>GitLab CI</li> </ul> <p>This enables automatic test execution on each commit, ensuring continuous and agile validations.</p>"},{"location":"objective/","title":"Objective","text":"<p>The main goal of Probato is to simplify and accelerate the software testing automation process, providing a robust and flexible solution to ensure the quality of complex systems. Test automation has become essential as development practices evolve toward agile models, where continuous and rapid validation of functionalities is crucial.</p> <p>This framework is designed to address common automation challenges and overcome frequently encountered limitations. As an Open Source initiative, its evolution depends on community collaboration. Developers, testers, and enthusiasts are invited to contribute to making Probato more powerful, adaptable, and aligned with real market needs. With community support, it is possible to build an innovative and accessible solution, promoting best practices and expanding the reach of automation.</p>"},{"location":"objective/#core-purposes","title":"Core Purposes","text":""},{"location":"objective/#automate-repetitive-processes","title":"Automate Repetitive Processes","text":"<p>Probato eliminates manual tasks, such as regression testing, by automating their execution in every development cycle.</p>"},{"location":"objective/#increase-test-reliability","title":"Increase Test Reliability","text":"<p>By ensuring consistent and repeatable executions, Probato minimizes human errors and ensures greater reliability.</p>"},{"location":"objective/#enhance-productivity","title":"Enhance Productivity","text":"<p>Automation allows teams to focus on strategic activities, such as developing new features and analyzing results.</p>"},{"location":"objective/#ease-of-integration-and-extensibility","title":"Ease of Integration and Extensibility","text":"<p>Designed to be flexible, Probato integrates seamlessly with external tools and can be extended to meet specific needs.</p>"},{"location":"objective/#focus-on-agility-and-continuous-integration","title":"Focus on Agility and Continuous Integration","text":""},{"location":"objective/#rapid-validation-in-agile-environments","title":"Rapid Validation in Agile Environments","text":"<p>In agile cycles, code changes need to be validated quickly. Probato enables continuous test execution to prevent new defects.</p>"},{"location":"objective/#support-for-cicd-pipelines","title":"Support for CI/CD Pipelines","text":"<p>Compatible with tools like Jenkins, GitLab CI, and Travis CI, Probato enables the automated execution of tests with every commit or at strategic stages of development.</p>"},{"location":"objective/#reducing-costs-and-maintenance-effort","title":"Reducing Costs and Maintenance Effort","text":""},{"location":"objective/#ease-of-test-updates","title":"Ease of Test Updates","text":"<p>Probato's architecture makes it easier to adapt tests to software changes, supporting the Page Object Model (POM) pattern and reusing components.</p>"},{"location":"objective/#support-for-data-driven-testing","title":"Support for Data-Driven Testing","text":"<p>Probato allows the execution of the same test with different data sets, increasing coverage without duplicating scripts.</p>"},{"location":"objective/#reliability-and-comprehensive-coverage","title":"Reliability and Comprehensive Coverage","text":"<p>Probato offers broad coverage across different platforms and types of tests.</p>"},{"location":"objective/#functional-and-regression-testing","title":"Functional and Regression Testing","text":"<p>Ensures consistent validations of core functionalities and identifies issues in existing functionalities during code changes.</p>"},{"location":"objective/#increasing-confidence-in-the-deployment-process","title":"Increasing Confidence in the Deployment Process","text":""},{"location":"objective/#fast-and-reliable-feedback","title":"Fast and Reliable Feedback","text":"<p>Automated tests integrated into the CI pipeline provide immediate feedback, enabling quick fixes.</p>"},{"location":"objective/#problem-detection-in-early-stages","title":"Problem Detection in Early Stages","text":"<p>Automation allows errors to be identified during development, reducing costs associated with late-stage defects.</p>"},{"location":"objective/#ease-of-use","title":"Ease of Use","text":""},{"location":"objective/#simple-and-intuitive-interface","title":"Simple and Intuitive Interface","text":"<p>Probato's result management interface simplifies test creation and execution, even for users with little experience.</p>"},{"location":"objective/#low-learning-curve","title":"Low Learning Curve","text":"<p>The modular architecture and user-friendly syntax make the framework accessible to beginners and efficient for experienced professionals.</p>"},{"location":"objective/#flexibility","title":"Flexibility","text":""},{"location":"objective/#extensible-architecture","title":"Extensible Architecture","text":"<p>Probato allows the implementation of plugins for validations, browsers, and databases without significant modifications.</p>"},{"location":"objective/#summary-of-objectives","title":"Summary of Objectives","text":"<p>Probato was developed to:</p> <ul> <li>Automate repetitive tests, reducing manual effort.</li> <li>Increase the reliability and consistency of tests.</li> <li>Facilitate integration with CI/CD pipelines, promoting agility.</li> <li>Reduce costs and maintenance efforts with a flexible architecture.</li> <li>Provide quick feedback, increasing confidence in the deployment process.</li> <li>Be easy to use, with a low learning curve.</li> <li>Be flexible and customizable, adapting to different projects and needs.</li> </ul>"},{"location":"target-audience/","title":"Target Audience","text":"<p>Probato was designed to serve a wide range of professionals involved in software development and quality assurance. With a versatile and intuitive approach, it caters to experienced test engineers as well as developers looking to integrate automation into the development cycle. Additionally, it is accessible to other stakeholders interested in project quality. Below are the main user profiles that can benefit from this framework.</p>"},{"location":"target-audience/#test-engineer-qa","title":"Test Engineer (QA)","text":"<p>Test Engineers or Quality Assurance (QA) professionals are one of the main target audiences for Probato. They ensure software quality, validate functionalities, and guarantee that new developments do not introduce defects.</p>"},{"location":"target-audience/#benefits","title":"Benefits","text":"<ul> <li>Ease for less experienced QAs: Intuitive tools allow automated tests to be created with minimal coding.</li> <li>Comprehensive coverage: Support for functional and regression testing to efficiently validate workflows.</li> <li>Quick analysis and feedback: A dedicated application for analyzing data collected during testing.</li> <li>Best practices and standards: Support for methodologies such as TDD and BDD.</li> <li>Extensibility: A flexible API for customizations and advanced testing.</li> </ul>"},{"location":"target-audience/#recommended-skills","title":"Recommended Skills","text":"<ul> <li>Basic knowledge of Java.</li> <li>Experience with test automation tools.</li> <li>Familiarity with Data-Driven Testing and Page Object Model (POM).</li> </ul>"},{"location":"target-audience/#ease-of-use","title":"Ease of Use","text":"<p>Probato features an intuitive interface and high-level language support, making it easy to create and execute tests, even for those with minimal programming experience.</p>"},{"location":"target-audience/#software-developer","title":"Software Developer","text":"<p>Software Developers are an essential target audience, especially in agile environments. They ensure that new features meet requirements and do not negatively impact the existing system.</p>"},{"location":"target-audience/#benefits_1","title":"Benefits","text":"<ul> <li>Integration with CI/CD: Facilitates automated test execution in pipelines.</li> <li>Immediate feedback: Detailed reports help identify and fix bugs quickly.</li> <li>Bug management: Tools for analyzing and documenting test results.</li> </ul>"},{"location":"target-audience/#recommended-skills_1","title":"Recommended Skills","text":"<ul> <li>Experience with CI/CD tools.</li> <li>Basic knowledge of Java.</li> <li>Familiarity with agile development practices.</li> </ul>"},{"location":"target-audience/#ease-of-use_1","title":"Ease of Use","text":"<p>Probato's API is clear and extensible, with examples and comprehensive documentation to enable agile integration into development pipelines.</p>"},{"location":"target-audience/#business-analysts-and-product-owners","title":"Business Analysts and Product Owners","text":"<p>Although not direct users of Probato, Business Analysts and Product Owners benefit from the results generated by the tool. They ensure that business requirements are continuously validated.</p>"},{"location":"target-audience/#benefits_2","title":"Benefits","text":"<ul> <li>BDD integration: Acceptance criteria can be directly translated into automated tests.</li> <li>Clear reports: An overview of software quality that is accessible to non-technical stakeholders.</li> </ul>"},{"location":"target-audience/#recommended-skills_2","title":"Recommended Skills","text":"<ul> <li>Defining test scenarios based on business requirements.</li> <li>Basic understanding of reporting tools.</li> </ul>"},{"location":"target-audience/#ease-of-use_2","title":"Ease of Use","text":"<p>Detailed and accessible reports allow Business Analysts and Product Owners to validate deliverables without deep technical knowledge.</p>"},{"location":"target-audience/#project-manager","title":"Project Manager","text":"<p>Project Managers play an important role in monitoring software quality. While not directly involved in creating or executing tests, they track progress and ensure delivery within established timelines and quality standards.</p>"},{"location":"target-audience/#benefits_3","title":"Benefits","text":"<ul> <li>Real-time monitoring: Interactive dashboards to track test progress.</li> <li>Risk identification: Quickly identify bottlenecks and problems in the development cycle.</li> <li>Ease of communication: Aligns developers, QA engineers, and stakeholders.</li> </ul>"},{"location":"target-audience/#recommended-skills_3","title":"Recommended Skills","text":"<ul> <li>Interpreting reports and metrics.</li> <li>Familiarity with agile methodologies and test integration.</li> </ul>"},{"location":"target-audience/#ease-of-use_3","title":"Ease of Use","text":"<p>Visual reports and graphs provide a clear and immediate view of software quality, helping in making quick and effective decisions.</p>"},{"location":"target-audience/#clients","title":"Clients","text":"<p>Clients are involved in the approval and validation process, ensuring that the final product meets business requirements.</p>"},{"location":"target-audience/#benefits_4","title":"Benefits","text":"<ul> <li>Transparent progress tracking: Clear reports allow clients to track test progress.</li> <li>Test execution: Intuitive interface for direct functionality validation.</li> </ul>"},{"location":"target-audience/#recommended-skills_4","title":"Recommended Skills","text":"<ul> <li>Basic report interpretation.</li> <li>Understanding of business requirements and the test plan.</li> </ul>"},{"location":"target-audience/#ease-of-use_4","title":"Ease of Use","text":"<p>A simplified interface and objective reports make it easy for clients to validate and approve the software.</p> <p>Probato is a versatile and intuitive tool designed to serve different audiences, fostering collaboration and ensuring software quality efficiently and effectively.</p>"},{"location":"documentation/","title":"Documentation","text":""},{"location":"documentation/change-application-state/","title":"Alterando estado da aplica\u00e7\u00e3o","text":"<p>Nesta se\u00e7\u00e3o, exploraremos como alterar o estado da aplica\u00e7\u00e3o para garantir que as pr\u00e9-condi\u00e7\u00f5es necess\u00e1rias no banco de dados sejam satisfeitas antes do in\u00edcio da execu\u00e7\u00e3o do objetivo principal dos testes. Abordaremos t\u00e9cnicas para configurar e manipular dados no banco de forma controlada e consistente, garantindo que os testes sejam executados em um ambiente previs\u00edvel e alinhado com os cen\u00e1rios desejados.</p> <p>Al\u00e9m disso, discutiremos boas pr\u00e1ticas para realizar essas altera\u00e7\u00f5es de maneira automatizada, minimizando interfer\u00eancias externas e otimizando a prepara\u00e7\u00e3o do ambiente de teste.</p>"},{"location":"documentation/change-application-state/#adicionando-dependencia-para-database","title":"Adicionando depend\u00eancia para database","text":"<ol> <li>No arquivo <code>pom.xml</code> pode ser adicionada a depend\u00eancia pom.xml<pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.exemplo.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt; &lt;!-- Vers\u00e3o atual do projeto alvo dos testes --&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/testano.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-browser&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-dataset-csv&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-database-sql&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do banco de dados da aplica\u00e7\u00e3o --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.7.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre></li> </ol>"},{"location":"documentation/change-application-state/#configurando-datasource","title":"Configurando datasource","text":"<ol> <li>No arquivo <code>configuration.yml</code> adicionar as configura\u00e7\u00f5es abaixo configuration.yml<pre><code>datasources:\n\n   probato:\n      url: jdbc:postgresql://localhost:5444/testano\n      driver: org.postgresql.Driver\n      username: root\n      password: root\n</code></pre> Propriedades:<ul> <li>datasources.[nome]:  Informa o nome do recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].url:  Informa a URL do recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].driver:  Informa o driver de conex\u00e3o para o recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].schema:  Informa o schema para o recurso que ser\u00e1 acessado..</li> <li>datasources.[*].dimension.width: Informa o usu\u00e1rio para o recurso que ser\u00e1 acessado.</li> <li>datasources.[*].dimension.height:  Informa a senha para o recurso que ser\u00e1 acessado.</li> </ul> </li> <li>Caso seja executado o teste no estado atual o teste passar\u00e1 com sucesso. Note que agora na lista de execu\u00e7\u00f5es relizadas tem breve descri\u00e7\u00e3o do dimensionamento no qual o navegador aberto.</li> </ol>"},{"location":"documentation/change-application-state/#criando-arquivos-sql","title":"Criando arquivos SQL","text":"<ol> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>init</code>.</li> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>user</code>.</li> <li>Na pasta <code>src/test/resources/sql/init</code> vamos criar o arquivo chamado <code>init.sql</code>.</li> <li>Na pasta <code>src/test/resources/sql/user</code> vamos criar o arquivo chamado <code>insert-user.sql</code>.</li> <li>No arquivo <code>init.sql</code> vamos adicionar o conte\u00fado abaixo. init.sql<pre><code>DELETE FROM testano_app.users;\n</code></pre></li> <li>No arquivo <code>insert-user.sql</code> vamos adicionar o conte\u00fado abaixo. insert-user.sql<pre><code>INSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('a02b03e6-c462-4980-9997-c1203a094c9d'::uuid, 'User 01', 'user01@probato.org', '$2a$10$Kml4nk3ADhnWrJg0GkStVeTJoslDBir/Fgyw2gkLR0FukujfIxZQ2', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('bd84a2c8-d315-40ea-80aa-1841254b20c9'::uuid, 'User 02', 'user02@probato.org', '$2a$10$oHZ7er1/2/xKjgOq0znXnOPcvoOXpX.in6XO/4mf2xf5ZV7OMyvq6', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('b86a08ac-2ee8-42c7-a46f-c589b1d26503'::uuid, 'User 03', 'user03@probato.org', '$2a$10$81pSkjzZTqgn3/nU5DzxVemmr0rjJ7NHtK/UiGhzomEwTyHZgFliC', 'MALE',  true);\n</code></pre></li> </ol>"},{"location":"documentation/change-application-state/#adicionando-sql-ao-suite","title":"Adicionando SQL ao suite","text":"<ol> <li>Na classe <code>UC01_PerformLogin.java</code> vamos acionar a implementa\u00e7\u00e3o abaixo. PerformLoginProcedure.java<pre><code>package org.probato.manager.automation.usecase.UC01;\n\nimport org.probato.manager.automation.usecase.UC01.script.UC01TC01_PerformLoginSuccessfully;\n\nimport org.probato.api.SQL;\nimport org.probato.api.Suite;\nimport org.probato.api.TestCase;\nimport org.probato.api.TestSuite;\n\n@SQL(\n    datasource = \"probato\", \n    scriptPath = { \n        \"sql/init/init.sql\" \n    })\n@Suite(\n    code = \"UC01\", name = \"Perform login\", \n    description = \"This feature aims to allow the user to login to this application\")\nclass UC01_PerformLogin implements TestSuite {\n\n    @TestCase\n    private UC01TC01_PerformLoginSuccessfully uc01tc01;\n\n}\n</code></pre></li> </ol>"},{"location":"documentation/change-application-state/#adicionando-sql-ao-script","title":"Adicionando SQL ao script","text":"<ol> <li> <p>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos acionar a implementa\u00e7\u00e3o abaixo. PerformLoginProcedure.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.manager.automation.model.LoginModel;\nimport org.probato.manager.automation.page.DashboardPage;\nimport org.probato.manager.automation.page.LoginPage;\n\nimport org.probato.api.Dataset;\nimport org.probato.api.Page;\nimport org.probato.api.Procedure;\nimport org.probato.api.SQL;\nimport org.probato.api.Script;\n\n@SQL(\n    datasource = \"probato\", \n    scriptPath = { \n        \"sql/user/insert-user.sql\" \n    })\n@Dataset(\"dataset/UC01/UC01TC01.csv\")\n@Script(\n    code = \"UC01TC01\", \n    name = \"Perform login successfully\", \n    description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n    @Page\n    private LoginPage loginPage;\n\n    @Page\n    private DashboardPage dashboardPage;\n\n    @Procedure\n    private void procedure(LoginModel model) {\n        loginPage.selectEnglishTranslate();\n        loginPage.checkPage();\n        loginPage.fillEmail(model.getEmail());\n        loginPage.fillPassword(model.getPassword());\n        loginPage.pressAccessButton();\n        dashboardPage.checkPage();\n    }\n\n}\n</code></pre></p> </li> <li> <p>Agora caso seja executado o teste no estado atual veremos que a pr\u00e9-condi\u00e7\u00e3o ser\u00e1 satisfeitas e os testes ser\u00e3o executados com sucesso.</p> <p></p> </li> </ol>"},{"location":"documentation/change-application-state/#consideracoes-finais","title":"Considera\u00e7\u00f5es finais","text":"<p>Conseguimos implementar com sucesso o uso de SQL para alterar o estado da aplica\u00e7\u00e3o, atendendo assim \u00e0s pr\u00e9-condi\u00e7\u00f5es necess\u00e1rias para a execu\u00e7\u00e3o dos testes propostos. Essa abordagem garante que cada teste possa come\u00e7ar em um estado controlado e previs\u00edvel, tornando-os independentes entre si. Al\u00e9m disso, essa independ\u00eancia reduz a interfer\u00eancia entre os testes e melhora a confiabilidade dos resultados, permitindo identificar falhas espec\u00edficas de forma mais clara.</p> <p>Observa\u00e7\u00f5es: </p> <p>Partiremos do princ\u00edpio de que a base de dados estar\u00e1 sempre vazia no in\u00edcio de cada execu\u00e7\u00e3o, para fins de demonstra\u00e7\u00e3o para teste guia. No entanto, voc\u00ea pode pressupor que haver\u00e1 uma massa de dados inicial espec\u00edfica para configurar o ambiente de testes. Essa configura\u00e7\u00e3o ser\u00e1 feita por meio de um arquivo <code>init.sql</code>, respons\u00e1vel por adicionar os registros necess\u00e1rios para a execu\u00e7\u00e3o dos seus testes.</p> <p>A defini\u00e7\u00e3o e o conte\u00fado desse arquivo ficam a seu crit\u00e9rio, de acordo com a an\u00e1lise dos requisitos de cada caso de teste. \u00c9 importante garantir que o <code>init.sql</code> inclua todos os dados essenciais para atender \u00e0s pr\u00e9-condi\u00e7\u00f5es dos testes, promovendo um ambiente consistente e adequado para a valida\u00e7\u00e3o das funcionalidades.</p> <p>Al\u00e9m disso, recomendamos adotar boas pr\u00e1ticas na cria\u00e7\u00e3o desse arquivo, como:</p> <ul> <li>Organizar os scripts de maneira clara e modular.</li> <li>Incluir coment\u00e1rios que expliquem a finalidade de cada registro.</li> <li>Garantir que o script seja idempotente, ou seja, possa ser executado repetidamente sem gerar inconsist\u00eancias.</li> </ul> <p>Com essa abordagem, voc\u00ea ter\u00e1 maior controle sobre o estado inicial do banco de dados e poder\u00e1 executar seus testes de maneira confi\u00e1vel e previs\u00edvel.</p>"},{"location":"documentation/configure-browser-execution/","title":"Configurando execu\u00e7\u00e3o por browser","text":"<p>Nesta se\u00e7\u00e3o, ser\u00e1 configurado um plugin para permitir a execu\u00e7\u00e3o de testes em diferentes browsers. Essa funcionalidade \u00e9 essencial para garantir que os testes automatizados sejam executados em ambientes variados, simulando as condi\u00e7\u00f5es reais de uso por diferentes usu\u00e1rios e garantindo a compatibilidade da aplica\u00e7\u00e3o com os principais navegadores do mercado. Ser\u00e1 abordado como configurar os browsers suportados pelo framework, como Chrome, Firefox e Edge, que s\u00e3o suportados nativamente.</p>"},{"location":"documentation/configure-browser-execution/#adicionando-dependencia-para-execucao-por-browser","title":"Adicionando depend\u00eancia para execu\u00e7\u00e3o por browser","text":"<ol> <li>No arquivo <code>pom.xml</code> pode ser adicionada a depend\u00eancia pom.xml<pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.exemplo.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt; &lt;!-- Vers\u00e3o atual do projeto alvo dos testes --&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/testano.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-browser&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre></li> <li>Caso seja executado o teste no estado atual, ser\u00e1 recebido a mensagem informando que devem ser configuradas propriedades no arquivo <code>configuration.yml</code>.</li> </ol>"},{"location":"documentation/configure-browser-execution/#configurando-execucao-por-browser_1","title":"Configurando execu\u00e7\u00e3o por browser","text":"<ol> <li>No arquivo <code>configuration.yml</code> adicionar as configura\u00e7\u00f5es abaixo configuration.yml<pre><code>execution:\n\n  target:\n    url: http://localhost:8099    # Obrigat\u00f3rio\n    version: 0.0.0                # Obrigat\u00f3rio\n\nbrowsers:\n\n- type: CHROME                    # Obrigat\u00f3rio pelo menos 1 browser\n</code></pre></li> <li>Caso seja executado o teste no estado atual o teste passar\u00e1 com sucesso. Note que durante a execu\u00e7\u00e3o foi iniciado e fechado o browser rapidamente.</li> <li> <p>Tamb\u00e9m \u00e9 poss\u00edvel adicionar configura\u00e7\u00f5es adicionais para os navegadores. Para cada configura\u00e7\u00e3o de navegador adicionada, ser\u00e1 realizada uma nova execu\u00e7\u00e3o dos testes, garantindo que todos os cen\u00e1rios sejam validados em diferentes navegadores. configuration.yml<pre><code>execution:\n\n  target:\n    url: http://localhost:8099\n    version: 0.0.0\n\nbrowsers:\n\n- type: CHROME                    # Execu\u00e7\u00e3o 1\n- type: FIREFOX                   # Execu\u00e7\u00e3o 2\n- type: EDGE                      # Execu\u00e7\u00e3o 3\n</code></pre> Obs: Para que o teste seja executado com sucesso deve ter o browser informados instalados na m\u00e1quina host de execu\u00e7\u00f5es.</p> </li> <li> <p>Por padr\u00e3o, os browser s\u00e3o executados com janela maximizada, por\u00e9m podem ser aplicadas diversas configura\u00e7\u00f5es para o dimensionamento do browser   configuration.yml<pre><code>execution:\n\n  target:\n    url: http://localhost:8099\n    version: 0.0.0\n\nbrowsers:\n\n- type: CHROME\n  headless: false\n  dimension:\n    mode: FULLSCREEN\n\n- type: FIREFOX\n  headless: true\n  dimension:\n    mode: MAXIMIZED\n\n- type: EDGE\n  dimension:\n    mode: CUSTOM\n    width: 1256\n    height: 1018\n</code></pre> Propriedades:</p> <ul> <li>browsers.[*].type:  Informa qual o navegador ser\u00e1 executado.</li> <li>browsers.[*].headless:  Por padr\u00e3o \u00e9 <code>false</code>. Se <code>true</code> a janela do browser ficar\u00e1 invis\u00edvel durante a execu\u00e7\u00e3o.</li> <li>browsers.[*].dimension.mode:  Por padr\u00e3o \u00e9 definido como <code>MAXIMIZED</code>, tem valores poss\u00edveis <code>FULLSCREEN</code>, <code>MAXIMIZED</code> e <code>CUSTOM</code>. Se informado <code>CUSTOM</code>, as propriedades <code>width</code> e <code>height</code> ser\u00e3o obrigat\u00f3rias.</li> <li>browsers.[*].dimension.width: Informa qual a dimens\u00e3o de largura o navegador ser\u00e1 executado.</li> <li>browsers.[*].dimension.height:  Informa qual a dimens\u00e3o de altura o navegador ser\u00e1 executado.</li> </ul> </li> <li> <p>Caso seja executado o teste no estado atual o teste passar\u00e1 com sucesso. Note que agora na lista de execu\u00e7\u00f5es relizadas tem breve descri\u00e7\u00e3o do dimensionamento no qual o navegador aberto.</p> <p></p> </li> <li> <p>Pode ser configurada tamb\u00e9m timeouts para execu\u00e7\u00e3o dos testes configuration.yml<pre><code>execution:\n\n  target:\n    url: http://localhost:8099\n    version: 0.0.0\n\n  delay:\n    waitingTimeout: 5000    # Padr\u00e3o\n    actionInterval: 300     # Padr\u00e3o\n</code></pre></p> <ul> <li>execution.delay.waitingTimeout:  Tempo de espera m\u00e1ximo para execu\u00e7\u00e3o de a\u00e7\u00e3o.</li> <li>execution.delay.actionInterval:  Intervalo de tempo entre a\u00e7\u00f5es a serem executadas.</li> </ul> </li> </ol>"},{"location":"documentation/configure-environment/","title":"Configura\u00e7\u00e3o de ambiente","text":"<p>Nesta se\u00e7\u00e3o vamos configurar o ambiente de desenvolvimento para usar o Probato. Este Framework utiliza linguagem de programa\u00e7\u00e3o Java, ent\u00e3o ser\u00e1 necess\u00e1rio a instala\u00e7\u00e3o do Java Development Kit (JDK), configura\u00e7\u00e3o de vari\u00e1veis de ambiente, e instala\u00e7\u00e3o de uma IDE para come\u00e7ar a desenvolver aplica\u00e7\u00f5es Java.</p>"},{"location":"documentation/configure-environment/#baixar-e-instalar-o-java-development-kit-jdk","title":"Baixar e instalar o Java Development Kit (JDK)","text":"<p>O JDK \u00e9 um conjunto de ferramentas para o desenvolvimento e execu\u00e7\u00e3o de aplica\u00e7\u00f5es Java.</p>"},{"location":"documentation/configure-environment/#baixar-o-jdk","title":"Baixar o JDK","text":"<ol> <li> <p>Acesse o site oficial</p> <ul> <li>Acesse a p\u00e1gina de downloads do Oracle ou OpenJDK ou uma vers\u00e3o confi\u00e1vel como o Adoptium ou Amazon Corretto.</li> </ul> </li> <li> <p>Escolha a vers\u00e3o desejada</p> <ul> <li>Identifique a vers\u00e3o do JDK que voc\u00ea deseja instalar, \u00e9 mandat\u00f3rio que seja instalada vers\u00e3o 11 ou superior.</li> <li>Clique no link correspondente \u00e0 vers\u00e3o.</li> </ul> </li> <li> <p>Baixe o arquivo</p> <ul> <li>Escolha a distribui\u00e7\u00e3o e baixe o arquivo no formato <code>.zip</code>.</li> <li>Ap\u00f3s o download, extraia o arquivo <code>.zip</code> para uma pasta de sua escolha, como exemplo <code>C:dev\\java\\jdk&lt;vers\u00e3o&gt;</code></li> </ul> </li> </ol>"},{"location":"documentation/configure-environment/#configurar-variavel-de-ambiente","title":"Configurar vari\u00e1vel de ambiente","text":"<ol> <li>Pressione <code>Win + S</code>, procure por Vari\u00e1veis de Ambiente e clique em Editar as vari\u00e1veis de ambiente do sistema.</li> <li>Na aba Avan\u00e7ado, clique em Vari\u00e1veis de Ambiente.</li> <li>Na se\u00e7\u00e3o Vari\u00e1veis de Sistema, clique em Novo</li> <li>Adicione uma vari\u00e1vel de ambiente chamada <code>JAVA_HOME</code> apontando para o diret\u00f3rio do JDK, como exemplo <code>C:dev\\java\\jdk&lt;vers\u00e3o&gt;</code>.</li> <li>Clique em OK para salvar.</li> <li>Busque na lista de Vari\u00e1veis de Sistema a vari\u00e1vel <code>Path</code> e clique em Editar. </li> <li>Inclua na lista o caminho <code>%JAVA_HOME%\\bin</code> na vari\u00e1vel <code>Path</code>.</li> <li>Clique em OK para salvar.</li> </ol>"},{"location":"documentation/configure-environment/#verificar-a-instalacao","title":"Verificar a instala\u00e7\u00e3o","text":"<ol> <li>Abra o Prompt de Comando (pressione <code>Win + R</code>, digite cmd e pressione Enter).</li> <li>Digite o comando abaixo     <pre><code>java --version\n</code></pre></li> <li>O terminal dever\u00e1 exibir a vers\u00e3o do Java instalado     <pre><code>java version \"XX.XX\"\nJava(TM) SE Runtime Environment (build XX.XX)\nJava HotSpot(TM) 64-Bit Server VM (build XX.XX)\n</code></pre> Se voc\u00ea v\u00ea essa sa\u00edda, o Java est\u00e1 instalado e configurado corretamente! \ud83c\udf89</li> </ol>"},{"location":"documentation/configure-environment/#instalar-o-maven","title":"Instalar o Maven","text":""},{"location":"documentation/configure-environment/#baixar-e-instalar","title":"Baixar e instalar","text":"<ol> <li>Acesse o site do Apache Maven.</li> <li>Fa\u00e7a o download do arquivo bin\u00e1rio ZIP.</li> <li>Extraia para um local, como <code>C:\\dev\\maven</code>.</li> </ol>"},{"location":"documentation/configure-environment/#configurar-variaveis-de-ambiente","title":"Configurar vari\u00e1veis de ambiente","text":"<ol> <li>Pressione <code>Win + S</code>, procure por Vari\u00e1veis de Ambiente e clique em Editar as vari\u00e1veis de ambiente do sistema.</li> <li>Na aba Avan\u00e7ado, clique em Vari\u00e1veis de Ambiente.</li> <li>Na se\u00e7\u00e3o Vari\u00e1veis de Sistema, clique em Novo</li> <li>Adicione uma vari\u00e1vel de ambiente chamada <code>MAVEN_HOME</code> apontando para o diret\u00f3rio do Maven.</li> <li>Inclua o caminho <code>%MAVEN_HOME%\\bin</code> na vari\u00e1vel <code>Path</code>.</li> <li>Clique em OK para salvar.</li> </ol>"},{"location":"documentation/configure-environment/#verificar-a-instalacao_1","title":"Verificar a instala\u00e7\u00e3o","text":"<ol> <li>No prompt de comando, execute  <pre><code>mvn -version\n</code></pre></li> <li>Ap\u00f3s a execu\u00e7\u00e3o deve exibir sa\u00edda semelhante a abaixo    <pre><code>Apache Maven X.X.X\nMaven home: C:\\path\\to\\apache-maven-X.X.x\nJava version: X.X.X, vendor: Oracle Corporation, runtime: C:\\path\\to\\jdk-X.X.X\nDefault locale: pt_BR, platform encoding: UTF-8\nOS name: \"windows 11\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n</code></pre>     O Maven foi instalado com sucesso! \ud83c\udf89</li> </ol>"},{"location":"documentation/configure-environment/#instalar-uma-ide","title":"Instalar uma IDE","text":"<p>Uma IDE (Ambiente de Desenvolvimento Integrado) facilita a escrita, execu\u00e7\u00e3o e depura\u00e7\u00e3o do c\u00f3digo Java.</p>"},{"location":"documentation/configure-environment/#eclipse-ide","title":"Eclipse IDE","text":"<ol> <li>Baixe o Eclipse.</li> <li>Instale o Eclipse IDE for Java Developers.</li> <li>Abra o Eclipse, configure um workspace e comece a criar projetos.</li> </ol>"},{"location":"documentation/configure-environment/#intellij-idea","title":"IntelliJ IDEA","text":"<ol> <li>Baixe o IntelliJ.</li> <li>Escolha a vers\u00e3o Community (gratuita).</li> <li>Durante a primeira execu\u00e7\u00e3o, configure o caminho do JDK.</li> </ol>"},{"location":"documentation/configure-environment/#vs-code","title":"VS Code","text":"<ol> <li>Baixe o VS Code.</li> <li>Instale a extens\u00e3o Language Support for Java\u2122 by Red Hat.</li> <li>Configure o JDK nas prefer\u00eancias.</li> </ol>"},{"location":"documentation/create-extension-points/","title":"Create extension points","text":"<p>layout: documentation description: Guia do usu\u00e1rio - Criando pontos de extens\u00e3o navigation:     previous:         name: Alterando estado da aplica\u00e7\u00e3o         link: /documentation/change-application-state     next:          name: Projeto exemplo         link: /documentation/example-project</p>"},{"location":"documentation/create-project/","title":"Cria\u00e7\u00e3o do projeto","text":"<p>Nesta se\u00e7\u00e3o vamos criar o projeto base para o desenvolvimento da automa\u00e7\u00e3o dos testes funcionais com Probato. O Probato foi implementado utilizando linguagem de programa\u00e7\u00e3o Java, ent\u00e3o ser\u00e1 necess\u00e1rio a instala\u00e7\u00e3o do Java Development Kit (JDK), configura\u00e7\u00e3o de vari\u00e1veis de ambiente, e instala\u00e7\u00e3o de uma IDE para come\u00e7ar a desenvolver aplica\u00e7\u00f5es Java.</p>"},{"location":"documentation/create-project/#criar-um-projeto-maven","title":"Criar um projeto Maven","text":"<ol> <li>Abra o terminal ou prompt de comando.</li> <li>Navegue at\u00e9 o diret\u00f3rio onde deseja criar o projeto.</li> <li> <p>Execute o comando abaixo     <pre><code>mvn archetype:generate -DgroupId=com.example.automation -DartifactId=my-project-automation -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre></p> <ul> <li>groupId: Defina o identificador do grupo da sua organiza\u00e7\u00e3o, que \u00e9 geralmente relacionado ao dom\u00ednio (ex.: com.example.automation).</li> <li>artifactId: Defina o nome do projetode automa\u00e7\u00e3o do testes (ex.: my-project-automation).</li> </ul> <p>Obs: A cria\u00e7\u00e3o do projeto tamb\u00e9m pode ser feita pela IDE. 4. Ap\u00f3s a execu\u00e7\u00e3o, ser\u00e1 criada a seguinte estrutura: Estutura<pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/example/automation\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 App.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/automation\n\u2502               \u2514\u2500\u2500 AppTest.java\n\u2514\u2500\u2500 pom.xml\n</code></pre></p> </li> </ol>"},{"location":"documentation/create-project/#configurar-a-estrutura-de-pacotes-e-pastas","title":"Configurar a estrutura de pacotes e pastas","text":"<ol> <li>Abra o diret\u00f3rio <code>src/main/java/</code>.</li> <li>Na pasta <code>src/main/java/</code> remova o pacote <code>com.*</code></li> <li>Na pasta <code>src/test/java/</code> no pacote <code>com.example.automation</code> remova o arquivo <code>AppTest.java</code></li> <li>Crie o diret\u00f3rio <code>src/test/resources/</code> o arquivo chamado <code>configuration.yml</code>.</li> <li>O projeto deve ficar com estrutura abaixo:     Estrutura<pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500  test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       |   \u2514\u2500\u2500 com/example/automation\n\u2502       |       \u251c\u2500\u2500 model/\n\u2502       |       \u251c\u2500\u2500 page/\n\u2502       |       \u2514\u2500\u2500 usecase/\n|       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n|           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre><ul> <li>src/test/java/com/example/automation/*: No pacote que ser\u00e1 implementada a automa\u00e7\u00e3o.</li> <li>src/test/java/com/resources/automation/*: Na pasta que ser\u00e1 armazenada arquivos de configura\u00e7\u00f5es, massa de dados, sql, etc.</li> </ul> </li> </ol>"},{"location":"documentation/create-project/#adicionar-dependencias-ao-maven","title":"Adicionar depend\u00eancias ao Maven","text":"<ol> <li>Abra o arquivo <code>pom.xml</code> localizado no diret\u00f3rio raiz do projeto e adicione as depend\u00eancias necess\u00e1rias.    pom.xml<pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.exemplo.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt; &lt;!-- Vers\u00e3o atual do projeto alvo dos testes --&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/testano.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre> Obs: Ser\u00e3o adicionada as demais depend\u00eancias do Probato no decorrer desse tutorial</li> </ol>"},{"location":"documentation/example-project/","title":"Example project","text":"<p>layout: documentation description: Guia do usu\u00e1rio - Projeto exemplo navigation:     previous:         name: Criando pontos de extens\u00e3o         link: /documentation/create-extension-points</p>"},{"location":"documentation/implement-basic-script/","title":"Implementa\u00e7\u00e3o de roteiro b\u00e1sico","text":"<p>Nessa se\u00e7\u00e3o ser\u00e1 implementado um script de testes b\u00e1sico. O Probato adota uma estrutura modular que inclui scripts, procedures, page objects e test suites, vamos iniciar pelo nosso test suite. Para exemplificar a automa\u00e7\u00e3o de uma funcionalidade real, seguiremos com o desenvolvimento da automa\u00e7\u00e3o da aplica\u00e7\u00e3o Probato Manager. O Probato Manager possui como tela principal a p\u00e1gina de login, ent\u00e3o partiremos desta funcionalidade para o desenvolvimento dos testes automatizados: Efetuar Login</p>"},{"location":"documentation/implement-basic-script/#estrutura-base-da-aplicacao","title":"Estrutura base da aplica\u00e7\u00e3o","text":"<p>Vamos partir do princ\u00edpio que o projeto possui a seguinte estrutura abaixo:</p> Estrutura<pre><code>probato-manager-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500  test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       |   \u2514\u2500\u2500 org.probato.manager.automation\n\u2502       |       \u251c\u2500\u2500 model\n\u2502       |       \u251c\u2500\u2500 page\n\u2502       |       \u2514\u2500\u2500 usecase\n|       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n|           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre>"},{"location":"documentation/implement-basic-script/#implementado-classe-suite","title":"Implementado classe Suite","text":"<p>A Suite consiste em um agrupamento organizado de scripts de teste destinados a validar funcionalidades relacionadas ou espec\u00edficas de um sistema. A Suite \u00e9 essencial para estruturar e gerenciar a execu\u00e7\u00e3o de m\u00faltiplos testes, garantindo que eles sejam executados de forma eficiente e em uma ordem l\u00f3gica, quando necess\u00e1rio. Vamos criar nossa suite de testes.</p> <ol> <li>No pacote <code>org.probato.manager.usecase</code> vamos criar o novo pacote <code>UC01</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar a classe <code>UC01_PerformLogin.java</code>.</li> <li>Na classe <code>UC01_PerformLogin.java</code> vamos implementar o c\u00f3digo abaixo. UC01_PerformLogin.java<pre><code>package org.probato.manager.usecase.UC01;\n\nimport org.probato.api.Suite;\nimport org.probato.api.TestSuite;\n\n@Suite(\n  code = \"UC01\", \n  name = \"Perform login\", \n  description = \"This feature aims to allow the user to login to this application\")\nclass UC01_PerformLogin implements TestSuite {\n\n}\n</code></pre></li> <li>Caso seja executado o teste no estado atual, ser\u00e1 recebido a mensagem informando que a suite deve possuir pelo menos 1 caso de teste.</li> </ol>"},{"location":"documentation/implement-basic-script/#implementado-classe-script","title":"Implementado classe Script","text":"<ol> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar o novo pacote <code>script</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01.script</code> vamos criar a classe <code>UC01TC01_PerformLoginSuccessfully.java</code>.</li> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos implementar o c\u00f3digo abaixo. UC01TC01_PerformLoginSuccessfully.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.api.Script;\n\n@Script(\n  code = \"UC01TC01\", \n  name = \"Perform login successfully\", \n  description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n} \n</code></pre></li> <li>Na classe <code>UC01_PerformLogin.java</code> vamos adicionar a implementa\u00e7\u00e3o abaixo. UC01_PerformLogin.java<pre><code>package org.probato.manager.usecase.UC01;\n\nimport org.probato.api.Suite;\nimport org.probato.api.TestSuite;\nimport org.probato.manager.automation.usecase.UC01.script.UC01TC01_PerformLoginSuccessfully;\n\n@Suite(\n  code = \"UC01\", \n  name = \"Perform login\", \n  description = \"This feature aims to allow the user to login to this application\")\nclass UC01_PerformLogin implements TestSuite {\n\n  @TestCase\n  private UC01TC01_PerformLoginSuccessfully uc01tc01;\n\n}\n</code></pre></li> <li>Caso seja executado o teste no estado atual, ser\u00e1 recebido a mensagem informando que o script deve possuir pelo menos 1 procedure.</li> </ol>"},{"location":"documentation/implement-basic-script/#implementado-metodo-procedure","title":"Implementado m\u00e9todo procedure","text":"<ol> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos implementar o m\u00e9todo procedure abaixo. UC01TC01_PerformLoginSuccessfully.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.api.Procedure;\nimport org.probato.api.Script;\n\n@Script(\n  code = \"UC01TC01\", \n  name = \"Perform login successfully\", \n  description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n  @Procedure\n  private void procedure() {\n    System.out.println(\"Run method procedure\");\n  }\n\n}\n</code></pre></li> </ol> <p>Obs: </p> <ul> <li>Mesmo que adicionado conte\u00fado aos m\u00e9todos de procedure n\u00e3o ser\u00e1 executado, pois precisamos de algum executor instalado na nossa aplica\u00e7\u00e3o de automa\u00e7\u00f5es.</li> <li>Tanto a implementa\u00e7\u00e3o de procedure como m\u00e9todo ou como atributo, caso seja executado o teste no estado atual o teste n\u00e3o ter\u00e1 resultado.   </li> </ul>"},{"location":"documentation/implement-browser-execution/","title":"Implementando execu\u00e7\u00e3o por browser","text":"<p>Nesta se\u00e7\u00e3o, ser\u00e1 implementada a execu\u00e7\u00e3o das a\u00e7\u00f5es de teste nos navegadores. Essa etapa \u00e9 essencial para que o framework interaja com a interface gr\u00e1fica da aplica\u00e7\u00e3o em teste, simulando o comportamento do usu\u00e1rio final. Ser\u00e1 demonstrado como configurar e utilizar os m\u00e9todos dispon\u00edveis para realizar a\u00e7\u00f5es como clicar em elementos, preencher campos, navegar entre p\u00e1ginas, e validar informa\u00e7\u00f5es exibidas na interface.</p>"},{"location":"documentation/implement-browser-execution/#implementando-page-object","title":"Implementando Page Object","text":"<ol> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>LoginPage.java</code>. LoginPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class LoginPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"public-container\\\"]/app-login/form/div/div[1]/h1\")\n  private WebElement titlePage;\n\n  @FindBy(xpath = \"//*[@id=\\\"email\\\"]\")\n  private WebElement emailInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"password\\\"]\")\n  private WebElement passwordInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"login-btn\\\"]\")\n  private WebElement accessButton;\n\n  @Action(\"Check `Login` page\")\n  public void checkPage() {\n    assertEquals(\"Login\", titlePage.getText());\n    assertTrue(emailInput.isDisplayed());\n    assertTrue(passwordInput.isDisplayed());\n    assertTrue(accessButton.isDisplayed());\n  }\n\n  @Action(\"Fill in the 'Email' field with '{{email}}' value\")\n  public void fillEmail(@Param(\"email\") String email) {\n    emailInput.sendKeys(email);\n  }\n\n  @Action(\"Fill in the 'Password' field with {{password}} value\")\n  public void fillPassword(@Param(\"password\") String password) {\n    passwordInput.sendKeys(password);\n  }\n\n  @Action(\"Press the 'Access' button\")\n  public void pressAccessButton() {\n    accessButton.click();\n  }\n\n}\n</code></pre></li> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>DashboardPage.java</code>. DashboardPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class DashboardPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"private-container\\\"]/app-view-dashboard/div/div[1]/div/h1\")\n  private WebElement titlePage;\n\n  @Action(\"Check `Dashboard` page\")\n  public void checkPage() {\n    assertEquals(\"Dashboard\", titlePage.getText());\n  }\n\n}\n</code></pre></li> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos acionar a implementa\u00e7\u00e3o abaixo. PerformLoginProcedure.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.manager.automation.page.DashboardPage;\nimport org.probato.manager.automation.page.LoginPage;\n\nimport org.probato.api.Page;\nimport org.probato.api.Postcondition;\nimport org.probato.api.Precondition;\nimport org.probato.api.Procedure;\nimport org.probato.api.Script;\n\n@Script(\n  code = \"UC01TC01\", \n  name = \"Perform login successfully\", \n  description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n    @Page\n    private LoginPage loginPage;\n\n    @Page\n    private DashboardPage dashboardPage;\n\n    @Procedure\n    private void procedure() {\n        loginPage.selectEnglishTranslate();\n        loginPage.checkPage();\n        loginPage.fillEmail(\"feliperudolfe@probato.org\");\n        loginPage.fillPassword(\"p@ssword\");\n        loginPage.pressAccessButton();\n        dashboardPage.checkPage();\n    }\n\n}\n</code></pre></li> <li>Agora caso seja executado o teste no estado atual veremos que cada um dos browser ser\u00e1 aberto e veremos que os passos implementados para o teste ser\u00e3o executados.</li> </ol>"},{"location":"documentation/implement-browser-execution/#consideracoes-finais","title":"Considera\u00e7\u00f5es finais","text":"<p>Conseguimos implementar com sucesso nosso primeiro caso de uso, alcan\u00e7ando os objetivos iniciais. Contudo, identificamos alguns pontos de aten\u00e7\u00e3o e oportunidades de melhoria que abordaremos nas pr\u00f3ximas se\u00e7\u00f5es desse guia para tornar nossa solu\u00e7\u00e3o mais robusta e eficiente.</p> <p>Observa\u00e7\u00e3o:  Com base no estado atual da implementa\u00e7\u00e3o, destacamos os seguintes aspectos que podem ser aprimorados:</p>"},{"location":"documentation/implement-browser-execution/#dados-de-entrada-estaticos","title":"Dados de entrada est\u00e1ticos:","text":"<p>Os dados utilizados no teste est\u00e3o fixos no c\u00f3digo, o que limita a capacidade de explorar a funcionalidade com diferentes conjuntos de dados. Adicionar suporte para parametriza\u00e7\u00e3o de dados de entrada, como arquivos CSV ou JSON, permitiria validar a robustez e flexibilidade do sistema com cen\u00e1rios variados.</p>"},{"location":"documentation/implement-browser-execution/#ausencia-de-pre-condicoes-e-pos-condicoes","title":"Aus\u00eancia de pr\u00e9-condi\u00e7\u00f5es e p\u00f3s-condi\u00e7\u00f5es:","text":"<p>Atualmente, todos os procedimentos est\u00e3o sendo validados diretamente no m\u00e9todo procedure. Isso dificulta a distin\u00e7\u00e3o entre erros de pr\u00e9-condi\u00e7\u00e3o e falhas no escopo da funcionalidade principal do teste. A implementa\u00e7\u00e3o de pr\u00e9-condi\u00e7\u00f5es e p\u00f3s-condi\u00e7\u00f5es ajudaria a isolar poss\u00edveis problemas, facilitando a an\u00e1lise e o diagn\u00f3stico de falhas.</p>"},{"location":"documentation/implement-browser-execution/#dependencia-de-dados-na-base-da-aplicacao","title":"Depend\u00eancia de dados na base da aplica\u00e7\u00e3o:","text":"<p>O script de teste atual exige que um e-mail e senha estejam previamente cadastrados no banco de dados da aplica\u00e7\u00e3o para ser executado com sucesso. Essa depend\u00eancia pode ser problem\u00e1tica e tornar o teste menos confi\u00e1vel. \u00c9 recomend\u00e1vel implementar um mecanismo de setup automatizado para criar os dados necess\u00e1rios antes da execu\u00e7\u00e3o do teste, eliminando essa depend\u00eancia manual ou at\u00e9 de outros cen\u00e1rios de testes.</p> <p>Ao abordar essas melhorias, estaremos fortalecendo a estrutura dos testes, garantindo maior clareza na an\u00e1lise de falhas e aumentando a cobertura e a confiabilidade dos casos de teste.</p>"},{"location":"documentation/parameterize-input-data/","title":"Parametrizando dados de entrada","text":"<p>Nesta se\u00e7\u00e3o, abordaremos a parametriza\u00e7\u00e3o de massa de dados utilizando datasets para conjuntos de dados de entrada. Exploraremos como configurar e estruturar esses arquivos, al\u00e9m de demonstrar o processo de inje\u00e7\u00e3o dos dados diretamente nos scripts de teste. Esse recurso \u00e9 essencial para criar testes din\u00e2micos e flex\u00edveis, permitindo validar a funcionalidade com diversos cen\u00e1rios e melhorar a abrang\u00eancia da automa\u00e7\u00e3o.</p>"},{"location":"documentation/parameterize-input-data/#adicionando-dependencia-para-dataset","title":"Adicionando depend\u00eancia para dataset","text":"<ol> <li>No arquivo <code>pom.xml</code> pode ser adicionada a depend\u00eancia pom.xml<pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.exemplo.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt; &lt;!-- Vers\u00e3o atual do projeto alvo dos testes --&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/testano.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-browser&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-dataset-csv&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre></li> </ol>"},{"location":"documentation/parameterize-input-data/#criando-arquivo-dataset","title":"Criando arquivo dataset","text":"<ol> <li>Na pasta <code>src/test/resources/dataset</code> vamos criar a nova pasta <code>UC01</code>.</li> <li>Na pasta <code>src/test/resources/dataset/UC01</code> vamos criar o arquivo chamado <code>UC01TC01.csv</code>.</li> <li>No arquivo <code>UC01TC01.csv</code> vamos adicionar o conte\u00fado abaixo. UC01TC01.csv<pre><code>EMAIL, PASSWORD\nuser01@probato.org, p@ssword\nuser02@probato.org, p@ssword123\nuser02@probato.org, p@ssword321\n</code></pre></li> </ol>"},{"location":"documentation/parameterize-input-data/#implementando-classe-de-mapeamento-de-entrada","title":"Implementando classe de mapeamento de entrada","text":"<ol> <li>No pacote <code>org.probato.manager.automation.model</code> vamos criar a classe <code>LoginPage.java</code>. LoginModel.java<pre><code>package org.probato.manager.automation.model;\n\nimport org.probato.model.Datamodel;\n\npublic class LoginModel extends Datamodel {\n\n    private String email;\n    private String password;\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n}\n</code></pre></li> </ol>"},{"location":"documentation/parameterize-input-data/#adicionando-dataset-ao-script","title":"Adicionando dataset ao script","text":"<ol> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos acionar a implementa\u00e7\u00e3o abaixo. PerformLoginProcedure.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.manager.automation.model.LoginModel;\nimport org.probato.manager.automation.page.DashboardPage;\nimport org.probato.manager.automation.page.LoginPage;\n\nimport org.probato.api.Dataset;\nimport org.probato.api.Page;\nimport org.probato.api.Procedure;\nimport org.probato.api.Script;\n\n@Dataset(\"dataset/UC01/UC01TC01.csv\")\n@Script(\n    code = \"UC01TC01\", \n    name = \"Perform login successfully\", \n    description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n    @Page\n    private LoginPage loginPage;\n\n    @Page\n    private DashboardPage dashboardPage;\n\n    @Procedure\n    private void procedure(LoginModel model) {\n        loginPage.selectEnglishTranslate();\n        loginPage.checkPage();\n        loginPage.fillEmail(model.getEmail());\n        loginPage.fillPassword(model.getPassword());\n        loginPage.pressAccessButton();\n        dashboardPage.checkPage();\n    }\n\n}\n</code></pre></li> <li> <p>Agora caso seja executado o teste no estado atual veremos que ser\u00e1 realizada um execu\u00e7\u00e3o para cada uma das linhas de dados acrescentados no arquivo CSV para cada um dos browsers configurados.</p> <p></p> </li> </ol>"},{"location":"documentation/parameterize-input-data/#consideracoes-finais","title":"Considera\u00e7\u00f5es finais","text":"<p>Conseguimos implementar com sucesso a utiliza\u00e7\u00e3o de datasets no nosso primeiro script. Apesar de todas as execu\u00e7\u00f5es terem apresentado falhas, foi poss\u00edvel observar que o comportamento esperado foi alcan\u00e7ado: os testes foram executados de forma iterativa, passando cada linha do arquivo CSV como entrada para o script e executando para cada um dos browsers configurados.</p> <p>Nosso pr\u00f3ximo objetivo \u00e9 garantir que as pr\u00e9-condi\u00e7\u00f5es associadas a cada conjunto de dados sejam verificadas e atendidas antes do in\u00edcio da execu\u00e7\u00e3o de cada teste. Isso assegurar\u00e1 que o ambiente de teste esteja devidamente preparado, minimizando falhas relacionadas a estados inadequados da aplica\u00e7\u00e3o ou inconsist\u00eancias nos dados de entrada.</p>"},{"location":"documentation/understand-good-pratices-for-testing/","title":"Entendo boas pr\u00e1ticas para testes","text":"<p>Nesta se\u00e7\u00e3o, antes de colocarmos a m\u00e3o na massa para implementar scripts de teste, ser\u00e1 necess\u00e1rio alinhar o entendimento sobre o que s\u00e3o scripts de teste, como eles s\u00e3o compostos e sua estrutura e seus objetivos.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#o-que-um-suite-de-testes","title":"O que um suite de testes","text":"<p>Uma suite de testes \u00e9 um conjunto organizado de casos ou scripts de teste que s\u00e3o agrupados com o objetivo de validar um ou mais aspectos de um sistema, aplica\u00e7\u00e3o ou funcionalidade. Esses testes podem ser organizados com base em crit\u00e9rios como funcionalidade, prioridade, tipo de teste (funcional, desempenho, seguran\u00e7a, etc.) ou fases do ciclo de vida do software.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#objetivo-da-suite","title":"Objetivo da suite","text":"<p>O principal objetivo de uma suite de testes \u00e9 permitir a execu\u00e7\u00e3o coordenada e estruturada de m\u00faltiplos testes, garantindo:</p> <ul> <li> <p>Cobertura abrangente:  Valida\u00e7\u00e3o de diferentes cen\u00e1rios de uso e requisitos do sistema.</p> </li> <li> <p>Reutiliza\u00e7\u00e3o:  Organiza\u00e7\u00e3o de testes relacionados para facilitar a manuten\u00e7\u00e3o e reutiliza\u00e7\u00e3o.</p> </li> <li>Automa\u00e7\u00e3o:  Execu\u00e7\u00e3o cont\u00ednua e automatizada de um conjunto de testes como parte do processo de integra\u00e7\u00e3o ou entrega cont\u00ednua (CI/CD).</li> <li>An\u00e1lise de qualidade:  Coletar resultados e identificar \u00e1reas cr\u00edticas ou vulnerabilidades no sistema.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#composicao-de-uma-suite","title":"Composi\u00e7\u00e3o de uma suite","text":"<p>Uma suite de testes geralmente inclui:</p> <ul> <li>Casos de teste ou scripts:  A\u00e7\u00f5es espec\u00edficas ou cen\u00e1rios que devem ser validados.</li> <li>Configura\u00e7\u00f5es gerais:  Par\u00e2metros ou ambientes compartilhados pelos testes, como URLs, credenciais e op\u00e7\u00f5es de execu\u00e7\u00e3o.</li> <li>Dados de teste:  Massa de dados usada pelos casos de teste, que pode ser compartilhada ou espec\u00edfica para cada teste.</li> <li>Depend\u00eancias:  Ordem de execu\u00e7\u00e3o ou rela\u00e7\u00e3o entre os testes, caso algum dependa do estado gerado por outro.</li> <li>Crit\u00e9rios de sucesso ou falha:  Regras para determinar se a suite foi executada com sucesso.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#tipos-de-suites","title":"Tipos de suites","text":"<ol> <li>Funcional:  Focada na valida\u00e7\u00e3o de requisitos funcionais do sistema.<ul> <li>Exemplo:  Testar o fluxo de login, cadastro e recupera\u00e7\u00e3o de senha.</li> </ul> </li> <li>Regress\u00e3o:  Verifica se mudan\u00e7as recentes no c\u00f3digo n\u00e3o introduziram novos erros em funcionalidades j\u00e1 existentes.<ul> <li>Exemplo:  Executar todos os testes funcionais ap\u00f3s a corre\u00e7\u00e3o de um bug.</li> </ul> </li> <li>Performance:  Avalia o desempenho do sistema sob diferentes condi\u00e7\u00f5es.<ul> <li>Exemplo:  Medir o tempo de resposta de uma API com alta carga de requisi\u00e7\u00f5es.</li> </ul> </li> <li>Integra\u00e7\u00e3o:  Valida a comunica\u00e7\u00e3o entre diferentes m\u00f3dulos ou sistemas.<ul> <li>Exemplo:  Testar a integra\u00e7\u00e3o entre uma aplica\u00e7\u00e3o web e um servi\u00e7o de pagamento.</li> </ul> </li> <li>Smoke:  Um subconjunto de testes r\u00e1pidos para verificar se o sistema b\u00e1sico est\u00e1 funcional antes de testes mais detalhados.<ul> <li>Exemplo:  Testar apenas o carregamento da p\u00e1gina inicial e o acesso a fun\u00e7\u00f5es principais.</li> </ul> </li> <li>Explorat\u00f3ria:  Testes n\u00e3o estruturados executados para descobrir comportamentos inesperados.</li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#vantagens-de-usar-suites","title":"Vantagens de usar suites","text":"<ul> <li>Organiza\u00e7\u00e3o e modularidade:  Agrupa testes relacionados, facilitando a manuten\u00e7\u00e3o.</li> <li>Automa\u00e7\u00e3o eficiente:  Permite a execu\u00e7\u00e3o em lote, otimizando o tempo de valida\u00e7\u00e3o.</li> <li>Facilidade de an\u00e1lise:  Os resultados s\u00e3o centralizados, facilitando a identifica\u00e7\u00e3o de problemas.</li> <li>Reutiliza\u00e7\u00e3o de scripts:  Scripts podem ser usados em v\u00e1rias suites sem duplica\u00e7\u00e3o de esfor\u00e7o.</li> </ul> <p>Exemplo Pr\u00e1tico  Imagine uma aplica\u00e7\u00e3o de e-commerce. Uma suite de testes funcional para valida\u00e7\u00e3o de fluxo de compra pode incluir:</p> <ul> <li>Teste de login</li> <li>Teste de busca por produto</li> <li>Teste de adi\u00e7\u00e3o ao carrinho</li> <li>Teste de checkout e pagamento</li> </ul> <p>Essa suite pode ser executada automaticamente sempre que houver uma altera\u00e7\u00e3o no c\u00f3digo da aplica\u00e7\u00e3o, garantindo que o fluxo de compra permane\u00e7a funcional.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#o-que-compoe-um-script","title":"O que comp\u00f5e um script","text":"<p>Em testes de software, pr\u00e9-condi\u00e7\u00f5es, procedimentos, e p\u00f3s-condi\u00e7\u00f5es s\u00e3o conceitos fundamentais que estruturam um roteiro de teste. Eles ajudam a garantir que os testes sejam executados de forma consistente, organizada e com resultados verific\u00e1veis. Veja os detalhes de cada um:</p>"},{"location":"documentation/understand-good-pratices-for-testing/#pre-condicoes","title":"Pr\u00e9-Condi\u00e7\u00f5es","text":"<p>As pr\u00e9-condi\u00e7\u00f5es s\u00e3o as condi\u00e7\u00f5es ou estados que precisam ser estabelecidos antes que o teste possa ser executado. Elas garantem que o ambiente de teste, os dados ou a aplica\u00e7\u00e3o estejam em um estado inicial adequado para o sucesso do teste.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplos","title":"Exemplos:","text":"<ul> <li>Ambiente configurado:  Certificar-se de que o servidor de aplica\u00e7\u00e3o est\u00e1 em execu\u00e7\u00e3o e acess\u00edvel.</li> <li>Usu\u00e1rio autenticado:  O usu\u00e1rio deve estar logado no sistema com um perfil espec\u00edfico.</li> <li>Banco de dados:  Dados de teste previamente carregados ou tabelas limpas.</li> <li>Recursos externos:  Verificar se APIs externas necess\u00e1rias est\u00e3o dispon\u00edveis.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#boas-praticas","title":"Boas pr\u00e1ticas:","text":"<ul> <li>Automatizar a configura\u00e7\u00e3o das pr\u00e9-condi\u00e7\u00f5es para evitar erros humanos.</li> <li>Definir claramente as depend\u00eancias e garantir que o estado inicial seja reproduz\u00edvel.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplo-no-contexto-do-probato","title":"Exemplo no contexto do Probato:","text":"<p>Um script de teste pode incluir uma pr\u00e9-condi\u00e7\u00e3o para que o estado do banco de dados seja alterado usando o executor SQL integrado antes de iniciar o teste principal.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#procedimentos","title":"Procedimentos","text":"<p>Os procedimentos descrevem os passos reais que comp\u00f5em e que s\u00e3o o objeto alvo do teste. Eles incluem todas as a\u00e7\u00f5es que simulam o comportamento do usu\u00e1rio ou a intera\u00e7\u00e3o com o sistema. Esses passos devem ser claros e detalhados para que possam ser reproduzidos de forma consistente.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplos_1","title":"Exemplos:","text":"<ol> <li>Navegar para a p\u00e1gina de login.</li> <li>Preencher campo 'E-mail'.</li> <li>Preencher campo 'Senha'.</li> <li>Acionar o bot\u00e3o de \"Acessar\".</li> <li>Validar que o usu\u00e1rio foi redirecionado para a p\u00e1gina inicial.</li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#boas-praticas_1","title":"Boas pr\u00e1ticas:","text":"<ul> <li>Cada passo deve ser at\u00f4mico, ou seja, simples e com uma \u00fanica responsabilidade.</li> <li>Documentar as a\u00e7\u00f5es de maneira que qualquer pessoa possa seguir e entender, mesmo que n\u00e3o seja t\u00e9cnica.</li> <li>Incluir verifica\u00e7\u00f5es ou checkpoints durante os procedimentos para validar o estado do sistema.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplo-no-probato","title":"Exemplo no Probato:","text":"<p>O framework organiza os procedimentos em etapas bem definidas, permitindo capturar logs detalhados de cada a\u00e7\u00e3o, como cliques e entradas de dados, para facilitar o rastreamento de erros.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#pos-condicoes","title":"P\u00f3s-Condi\u00e7\u00f5es","text":"<p>As p\u00f3s-condi\u00e7\u00f5es s\u00e3o os resultados esperados ou estados finais que devem ser verificados ap\u00f3s a execu\u00e7\u00e3o do teste. Elas confirmam que o teste atingiu seus objetivos e que o sistema respondeu conforme o esperado.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplos_2","title":"Exemplos:","text":"<ul> <li>Mudan\u00e7a de estado:  Verificar que o usu\u00e1rio foi autenticado e est\u00e1 na p\u00e1gina inicial.</li> <li>Persist\u00eancia de dados:  Garantir que um novo registro foi adicionado ao banco de dados.</li> <li>Sa\u00edda vis\u00edvel:  Validar que uma mensagem de sucesso foi exibida na tela.</li> <li>Restaura\u00e7\u00e3o do ambiente:  Retornar o sistema ao estado inicial para que outros testes possam ser executados.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#boas-praticas_2","title":"Boas pr\u00e1ticas:","text":"<ul> <li>Verificar o maior n\u00famero de condi\u00e7\u00f5es relevantes sem introduzir redund\u00e2ncia.</li> <li>Automatizar as valida\u00e7\u00f5es para garantir precis\u00e3o e reduzir esfor\u00e7o humano.</li> <li>Rastrear erros capturando logs, v\u00eddeos e screenshots.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplo-no-probato_1","title":"Exemplo no Probato:","text":"<p>Ap\u00f3s executar um teste, o framework pode captura de tela, v\u00eddeos e logs detalhados de execu\u00e7\u00e3o, al\u00e9m de validar as condi\u00e7\u00f5es de sucesso ou falha com base nos dados coletados.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#relacao-entre-pre-condicoes-procedimentos-e-pos-condicoes","title":"Rela\u00e7\u00e3o entre pr\u00e9-condi\u00e7\u00f5es, procedimentos e p\u00f3s-condi\u00e7\u00f5es","text":"<p>Esses elementos formam uma estrutura l\u00f3gica para qualquer teste:</p> <ul> <li>As pr\u00e9-condi\u00e7\u00f5es configuram o estado inicial do sistema.</li> <li>Os procedimentos realizam a simula\u00e7\u00e3o ou execu\u00e7\u00e3o do comportamento esperado.</li> <li>As p\u00f3s-condi\u00e7\u00f5es validam se o comportamento resultante foi conforme o esperado.</li> </ul> <p>Essa abordagem garante clareza e rastreabilidade nos testes, permitindo que os resultados sejam analisados de forma objetiva, al\u00e9m disso ajuda na an\u00e1lide do resultados a da classifica\u00e7\u00e3o em Sucesso, Erro, Falha e Impeditivo, nesse \u00faltimo ocorren quando um teste n\u00e3o consegue checar at\u00e9 a execu\u00e7\u00e3o do procedimento.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#exemplo-pratico-de-caso-de-uso","title":"Exemplo pr\u00e1tico de caso de uso","text":"<p>Implementado um script de testes b\u00e1sico. O Probato adota uma estrutura modular que inclui scripts, procedures, page objects e suites, vamos iniciar pelo nosso test suite. Para exemplificar a automa\u00e7\u00e3o de uma funcionalidade real, seguiremos com o desenvolvimento da automa\u00e7\u00e3o da aplica\u00e7\u00e3o Probato Manager. O Probato Manager possui como tela principal a p\u00e1gina de login, ent\u00e3o partiremos desta funcionalidade para o desenvolvimento dos testes automatizados: Realizar Login</p>"},{"location":"documentation/understand-good-pratices-for-testing/#caso-de-uso-realizar-login","title":"Caso de uso: Realizar Login","text":"<p>O caso de uso de realizar login na aplica\u00e7\u00e3o tem como objetivo permitir que o usu\u00e1rio, utilizando e-mail e senha previamente cadastrados, acesse as demais funcionalidades da aplica\u00e7\u00e3o. Essa funcionalidade inclui os seguintes fluxos:</p>"},{"location":"documentation/understand-good-pratices-for-testing/#fluxo-basico-realizar-login-com-sucesso","title":"[Fluxo B\u00e1sico] Realizar login com sucesso:","text":"<ul> <li>Pr\u00e9-condi\u00e7\u00f5es:  <ul> <li>Deve ter solicitada a p\u00e1gina de login;</li> <li>Deve possuir usu\u00e1rio com e-mail '{{email}}' e respectiva senha '{{senha}}' cadastrado;</li> <li>Usu\u00e1rio com e-mail '{{email}}' deve est\u00e1 ativo;</li> </ul> </li> <li>Procedimento:<ul> <li>Usu\u00e1rio preenche campo 'E-mail' com valor '{{email}}';</li> <li>Usu\u00e1rio preenche campo 'Senha' com valor '{{senha}}';</li> <li>Usu\u00e1rio aciona bot\u00e3o 'Acessar';</li> </ul> </li> <li>P\u00f3s-Condi\u00e7\u00f5es:<ul> <li>Sistema exibe p\u00e1gina 'Painel Principal' com sucesso;</li> </ul> </li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#fluxo-de-excecao-usuario-nao-encontrado","title":"[Fluxo de Exce\u00e7\u00e3o] Usu\u00e1rio n\u00e3o encontrado:","text":"<ul> <li>Pr\u00e9-condi\u00e7\u00f5es:  <ul> <li>Deve ter solicitada a p\u00e1gina de login;</li> <li>N\u00e3o deve possuir usu\u00e1rio com e-mail '{{email}}';</li> </ul> </li> <li>Procedimento:<ul> <li>Usu\u00e1rio preenche campo 'E-mail' com valor '{{email}}';</li> <li>Usu\u00e1rio preenche campo 'Senha' com valor '{{senha}}';</li> <li>Usu\u00e1rio aciona bot\u00e3o 'Acessar';</li> </ul> </li> <li>P\u00f3s-Condi\u00e7\u00f5es:<ul> <li>Sistema exibe mensagem de aviso com texto '{{usuario_nao_encontrado}}'</li> </ul> </li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#fluxo-de-excecao-senha-nao-confere","title":"[Fluxo de Exce\u00e7\u00e3o] Senha n\u00e3o confere:","text":"<ul> <li>Pr\u00e9-condi\u00e7\u00f5es:  <ul> <li>Deve ter solicitada a p\u00e1gina de login;</li> <li>Deve possuir usu\u00e1rio com e-mail '{{email}}' e senha senha diferente de '{{senha}}' cadastrado;</li> </ul> </li> <li>Procedimento:<ul> <li>Usu\u00e1rio preenche campo 'E-mail' com valor '{{email}}';</li> <li>Usu\u00e1rio preenche campo 'Senha' com valor '{{senha}}';</li> <li>Usu\u00e1rio aciona bot\u00e3o 'Acessar';</li> </ul> </li> <li>P\u00f3s-Condi\u00e7\u00f5es:<ul> <li>Sistema exibe mensagem de aviso '{{senha_nao_confere}}'</li> </ul> </li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#fluxo-de-excecao-usuario-inativo","title":"[Fluxo de Exce\u00e7\u00e3o] Usu\u00e1rio inativo:","text":"<ul> <li>Pr\u00e9-condi\u00e7\u00f5es:  <ul> <li>Deve ter solicitada a p\u00e1gina de login;</li> <li>Deve possuir usu\u00e1rio com e-mail '{{email}}' e senha senha diferente de '{{senha}}' cadastrado;</li> <li>Usu\u00e1rio com e-mail '{{email}}' deve est\u00e1 inativo;</li> </ul> </li> <li>Procedimento:<ul> <li>Usu\u00e1rio preenche campo 'E-mail' com valor '{{email}}';</li> <li>Usu\u00e1rio preenche campo 'Senha' com valor '{{senha}}';</li> <li>Usu\u00e1rio aciona bot\u00e3o 'Acessar';</li> </ul> </li> <li>P\u00f3s-Condi\u00e7\u00f5es:<ul> <li>Sistema exibe mensagem de aviso com texto '{{usuario_inativo}}'</li> </ul> </li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#fluxo-de-excecao-campo-obrigatorio-nao-informado","title":"[Fluxo de Exce\u00e7\u00e3o] Campo obrigat\u00f3rio n\u00e3o informado:","text":"<ul> <li>Pr\u00e9-condi\u00e7\u00f5es:  <ul> <li>Deve ter solicitada a p\u00e1gina de login;</li> </ul> </li> <li>Procedimento:<ul> <li>Usu\u00e1rio aciona bot\u00e3o 'Acessar';</li> </ul> </li> <li>P\u00f3s-Condi\u00e7\u00f5es:<ul> <li>Sistema exibe mensagem de aviso com texto '{{email_obrigatoria}}'</li> <li>Sistema exibe mensagem de aviso com texto '{{senha_obrigatoria}}'</li> </ul> </li> </ul> <p>Obs: Essa estrutura sistem\u00e1tica n\u00e3o apenas facilita a execu\u00e7\u00e3o dos testes, mas tamb\u00e9m ajuda a documentar e comunicar claramente os cen\u00e1rios de teste.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#massa-de-dados","title":"Massa de dados","text":"<p>Massa de dados para teste de software refere-se ao conjunto de dados usado durante a execu\u00e7\u00e3o de testes, com o objetivo de validar a funcionalidade, desempenho, seguran\u00e7a e outros aspectos de um sistema ou aplica\u00e7\u00e3o. Esses dados representam entradas, condi\u00e7\u00f5es ou cen\u00e1rios reais e simulados que ajudam a avaliar o comportamento do sistema em diferentes situa\u00e7\u00f5es.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#objetivo-da-massa-de-dados","title":"Objetivo da massa de dados","text":"<p>A massa de dados \u00e9 fundamental para:</p> <ul> <li>Simular cen\u00e1rios reais:  Verificar se o sistema funciona corretamente com dados semelhantes aos que ser\u00e3o usados em produ\u00e7\u00e3o.</li> <li>Garantir cobertura de teste: Testar todos os poss\u00edveis caminhos, incluindo entradas v\u00e1lidas, inv\u00e1lidas e extremas.</li> <li>Identificar falhas:  Detectar erros que ocorrem devido a dados inesperados, formatos incorretos ou limites ultrapassados.</li> <li>Validar integra\u00e7\u00f5es: Garantir que a comunica\u00e7\u00e3o entre diferentes componentes do sistema, como bancos de dados e APIs, funciona conforme o esperado.</li> </ul>"},{"location":"documentation/understand-good-pratices-for-testing/#tipos-de-massa-de-dados","title":"Tipos de massa de dados","text":"<ol> <li> <p>Dados v\u00e1lidos S\u00e3o os dados que seguem os requisitos esperados pelo sistema. Eles s\u00e3o usados para verificar o funcionamento correto do sistema.</p> <ul> <li>Exemplo: Um CPF v\u00e1lido, um nome de usu\u00e1rio dentro do limite permitido, ou valores num\u00e9ricos esperados.</li> </ul> </li> <li> <p>Dados inv\u00e1lidos S\u00e3o dados que deliberadamente n\u00e3o atendem aos requisitos do sistema, usados para testar a robustez e a capacidade de tratamento de erros.</p> <ul> <li>Exemplo: Um CPF com formato incorreto, campos vazios ou um n\u00famero fora do intervalo permitido.</li> </ul> </li> <li> <p>Dados nulos ou vazios  Representam a aus\u00eancia de entrada, ajudando a validar como o sistema lida com a falta de dados.</p> <ul> <li>Exemplo: Testar um campo obrigat\u00f3rio sem preench\u00ea-lo.</li> </ul> </li> <li> <p>Dados de limite  S\u00e3o usados para validar o comportamento do sistema nas extremidades das condi\u00e7\u00f5es aceit\u00e1veis.</p> <ul> <li>Exemplo: Inserir o menor e o maior valor permitido para um campo num\u00e9rico ou texto com o limite m\u00e1ximo de caracteres.</li> </ul> </li> <li> <p>Dados redundantes  Dados repetidos ou duplicados s\u00e3o usados para verificar se o sistema lida corretamente com entradas duplicadas.</p> <ul> <li>Exemplo: Inserir o mesmo registro de usu\u00e1rio duas vezes para testar restri\u00e7\u00f5es de unicidade.</li> </ul> </li> <li> <p>Dados massivos  Um grande volume de dados usado para testar a escalabilidade e desempenho do sistema.</p> <ul> <li>Exemplo: Um teste de carga com milh\u00f5es de registros no banco de dados.</li> </ul> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#origem-da-massa-de-dados","title":"Origem da massa de dados","text":"<p>A massa de dados pode ser obtida de v\u00e1rias formas, dependendo do contexto e da necessidade do teste:</p> <ol> <li> <p>Dados reais  Extra\u00eddos de ambientes de produ\u00e7\u00e3o (com os devidos cuidados para anonimiza\u00e7\u00e3o e seguran\u00e7a) para representar situa\u00e7\u00f5es reais.</p> </li> <li> <p>Dados parametrizados  Criados com base em arquivos como CSV, JSON ou XML, ou at\u00e9 mesmo em bancos de dados espec\u00edficos, permitindo reutiliza\u00e7\u00e3o e varia\u00e7\u00e3o controlada.</p> </li> <li> <p>Dados simulados  S\u00e3o gerados artificialmente para simular entradas espec\u00edficas, geralmente usando ferramentas ou scripts automatizados.</p> </li> <li> <p>Dados aleat\u00f3rios  Gerados dinamicamente durante os testes para explorar situa\u00e7\u00f5es inesperadas.</p> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#desafios-na-utilizacao-de-massa-de-dados","title":"Desafios na utiliza\u00e7\u00e3o de massa de dados","text":"<ol> <li> <p>Manuten\u00e7\u00e3o  Garantir que a massa de dados esteja sempre atualizada e alinhada aos requisitos do sistema.</p> </li> <li> <p>Seguran\u00e7a e privacidade Se forem usados dados reais, \u00e9 necess\u00e1rio garantir a anonimiza\u00e7\u00e3o para evitar vazamento de informa\u00e7\u00f5es sens\u00edveis.</p> </li> <li> <p>Cobertura Criar uma massa de dados que cubra adequadamente todos os cen\u00e1rios de teste, sem deixar lacunas importantes.</p> </li> <li> <p>Volume e desempenho Garantir que os testes sejam executados dentro de um tempo aceit\u00e1vel mesmo ao lidar com grandes volumes de dados.</p> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#boas-praticas_3","title":"Boas pr\u00e1ticas","text":"<ol> <li> <p>Automatizar a gera\u00e7\u00e3o de dados  Use ferramentas ou scripts para criar massa de dados variada e din\u00e2mica, reduzindo erros manuais.</p> </li> <li> <p>Organiza\u00e7\u00e3o e reutiliza\u00e7\u00e3o  Estruture a massa de dados em arquivos ou bancos de dados bem organizados para facilitar sua reutiliza\u00e7\u00e3o em diferentes testes.</p> </li> <li> <p>Controle de vers\u00f5es  Versione os conjuntos de dados para rastrear altera\u00e7\u00f5es e manter a consist\u00eancia ao longo do tempo.</p> </li> <li> <p>Valida\u00e7\u00e3o antecipada  Antes de usar os dados, verifique se eles atendem aos requisitos e est\u00e3o consistentes com o cen\u00e1rio de teste.</p> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#page-object","title":"Page Object","text":"<p>Page Object \u00e9 um padr\u00e3o de design utilizado na automa\u00e7\u00e3o de testes que visa organizar e abstrair a intera\u00e7\u00e3o com elementos das interfaces de usu\u00e1rio (UI) de uma aplica\u00e7\u00e3o. Ele encapsula a l\u00f3gica de intera\u00e7\u00e3o com uma p\u00e1gina ou componente espec\u00edfico da interface, promovendo a reutiliza\u00e7\u00e3o de c\u00f3digo, facilitando a manuten\u00e7\u00e3o e melhorando a legibilidade dos testes. Para a implementa\u00e7\u00e3o do script de teste para o caso de uso de login, classes LoginPage e DashboardPage s\u00e3o onde ser\u00e3o mapeada todas as a\u00e7\u00f5es para a p\u00e1gina a qual ela representa, onde veremos usa implementa\u00e7\u00e3o abaixo:</p>"},{"location":"documentation/understand-good-pratices-for-testing/#estrutura-do-page-object","title":"Estrutura do Page Object","text":"<ol> <li> <p>Classe representativa da p\u00e1gina  Cada p\u00e1gina ou componente da interface \u00e9 representado por uma classe. Por exemplo, uma p\u00e1gina de login seria representada pela classe <code>LoginPage</code>.</p> </li> <li> <p>Elementos da interface  Os elementos interativos da p\u00e1gina, como bot\u00f5es, campos de texto e links, s\u00e3o representados como atributos dessa classe. Em frameworks como Selenium, esses elementos s\u00e3o frequentemente localizados por seletores (como XPath ou CSS selectors).</p> </li> <li> <p>M\u00e9todos para intera\u00e7\u00e3o  A l\u00f3gica para interagir com os elementos da p\u00e1gina \u00e9 encapsulada em m\u00e9todos. Por exemplo, preencher o campo de usu\u00e1rio ou clicar no bot\u00e3o de login seria implementado em m\u00e9todos da classe <code>LoginPage</code>.</p> </li> <li> <p>Abstra\u00e7\u00e3o de Comportamento Al\u00e9m de m\u00e9todos individuais para cada a\u00e7\u00e3o, \u00e9 comum criar m\u00e9todos que encapsulam comportamentos completos. Por exemplo, um m\u00e9todo loginAs que combina o preenchimento de campos e o clique no bot\u00e3o. Para o Probato este emcapsulamento de comportamente ocorre na classe <code>procedure</code>.</p> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#vantagens-do-page-object","title":"Vantagens do Page Object","text":"<ol> <li> <p>Reutiliza\u00e7\u00e3o de C\u00f3digo  A l\u00f3gica de intera\u00e7\u00e3o com a UI est\u00e1 centralizada no Page Object, permitindo reutilizar o mesmo c\u00f3digo em diferentes scripts de teste.</p> </li> <li> <p>Facilidade de Manuten\u00e7\u00e3o  Caso o layout ou a identifica\u00e7\u00e3o de elementos na p\u00e1gina mudem, \u00e9 necess\u00e1rio alterar apenas o Page Object correspondente, sem impactar diretamente os scripts de teste.</p> </li> <li> <p>Legibilidade  Os scripts de teste se tornam mais leg\u00edveis e focados na l\u00f3gica de neg\u00f3cio, pois utilizam m\u00e9todos abstratos em vez de comandos detalhados do Selenium.</p> </li> <li> <p>Separa\u00e7\u00e3o de Responsabilidades  O Page Object separa a l\u00f3gica de intera\u00e7\u00e3o com a UI da l\u00f3gica dos testes, promovendo um design mais modular.</p> </li> </ol>"},{"location":"documentation/understand-good-pratices-for-testing/#boas-praticas_4","title":"Boas Pr\u00e1ticas","text":"<ol> <li> <p>Evitar l\u00f3gica de neg\u00f3cio nos Page Objects  A l\u00f3gica de neg\u00f3cio deve ficar nos scripts de teste. O Page Object deve focar apenas na abstra\u00e7\u00e3o da UI.</p> </li> <li> <p>Nomea\u00e7\u00e3o clara  Os m\u00e9todos devem ter nomes intuitivos que representem a\u00e7\u00f5es de usu\u00e1rio.</p> </li> <li> <p>Organiza\u00e7\u00e3o Modular  Para aplica\u00e7\u00f5es complexas, organize os Page Objects em pacotes, agrupando-os por funcionalidade ou se\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> </li> <li> <p>Manter a Simplicidade  N\u00e3o inclua l\u00f3gica desnecess\u00e1ria no Page Object. Ele deve ser um espelho da interface e n\u00e3o lidar com valida\u00e7\u00f5es ou fluxos complexos.</p> </li> </ol> <p>O padr\u00e3o Page Object, quando bem implementado, torna os testes automatizados mais robustos, flex\u00edveis e f\u00e1ceis de manter, facilitando a escalabilidade do projeto de automa\u00e7\u00e3o.</p>"},{"location":"documentation/understand-good-pratices-for-testing/#consideracoes-finais","title":"Considera\u00e7\u00f5es finais","text":"<p>Nesta se\u00e7\u00e3o, abordamos de forma resumida e introdut\u00f3ria alguns dos principais aspectos que devem ser considerados ao criar su\u00edtes, scripts de teste e as demais estruturas que comp\u00f5em os testes automatizados. Esses pontos s\u00e3o fundamentais para garantir que os testes sejam bem estruturados, eficientes e alinhados com os objetivos da automa\u00e7\u00e3o. No decorrer do material, exploraremos cada um desses elementos com maior profundidade, oferecendo diretrizes pr\u00e1ticas e exemplos para facilitar a implementa\u00e7\u00e3o no contexto do Probato.</p>"},{"location":"good-practices/","title":"Understanding Best Practices for Testing","text":"<p>In this section, before implementing test scripts, we will align our understanding of what test scripts are, their composition, structure, and objectives. Understanding and applying best practices in testing improves efficiency, reliability, and reduces costs in software development.</p>"},{"location":"good-practices/#what-is-a-test-suite","title":"What is a Test Suite?","text":"<p>A test suite is an organized collection of test cases or scripts grouped to validate one or more aspects of a system, application, or functionality. These tests can be organized based on criteria such as functionality, priority, type of testing (functional, performance, security, etc.), or phases of the software lifecycle.</p>"},{"location":"good-practices/#objective-of-a-suite","title":"Objective of a Suite","text":"<p>The main objective of a test suite is to enable coordinated and structured execution of multiple tests, ensuring:</p> <ul> <li>Comprehensive coverage: Validation of different usage scenarios and system requirements.</li> <li>Reusability: Organization of related tests to facilitate maintenance and reuse.</li> <li>Automation: Continuous test execution in the continuous integration or delivery process (CI/CD).</li> <li>Quality analysis: Collect results and identify critical areas in the system.</li> </ul>"},{"location":"good-practices/#suite-composition","title":"Suite Composition","text":"<p>A test suite typically includes:</p> <ul> <li>Test cases or scripts: Specific scenarios that must be validated.</li> <li>General configurations: Shared parameters, such as URLs and credentials.</li> <li>Test data: Shared or specific data for each test.</li> <li>Dependencies: Relationships between tests, in case one depends on another.</li> <li>Success or failure criteria: Rules to determine the suite's outcome.</li> </ul>"},{"location":"good-practices/#types-of-suites","title":"Types of Suites","text":"Type Objective Example Functional Validate functional requirements Test login and registration Regression Ensure changes do not introduce errors Run tests after bug fixes Performance Evaluate performance under different conditions Test API response time Integration Validate communication between modules Test payment service integration Smoke Verify basic functionality Test homepage loading Exploratory Discover unexpected behaviors Test new flows without fixed scripts"},{"location":"good-practices/#structure-of-a-test-script","title":"Structure of a Test Script","text":"<p>Test scripts are composed of preconditions, procedures, and postconditions. This structure ensures organized tests and verifiable results.</p>"},{"location":"good-practices/#preconditions","title":"Preconditions","text":"<p>Conditions or states that need to be established before the test is executed.</p> <p>Examples: </p> <ul> <li>Configured environment (server running).</li> <li>Test data loaded.</li> <li>External APIs available.</li> </ul> <p>Best Practices:</p> <ul> <li>Automate the configuration of preconditions.</li> <li>Define dependencies and ensure reproducible states.</li> </ul> <p>Example in Probato:  Precondition for altering the database state using the SQL executor before the test.</p>"},{"location":"good-practices/#procedures","title":"Procedures","text":"<p>Steps that make up the test, simulating user actions or system interactions.</p> <p>Examples:</p> <ol> <li>Navigate to the login page.</li> <li>Fill in the 'Email' field with <code>user@probato.org</code>.</li> <li>Fill in the 'Password' field with <code>p@ssword</code>.</li> <li>Trigger the 'Login' action.</li> </ol> <p>Best Practices:</p> <ul> <li>Each step should be atomic and focus on a single action.</li> <li>Document actions clearly and accessibly.</li> <li>Include checkpoints to validate intermediate states.</li> </ul> <p>Example in Probato:  Procedures organized into well-defined steps, with detailed logs of each action.</p>"},{"location":"good-practices/#postconditions","title":"Postconditions","text":"<p>Expected results or final states after test execution.</p> <p>Examples:</p> <ul> <li>User authenticated.</li> <li>Redirected to the homepage.</li> <li>Data persisted in the database.</li> </ul> <p>Best Practices:</p> <ul> <li>Verify relevant conditions without redundancy.</li> <li>Automate validations for greater precision.</li> <li>Track errors with logs, videos, and screenshots.</li> <li>Validate whether the application state complies after executing the target procedure.</li> </ul> <p>Example in Probato:  After the test, capture logs and validate conditions of success or failure.</p>"},{"location":"good-practices/#use-case-logging-in","title":"Use Case: Logging In","text":"<p>The login use case allows users to access the application using registered email and password. It includes the following flows:</p> Flow Preconditions Procedure Postconditions Successful login Active user Fill in email and password, click login Main dashboard displayed User not found Unregistered user Fill in email and password, click login \"User not found\" message displayed Inactive user Inactive user Fill in email and password, click login \"Inactive user\" message displayed Incorrect password Incorrect password Fill in email and incorrect password, click login \"Incorrect password\" message displayed Required fields Empty email and password fields Click login Error messages displayed"},{"location":"good-practices/#test-data","title":"Test Data","text":"<p>Test data refers to the set of data used in tests to validate different aspects of the system.</p>"},{"location":"good-practices/#objective","title":"Objective:","text":"<ul> <li>Simulate real scenarios.</li> <li>Ensure test coverage with valid, invalid, and edge inputs.</li> <li>Identify failures caused by unexpected data.</li> </ul>"},{"location":"good-practices/#types","title":"Types:","text":"<ul> <li>Valid data: Inputs that meet requirements.</li> <li>Invalid data: Inputs that do not meet requirements.</li> <li>Edge data: Values at acceptable limits.</li> <li>Massive data: Large volumes to evaluate performance.</li> </ul> <p>Example Data: <pre><code>Valid data:\n- Email: user@example.com\n- Password: Password123!\n\nInvalid data:\n- Email: user@example\n- Password: 123\n\nEdge data:\n- Email: [256 characters]\n- Password: [0 characters]\n</code></pre></p>"},{"location":"good-practices/#page-object","title":"Page Object","text":"<p>Page Object is a design pattern that organizes and abstracts interactions with the user interface (UI). It encapsulates interaction logic, promoting reusability, maintenance, and readability.</p>"},{"location":"good-practices/#structure","title":"Structure:","text":"<ul> <li>Page class: Represents the page or UI component.</li> <li>UI elements: Buttons, fields, and links as attributes.</li> <li>Interaction methods: Encapsulated logic to interact with the elements.</li> </ul> <p>Example: LoginPage<pre><code>public class LoginPage {\n\n    @FindBy(xpath = \"//*[@id=\\\"email\\\"]\")\n    private WebElement emailInput;\n\n    @FindBy(xpath = \"//*[@id=\\\"password\\\"]\")\n    private WebElement passwordInput;\n\n    @FindBy(xpath = \"//*[@id=\\\"login-btn\\\"]\")\n    private WebElement accessButton;\n\n    public void fillEmail(String email) {\n        emailInput.sendKeys(email);\n    }\n\n    public void fillPassword(String password) {\n        passwordInput.sendKeys(password);\n    }\n\n    public void pressAccessButton() {\n        accessButton.click();\n    }\n}\n</code></pre></p> <p>Best Practices:</p> <ul> <li>Avoid business logic in Page Objects.</li> <li>Name methods intuitively.</li> <li>Keep the code modular and simple.</li> </ul>"},{"location":"good-practices/#final-considerations","title":"Final Considerations","text":"<p>In this section, we discussed the main elements that ensure well-structured tests aligned with automation objectives. Applying best practices and using tools like Probato facilitates the implementation of robust, scalable, and maintainable tests. In the next chapters, we will explore each concept in greater depth with practical examples.</p>"},{"location":"good-practices/#general-references","title":"General References:","text":"<ul> <li>ISTQB: Software Testing Fundamentals</li> <li>Selenium: Official Selenium Guide</li> <li>Selenium: Page Object Design Pattern</li> <li>OWASP: Best Practices for Data Security</li> <li>CI/CD: Continuous Integration Practical Guide</li> </ul>"},{"location":"quick-guide/","title":"User Guide","text":"<p>Welcome to the quick guide for Probato! This document was created to help you set up, use, and customize this test automation framework. Here, you will find practical examples and clear instructions to start your journey with Probato.</p>"},{"location":"quick-guide/#how-to-use-this-guide","title":"How to Use This Guide","text":"<p>This guide is divided into four chapters, each covering an essential aspect of using Probato:</p> <ul> <li> <p> Environment Setup</p> <p>Learn how to install and configure the tools needed to start using Probato, including JDK, Maven, and IDEs.</p> <p> Go</p> </li> <li> <p> Project Creation and Configuration</p> <p>Discover how to create and set up a base project, structure directories, add dependencies, and configure the <code>configuration.yml</code>.</p> <p> Go</p> </li> <li> <p> Basic Test Implementation</p> <p>Understand how to create suites, scripts, and procedures to automate simple use cases in Probato.</p> <p> Go</p> </li> <li> <p> Execution and Result Analysis</p> <p>Learn how to execute the project, interpret logs, and validate results to ensure the quality of your software.</p> <p> Go</p> </li> </ul>"},{"location":"quick-guide/#testing-workflow-in-probato","title":"Testing Workflow in Probato","text":"<p>Below is the typical workflow for running tests with Probato:</p> <p>Testing Workflow</p> <pre><code>graph LR\n  A[Implement Tests] --&gt; B[Execute Suites];\n  B --&gt; C{Integrated?};\n  C --&gt; |Yes| D[Probato Manager];\n  C --&gt; |No| B;\n  D --&gt; E[Analyze Results];</code></pre> <p>Workflow Description:</p> <ol> <li>Implement Tests: Develop suites, scripts, and procedures to cover test cases.</li> <li>Execute Suites: Run automated tests and collect results.</li> <li>Analyze Results: Review logs, reports, and generated evidence to identify issues or validate expected behavior.</li> </ol>"},{"location":"quick-guide/#ready-to-start","title":"Ready to Start?","text":"<p>Head to the first chapter: Environment Setup.</p>"},{"location":"quick-guide/configure-environment/","title":"Environment Setup","text":"<p>Setting up the development environment correctly is the first step to unlocking the full potential of Probato, a powerful framework for test automation. This guide details the steps required to configure essential tools like JDK, Maven, and an IDE, ensuring an environment ready for creating and running automated tests.</p>"},{"location":"quick-guide/configure-environment/#install-jdk","title":"Install JDK","text":"<p>The Java Development Kit (JDK) is required to compile and run Java code used by Probato. Make sure to install version 11 or higher.</p>"},{"location":"quick-guide/configure-environment/#download-jdk","title":"Download JDK","text":"<ol> <li>Access one of the following links to download the JDK:      <ul> <li>Oracle JDK</li> <li>OpenJDK</li> <li>Adoptium</li> <li>Amazon Corretto</li> </ul> </li> </ol> <p>Warning</p> <p>Download and install version 11 or higher.</p>"},{"location":"quick-guide/configure-environment/#configure-environment-variables","title":"Configure Environment Variables","text":"<ol> <li> <p>On Windows:</p> <ul> <li>Open \"Edit system environment variables.\"</li> <li>Under System Variables, click New:<ul> <li>Name: <code>JAVA_HOME</code></li> <li>Value: <code>C:\\dev\\java\\jdk-11</code></li> </ul> </li> <li>Edit the <code>Path</code> variable and add: <code>%JAVA_HOME%\\bin</code></li> </ul> </li> <li> <p>On Mac/Linux:</p> <ul> <li>Add the following lines to the <code>~/.bash_profile</code> or <code>~/.zshrc</code> file:   <pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n</code></pre></li> </ul> </li> <li> <p>Validate the installation:    <pre><code>java --version\n</code></pre>    Expected output:    <pre><code>java version \"11.0.X\"\nJava(TM) SE Runtime Environment (build 11.0.X)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0.X)\n</code></pre>    \ud83c\udf89 JDK installed successfully!</p> </li> </ol>"},{"location":"quick-guide/configure-environment/#install-maven","title":"Install Maven","text":"<p>Maven is used to manage project dependencies and automate build processes.</p>"},{"location":"quick-guide/configure-environment/#download-and-install","title":"Download and Install","text":"<ol> <li>Visit the official Apache Maven website.</li> <li>Download the ZIP file and extract it to <code>C:\\dev\\maven</code> (Windows) or <code>/usr/local/maven</code> (Mac/Linux).</li> </ol>"},{"location":"quick-guide/configure-environment/#configure-environment-variables_1","title":"Configure Environment Variables","text":"<ol> <li> <p>On Windows:</p> <ul> <li>Add a new variable:<ul> <li>Name: <code>MAVEN_HOME</code></li> <li>Value: <code>C:\\dev\\maven</code></li> </ul> </li> <li>Include <code>%MAVEN_HOME%\\bin</code> in the <code>Path</code> variable.</li> </ul> </li> <li> <p>On Mac/Linux:</p> <ul> <li>Add the following lines to the <code>~/.bash_profile</code> or <code>~/.zshrc</code> file:   <pre><code>export MAVEN_HOME=/usr/local/maven\nexport PATH=$MAVEN_HOME/bin:$PATH\n</code></pre></li> </ul> </li> <li> <p>Validate the installation:    <pre><code>mvn -version\n</code></pre>    Expected output:    <pre><code>Apache Maven 3.X.X\nMaven home: /usr/local/maven\nJava version: 11.0.X, vendor: Oracle Corporation\nOS name: \"mac os x\", version: \"10.15.7\", arch: \"x86_64\"\n</code></pre>    \ud83c\udf89 Maven installed successfully!</p> </li> </ol>"},{"location":"quick-guide/configure-environment/#choose-an-ide","title":"Choose an IDE","text":"<p>An Integrated Development Environment (IDE) simplifies writing, running, and debugging Java code. Here are some popular options:</p> IDE Main Advantage Recommended For  Eclipse Lightweight and free Beginners  IntelliJ Advanced features and rich plugins Advanced developers  VS Code Modern and extensible Simple Java projects <p>Note</p> <p>Choose the IDE that best suits your needs. Ensure you install the necessary plugins for Java support.</p>"},{"location":"quick-guide/configure-environment/#final-checklist","title":"Final Checklist","text":"<p>Before proceeding to project creation, verify that:</p> <ul> <li>\u2705 JDK is installed and configured (<code>java --version</code> works).</li> <li>\u2705 Maven is installed and configured (<code>mvn -version</code> works).</li> <li>\u2705 IDE is installed and ready to use.</li> </ul> <p>\ud83c\udf89 Your environment is set up! You're now ready to create projects with Probato.</p>"},{"location":"quick-guide/configure-environment/#ready-to-continue","title":"Ready to continue?","text":"<p>Head to the next chapter: Project Creation and Configuration.</p>"},{"location":"quick-guide/configure-project/","title":"Project Creation and Configuration","text":"<p>This section details how to create and configure a Maven project to use Probato, ensuring an efficient base structure for test automation. The goal is to prepare an environment with organized dependencies and essential configurations to effectively run automated tests.</p>"},{"location":"quick-guide/configure-project/#creating-a-maven-project","title":"Creating a Maven Project","text":""},{"location":"quick-guide/configure-project/#using-the-terminal-or-command-prompt","title":"Using the terminal or command prompt","text":"<ol> <li>Open the terminal or command prompt.</li> <li>Navigate to the directory where you want to create the project.</li> <li> <p>Execute the following command:     <pre><code>mvn archetype:generate -DgroupId=com.example.automation -DartifactId=my-project-automation -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre></p> <p>Parameters:</p> <ul> <li>groupId: Group identifier for your organization, usually related to the domain (e.g., <code>com.example.automation</code>).</li> <li>artifactId: Name of the test automation project (e.g., <code>my-project-automation</code>).</li> </ul> <p>Note</p> <p>If you prefer, the project can also be created directly through your IDE.</p> </li> <li> <p>After execution, the following structure will be created:     <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/example/automation/App.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/automation/AppTest.java\n\u2514\u2500\u2500 pom.xml\n</code></pre></p> </li> </ol>"},{"location":"quick-guide/configure-project/#about-maven-archetype","title":"About Maven Archetype","text":"<p>The <code>mvn archetype:generate</code> command uses Maven Archetype to generate a project with a standard initial structure. It is useful for quickly creating projects, including directories and basic files.</p>"},{"location":"quick-guide/configure-project/#configuring-the-folder-and-package-structure","title":"Configuring the Folder and Package Structure","text":"<ol> <li>Open the directory <code>src/main/java/</code>.</li> <li>Remove the <code>com.*</code> package generated automatically.</li> <li>In the package <code>com.example.automation</code> in <code>src/test/java/</code>, remove the <code>AppTest.java</code> file.</li> <li>Create the directory <code>src/test/resources/</code> and add a file named <code>configuration.yml</code>.</li> </ol> <p>The project structure will look like this:</p> <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       \u2502   \u2514\u2500\u2500 com/example/automation/\n\u2502       \u2502       \u251c\u2500\u2500 model/\n\u2502       \u2502       \u251c\u2500\u2500 page/\n\u2502       \u2502       \u2514\u2500\u2500 usecase/\n\u2502       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n\u2502           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre> <p>Folder Descriptions:</p> <ul> <li><code>src/test/java/</code>: Location where test automation implementation will reside.</li> <li> <p><code>src/test/resources/</code>: Folder to store configurations, datasets, SQL scripts, and other files required for testing.</p> <p>Note</p> <p>The <code>configuration.yml</code> file will be configured in detail in future sections.</p> </li> </ul>"},{"location":"quick-guide/configure-project/#adding-dependencies-to-maven","title":"Adding Dependencies to Maven","text":"<ol> <li>Open the <code>pom.xml</code> file located in the project root directory.</li> <li>Add the following dependencies:     pom.xml<pre><code>&lt;project\n    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project-automation&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/probato.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Probato Dependencies --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-browser&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-dataset-csv&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-database-sql&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-record&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-manager&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Application target database dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.7.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- JUnit 5 Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.0.0-M7&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;includes&gt;\n                        &lt;include&gt;**/*.java&lt;/include&gt;\n                    &lt;/includes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre></li> </ol>"},{"location":"quick-guide/configure-project/#dependency-descriptions","title":"Dependency Descriptions","text":"<ul> <li><code>probato-api</code>, <code>probato-browser</code>, <code>probato-dataset-csv</code>, <code>probato-database-sql</code>, <code>probato-record</code>, <code>probato-manager</code>: Provides access to Probato functionalities.</li> <li><code>postgresql</code>: Required for database connections; ensure the database dependency matches the target application.</li> <li> <p><code>junit-jupiter</code>: Required to run tests using JUnit 5.</p> <p>Note</p> <p>Additional dependencies will be included as we progress through the tutorial.</p> </li> </ul>"},{"location":"quick-guide/configure-project/#adding-and-configuring-probato","title":"Adding and Configuring Probato","text":"<ol> <li> <p>In the <code>configuration.yml</code> file, add the following configurations:     configuration.yml<pre><code>execution:\n\n   target:\n      url: http://localhost:8099\n      version: 0.0.0\n\n   delay:\n      waitingTimeout: 5000\n      actionInterval: 500\n\n    video:\n        enabled: true\n        frameRate: 1000\n        quality: MEDIUM\n\n    manager:\n        submit: true\n        url: http://localhost:8080\n        token: [TOKEN]\n\nbrowsers:\n\n-  type: CHROME\n   headless: false\n   dimension:\n      mode: FULLSCREEN\n\n-  type: FIREFOX\n   headless: false\n   dimension:\n      mode: MAXIMIZED\n\n-  type: EDGE\n   headless: false\n   dimension:\n      mode: CUSTOM\n      width: 1256\n      height: 1018\n\ndatasources:\n\n   probato:\n      url: jdbc:postgresql://localhost:5444/testano\n      driver: org.postgresql.Driver\n      username: root\n      password: root\n</code></pre></p> <p>Properties:</p> <ul> <li>execution.delay.waitingTimeout: Maximum wait time for action execution.</li> <li>execution.delay.actionInterval: Time interval between actions to be executed.</li> <li>browsers.[*].type: Specifies which browser will be executed.</li> <li>browsers.[*].headless: Default is <code>false</code>. If <code>true</code>, the browser window will remain invisible during execution.</li> <li>browsers.[*].dimension.mode: Default is <code>MAXIMIZED</code>. Possible values are <code>FULLSCREEN</code>, <code>MAXIMIZED</code>, and <code>CUSTOM</code>. If <code>CUSTOM</code>, the <code>width</code> and <code>height</code> properties are mandatory.</li> <li>browsers.[*].dimension.width: Specifies the browser's width dimension during execution.</li> <li>browsers.[*].dimension.height: Specifies the browser's height dimension during execution.</li> <li>datasources.[name]: Specifies the name of the resource to be accessed.</li> <li>datasources.[name].url: Specifies the URL of the resource to be accessed.</li> <li>datasources.[name].driver: Specifies the connection driver for the resource to be accessed.</li> <li>datasources.[name].schema: Specifies the schema for the resource to be accessed.</li> </ul> </li> </ol>"},{"location":"quick-guide/configure-project/#final-checklist","title":"Final Checklist","text":"<p>Before proceeding to the next section, confirm the following:</p> <ul> <li>\u2705 Maven project created (<code>my-project-automation</code>).</li> <li>\u2705 Folder structure adjusted as per the example.</li> <li>\u2705 <code>configuration.yml</code> file created in <code>src/test/resources/</code>.</li> <li>\u2705 Dependencies added to the <code>pom.xml</code> file.</li> <li>\u2705 Configurations added to the <code>configuration.yml</code> file.</li> </ul> <p>\ud83c\udf89 Your project is ready to start test automation with Probato!</p>"},{"location":"quick-guide/configure-project/#ready-to-continue","title":"Ready to continue?","text":"<p>Proceed to the next chapter: Basic Test Implementation.</p>"},{"location":"quick-guide/execution-result-analysis/","title":"Execution and Result Analysis","text":""},{"location":"quick-guide/execution-result-analysis/#running-automated-tests","title":"Running Automated Tests","text":"<p>After implementing the test script using Probato, the next step is to execute automated tests to validate the application\u2019s functionalities. The execution can be efficiently performed by following the steps below:</p> <ol> <li> <p>Execution via IDE:</p> <ul> <li>Use the IDE to start test execution with JUnit.</li> <li>If necessary, adjust the configuration files (<code>configuration.yml</code>) to customize the execution, such as wait times, browser used, or target environment (development, staging, production).</li> </ul> <p></p> </li> <li> <p>Execution via Terminal:</p> <ul> <li>Use commands like <code>mvn test</code> (Maven) or <code>gradle test</code> (Gradle) to start the test execution.</li> <li>Monitor the logs generated during execution to identify errors or unexpected behaviors.</li> </ul> <p></p> </li> <li> <p>Execution in CI/CD Pipelines:</p> <ul> <li>Integrate tests into continuous integration pipelines, such as Jenkins, GitHub Actions, or GitLab CI, to ensure automated validation with every code change.</li> <li>Configure notifications to alert the team about test failures.</li> </ul> <p>Note</p> <p>The execution process is similar to that used in the terminal.</p> <p>Warning</p> <p>The execution environment must have all necessary resources installed.</p> </li> </ol>"},{"location":"quick-guide/execution-result-analysis/#result-collection","title":"Result Collection","text":"<p>During test execution, Probato collects relevant data for analysis, such as:</p> <ul> <li>Executed steps:         Each action performed by the script is logged, providing a detailed history of the execution.</li> <li>Screenshots and videos:       In case of failure, screenshots and videos of the execution moment are automatically generated to facilitate analysis.</li> <li>Validation results:         Information about which tests passed or failed, with details on the errors encountered.</li> <li>Execution time:         Reports indicate the total time for each test, helping to identify performance bottlenecks.</li> <li> <p>SQL Logs:      All SQL commands executed during the test are logged, enabling auditing of database changes.</p> <p>Note</p> <p>This data is temporarily stored on disk during test execution. Once each script is completed, the data will be submitted to the Probato Manager.</p> </li> </ul>"},{"location":"quick-guide/execution-result-analysis/#result-analysis","title":"Result Analysis","text":"<p>After execution, a detailed analysis is essential to identify failures and improve system quality. Probato provides a dedicated application for this purpose: Probato Manager. Through this tool, the data collected during test execution is stored, observed, and analyzed. Quality metrics derived from the collected data are also available in this tool.</p> <ol> <li> <p>Quality Metrics:</p> <ul> <li>The Probato Manager graphically provides quality metrics of the target applications over their evolution. These same metrics can also be viewed for a specific application.</li> <li>The Probato Manager offers various metrics, such as the number of analyzed projects, collaborators, suites, scripts, executions, average product complexity, and quality history over time.</li> </ul> <p></p> </li> <li> <p>Detailed Reports:</p> <ul> <li>Use the reports generated by Probato Manager to view the status of each test, errors found, and collected evidence.</li> <li>Check the correlation between reported errors and application logs to identify the root cause.</li> </ul> <p></p> </li> <li> <p>Requirement Validation:</p> <ul> <li>Ensure that all scenarios defined in the requirements were validated.</li> <li>Update test cases as new requirements or application changes arise.</li> </ul> <p></p> </li> <li> <p>Tracking Failures:</p> <ul> <li>For each identified failure, create tickets in project management tools such as Jira, Trello, or GitLab.</li> <li>Prioritize fixing the most critical failures to ensure errors are resolved before proceeding with new implementations.</li> </ul> <p></p> </li> </ol>"},{"location":"quick-guide/execution-result-analysis/#final-checklist","title":"Final Checklist","text":"<p>Before concluding the result analysis in Probato Manager, ensure that:</p> <ul> <li>\u2705 All relevant logs were analyzed and correlated with the reported errors.</li> <li>\u2705 All failed test cases were documented in project management tools.</li> <li>\u2705 Reports were generated and sent to stakeholders.</li> <li>\u2705 The execution environment was reviewed to ensure consistency in future executions.</li> </ul> <p>\ud83c\udf89 Ready to further enhance your system\u2019s quality!</p>"},{"location":"quick-guide/implement-script/","title":"Basic Script Implementation","text":"<p>In this section, a basic test script will be implemented. Probato adopts a modular structure that includes scripts, procedures, page objects, and test suites. To illustrate the automation of a real feature, we will proceed with the automation of the Probato Manager application. Probato Manager has the login page as its main screen, so we will start from this functionality to develop automated tests: Perform Login</p>"},{"location":"quick-guide/implement-script/#basic-application-structure","title":"Basic Application Structure","text":"<p>We will assume that the project has the following structure:</p> Estrutura<pre><code>probato-manager-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500  test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       |   \u2514\u2500\u2500 org.probato.manager.automation\n\u2502       |       \u251c\u2500\u2500 model\n\u2502       |       \u251c\u2500\u2500 page\n\u2502       |       \u2514\u2500\u2500 usecase\n|       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n|           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre>"},{"location":"quick-guide/implement-script/#implementing-the-suite-class","title":"Implementing the Suite Class","text":"<ol> <li>No pacote <code>org.probato.manager.usecase</code> vamos criar o novo pacote <code>UC01</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar a classe <code>UC01_PerformLogin.java</code>.</li> <li>Na classe <code>UC01_PerformLogin.java</code> vamos implementar o c\u00f3digo abaixo. UC01_PerformLogin.java<pre><code>package org.probato.manager.automation.usecase.UC01;\n\nimport org.probato.manager.automation.usecase.UC01.script.UC01TC01_PerformLoginSuccessfully;\n\nimport org.probato.api.SQL;\nimport org.probato.api.Suite;\nimport org.probato.api.TestCase;\nimport org.probato.api.TestSuite;\n\n@SQL(\n    datasource = \"probato\", \n    scriptPath = { \"sql/init/init.sql\" })\n@Suite(\n    code = \"UC01\", \n  name = \"Perform login\", \n    description = \"This feature aims to allow the user to login to this application\")\nclass UC01_PerformLogin implements TestSuite {\n\n    @TestCase\n    private UC01TC01_PerformLoginSuccessfully uc01tc01;\n\n  // Add additional test cases to suite\n\n}\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#implementing-the-script-class","title":"Implementing the Script Class","text":"<ol> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar o novo pacote <code>script</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01.script</code> vamos criar a classe <code>UC01TC01_PerformLoginSuccessfully.java</code>.</li> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos implementar o c\u00f3digo abaixo. UC01TC01_PerformLoginSuccessfully.java<pre><code>package org.probato.manager.automation.usecase.UC01.script;\n\nimport org.probato.manager.automation.model.LoginModel;\nimport org.probato.manager.automation.page.DashboardPage;\nimport org.probato.manager.automation.page.LoginPage;\n\nimport org.probato.api.Dataset;\nimport org.probato.api.Page;\nimport org.probato.api.Procedure;\nimport org.probato.api.SQL;\nimport org.probato.api.Script;\n\n@Dataset(\"dataset/UC01/UC01TC01.csv\")\n@SQL(\n    datasource = \"probato\", \n    scriptPath = { \"sql/user/insert-user.sql\" })\n@Script(\n    code = \"UC01TC01\", \n    name = \"Perform login successfully\", \n    description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n    @Page\n    private LoginPage loginPage;\n\n    @Page\n    private DashboardPage dashboardPage;\n\n    @Procedure\n    private void procedure(LoginModel model) {\n        loginPage.selectEnglishTranslate();\n        loginPage.checkPage();\n        loginPage.fillEmail(model.getEmail());\n        loginPage.fillPassword(model.getPassword());\n        loginPage.pressAccessButton();\n        dashboardPage.checkPage();\n    }\n\n}\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#implementing-the-page-object","title":"Implementing the Page Object","text":"<ol> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>LoginPage.java</code>. LoginPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class LoginPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"public-container\\\"]/app-login/form/div/div[1]/h1\")\n  private WebElement titlePage;\n\n  @FindBy(xpath = \"//*[@id=\\\"email\\\"]\")\n  private WebElement emailInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"password\\\"]\")\n  private WebElement passwordInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"login-btn\\\"]\")\n  private WebElement accessButton;\n\n  @Action(\"Check `Login` page\")\n  public void checkPage() {\n    assertEquals(\"Login\", titlePage.getText());\n    assertTrue(emailInput.isDisplayed());\n    assertTrue(passwordInput.isDisplayed());\n    assertTrue(accessButton.isDisplayed());\n  }\n\n  @Action(\"Fill in the 'Email' field with '{{email}}' value\")\n  public void fillEmail(@Param(\"email\") String email) {\n    emailInput.sendKeys(email);\n  }\n\n  @Action(\"Fill in the 'Password' field with {{password}} value\")\n  public void fillPassword(@Param(\"password\") String password) {\n    passwordInput.sendKeys(password);\n  }\n\n  @Action(\"Press the 'Access' button\")\n  public void pressAccessButton() {\n    accessButton.click();\n  }\n\n}\n</code></pre></li> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>DashboardPage.java</code>. DashboardPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class DashboardPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"private-container\\\"]/app-view-dashboard/div/div[1]/div/h1\")\n  private WebElement titlePage;\n\n  @Action(\"Check `Dashboard` page\")\n  public void checkPage() {\n    assertEquals(\"Dashboard\", titlePage.getText());\n  }\n\n}\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#creating-dataset-file","title":"Creating Dataset File","text":"<ol> <li>Na pasta <code>src/test/resources/dataset</code> vamos criar a nova pasta <code>UC01</code>.</li> <li>Na pasta <code>src/test/resources/dataset/UC01</code> vamos criar o arquivo chamado <code>UC01TC01.csv</code>.</li> <li>No arquivo <code>UC01TC01.csv</code> vamos adicionar o conte\u00fado abaixo. UC01TC01.csv<pre><code>EMAIL, PASSWORD\nuser01@probato.org, p@ssword\nuser02@probato.org, p@ssword123\nuser02@probato.org, p@ssword321\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#implementing-input-mapping-class","title":"Implementing Input Mapping Class","text":"<ol> <li>No pacote <code>org.probato.manager.automation.model</code> vamos criar a classe <code>LoginPage.java</code>. LoginModel.java<pre><code>package org.probato.manager.automation.model;\n\nimport org.probato.model.Datamodel;\n\npublic class LoginModel extends Datamodel {\n\n    private String email;\n    private String password;\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n}\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#creating-sql-files","title":"Creating SQL Files","text":"<ol> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>init</code>.</li> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>user</code>.</li> <li>Na pasta <code>src/test/resources/sql/init</code> vamos criar o arquivo chamado <code>init.sql</code>.</li> <li>Na pasta <code>src/test/resources/sql/user</code> vamos criar o arquivo chamado <code>insert-user.sql</code>.</li> <li>No arquivo <code>init.sql</code> vamos adicionar o conte\u00fado abaixo. init.sql<pre><code>DELETE FROM testano_app.users;\n</code></pre></li> <li>No arquivo <code>insert-user.sql</code> vamos adicionar o conte\u00fado abaixo. insert-user.sql<pre><code>INSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('a02b03e6-c462-4980-9997-c1203a094c9d'::uuid, 'User 01', 'user01@probato.org', '$2a$10$Kml4nk3ADhnWrJg0GkStVeTJoslDBir/Fgyw2gkLR0FukujfIxZQ2', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('bd84a2c8-d315-40ea-80aa-1841254b20c9'::uuid, 'User 02', 'user02@probato.org', '$2a$10$oHZ7er1/2/xKjgOq0znXnOPcvoOXpX.in6XO/4mf2xf5ZV7OMyvq6', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('b86a08ac-2ee8-42c7-a46f-c589b1d26503'::uuid, 'User 03', 'user03@probato.org', '$2a$10$81pSkjzZTqgn3/nU5DzxVemmr0rjJ7NHtK/UiGhzomEwTyHZgFliC', 'MALE',  true);\n</code></pre></li> </ol>"},{"location":"quick-guide/implement-script/#final-considerations","title":"Final Considerations","text":"<p>We successfully implemented a basic script using Probato. Ao longo desta se\u00e7\u00e3o, foi poss\u00edvel demonstrar como o framework proporciona uma estrutura organizada e modular para a automa\u00e7\u00e3o de testes, abrangendo desde a cria\u00e7\u00e3o de Suites, Scripts, e Page Objects at\u00e9 a utiliza\u00e7\u00e3o de massas de dados e pr\u00e9-condi\u00e7\u00f5es com scripts SQL.</p> <p>Este exemplo abordou a automa\u00e7\u00e3o de um cen\u00e1rio fundamental: o login de um usu\u00e1rio na aplica\u00e7\u00e3o Probato Manager. A aplica\u00e7\u00e3o de pr\u00e1ticas como a utiliza\u00e7\u00e3o do padr\u00e3o Page Object, que facilita a manuten\u00e7\u00e3o e promove a reutiliza\u00e7\u00e3o de c\u00f3digo, destacou-se como uma abordagem essencial para a constru\u00e7\u00e3o de testes robustos e escal\u00e1veis.</p>"},{"location":"quick-guide/implement-script/#lessons-and-benefits-observed","title":"Lessons and Benefits Observed","text":"<ul> <li>Modularidade e organiza\u00e7\u00e3o: A separa\u00e7\u00e3o em pacotes e a utiliza\u00e7\u00e3o de annotations simplificam a organiza\u00e7\u00e3o do projeto e aumentam a clareza do fluxo de execu\u00e7\u00e3o dos testes.</li> <li>Facilidade na configura\u00e7\u00e3o inicial: Com a estrutura bem definida, a cria\u00e7\u00e3o de novos testes e o gerenciamento de massas de dados tornam-se intuitivos.</li> <li>Integra\u00e7\u00e3o com dados e banco de dados: O uso de datasets e scripts SQL facilita a prepara\u00e7\u00e3o do estado inicial da aplica\u00e7\u00e3o, garantindo a consist\u00eancia dos testes.</li> <li>Padroniza\u00e7\u00e3o: A ado\u00e7\u00e3o de conven\u00e7\u00f5es no design de Suites, Scripts, e Pages promove a padroniza\u00e7\u00e3o e reduz a curva de aprendizado para novos integrantes na equipe.</li> </ul>"},{"location":"quick-guide/implement-script/#final-checklist","title":"Final Checklist","text":"<p>Before finalizing the implementation of a basic script in Probato, make sure the following points are correctly configured and functional:</p> <ul> <li>\u2705 Suite and Script classes implemented with the appropriate annotations.</li> <li>\u2705 Page Object classes created, with elements mapped and methods working as expected.</li> <li>\u2705 Dataset files created, containing the necessary data for the tests.</li> <li>\u2705 SQL pre-condition scripts correctly configured, ensuring the application's initial state.</li> </ul> <p>\ud83c\udf89 Your project is ready to continue test automation with Probato!</p>"},{"location":"quick-guide/implement-script/#ready-to-continue","title":"Ready to Continue?","text":"<p>Proceed to the next chapter: Execution and Result Analysis.</p>"},{"location":"pt-BR/","title":"Vis\u00e3o Geral","text":""},{"location":"pt-BR/#o-que-e-probato","title":"O que \u00e9 Probato?","text":"<p>O nome Probato vem do latim Probatus, que significa \"relativo \u00e0 prova\", \"comprovativo\", \"experimental\" ou \"que demonstra qualidades necess\u00e1rias para o desempenho de uma fun\u00e7\u00e3o\". O termo reflete a ess\u00eancia do framework: prover ferramentas para garantir qualidade em projetos de software.</p> <p>No contexto de qualidade de software, Probato tem como objetivo central:</p> <p>Oferecer suporte \u00e0s equipes de desenvolvimento na garantia de qualidade de projetos por meio de testes automatizados, assegurando efici\u00eancia, seguran\u00e7a e agilidade com boas pr\u00e1ticas e ferramentas modernas.</p> <p>O Probato \u00e9 um framework Open Source, projetado para crescer com a comunidade. Desenvolvedores, testadores e entusiastas s\u00e3o convidados a colaborar com ideias, melhorias e funcionalidades. Este esp\u00edrito colaborativo busca criar uma solu\u00e7\u00e3o robusta e acess\u00edvel que atenda \u00e0s reais demandas do mercado e promova boas pr\u00e1ticas em automa\u00e7\u00e3o de testes.</p> <p>Sua contribui\u00e7\u00e3o \u00e9 sempre bem-vinda: feedback, sugest\u00f5es, desenvolvimento ou compartilhamento de ideias s\u00e3o elementos que fortalecem este projeto.</p>"},{"location":"pt-BR/#teste-automatizado","title":"Teste Automatizado","text":""},{"location":"pt-BR/#o-que-e-teste-automatizado","title":"O que \u00e9 Teste Automatizado?","text":"<p>Teste automatizado \u00e9 o processo de usar scripts ou ferramentas para verificar automaticamente se partes de um sistema funcionam conforme o esperado. Ele reduz a interven\u00e7\u00e3o manual, aumentando a efici\u00eancia e a consist\u00eancia no desenvolvimento de software.</p>"},{"location":"pt-BR/#vantagens-do-teste-automatizado","title":"Vantagens do Teste Automatizado","text":"<ol> <li>Velocidade: Executa testes rapidamente, mesmo em grandes conjuntos.</li> <li>Reusabilidade: Os scripts podem ser reutilizados em v\u00e1rios ciclos de desenvolvimento.</li> <li>Consist\u00eancia: Reduz erros humanos, executando passos sempre da mesma forma.</li> <li>Cobertura maior: Permite testar cen\u00e1rios complexos e amplos.</li> <li>Valida\u00e7\u00e3o cont\u00ednua: Facilita testes de regress\u00e3o ap\u00f3s mudan\u00e7as no c\u00f3digo.</li> <li>Economia a longo prazo: Apesar do custo inicial, reduz custos ao longo do projeto.</li> <li>Melhoria da qualidade: Identifica defeitos mais cedo, garantindo produtos mais confi\u00e1veis.</li> <li>Feedback r\u00e1pido: Oferece retorno imediato sobre a estabilidade do sistema.</li> <li>Execu\u00e7\u00e3o flex\u00edvel: Funciona em diferentes navegadores, sistemas e dispositivos.</li> <li>Integra\u00e7\u00e3o com CI/CD: Automatiza testes dentro de pipelines de desenvolvimento cont\u00ednuo.</li> </ol>"},{"location":"pt-BR/#desvantagens-do-teste-automatizado","title":"Desvantagens do Teste Automatizado","text":"<ol> <li>Custo inicial: Configurar e criar testes exige investimento significativo.</li> <li>Manuten\u00e7\u00e3o: Scripts precisam ser atualizados conforme o software evolui.</li> <li>Curva de aprendizado: Exige conhecimentos t\u00e9cnicos para desenvolvimento e manuten\u00e7\u00e3o.</li> <li>Rigidez: Pequenas mudan\u00e7as podem exigir ajustes nos scripts.</li> <li>Interfaces din\u00e2micas: Sistemas com interfaces frequentemente alteradas s\u00e3o desafiadores.</li> <li>Depend\u00eancia de ferramentas: A automa\u00e7\u00e3o pode ser limitada pelas ferramentas dispon\u00edveis.</li> <li>Resultados inconsistentes: Problemas externos podem causar falsos positivos ou negativos.</li> <li>Escopo restrito: Nem todos os testes, como os de usabilidade, podem ser automatizados.</li> <li>ROI demorado: Projetos curtos podem n\u00e3o justificar o investimento.</li> <li>Complexidade em cen\u00e1rios espec\u00edficos: Alguns contextos exigem solu\u00e7\u00f5es personalizadas.</li> </ol>"},{"location":"pt-BR/#probato-como-framework-de-teste-automatizado","title":"Probato como Framework de Teste Automatizado","text":""},{"location":"pt-BR/#como-o-probato-contribui-para-a-automacao-de-testes","title":"Como o Probato contribui para a automa\u00e7\u00e3o de testes?","text":"<p>O Probato foi desenvolvido para enfrentar os desafios da automa\u00e7\u00e3o, oferecendo uma estrutura simplificada e eficiente. Ele abstrai a complexidade t\u00e9cnica e promove boas pr\u00e1ticas, ajudando equipes a criar e manter testes automatizados de forma mais \u00e1gil.</p> <p>Sua filosofia Open Source permite que a comunidade contribua ativamente para sua evolu\u00e7\u00e3o, garantindo adaptabilidade \u00e0s demandas do mercado.</p>"},{"location":"pt-BR/#diferenciais-do-probato","title":"Diferenciais do Probato","text":"<ul> <li>Facilidade de uso: Abstra\u00e7\u00f5es e integra\u00e7\u00f5es modernas simplificam a cria\u00e7\u00e3o e manuten\u00e7\u00e3o de testes.</li> <li>Gest\u00e3o e an\u00e1lise: Recursos para rastreamento e an\u00e1lise detalhada de execu\u00e7\u00f5es.</li> <li>Automa\u00e7\u00e3o integrada: Gera\u00e7\u00e3o autom\u00e1tica de relat\u00f3rios e integra\u00e7\u00e3o com sistemas de gerenciamento de falhas.</li> <li>Extensibilidade: Pontos de extens\u00e3o permitem personaliza\u00e7\u00e3o e desenvolvimento de novos recursos.</li> <li>Evolu\u00e7\u00e3o cont\u00ednua: Planejamento de novos recursos, como an\u00e1lise avan\u00e7ada e maior suporte a integra\u00e7\u00f5es.</li> </ul> <p>O Probato transforma as desvantagens comuns da automa\u00e7\u00e3o em oportunidades, auxiliando equipes a entregar software de alta qualidade com efici\u00eancia e confian\u00e7a.</p>"},{"location":"pt-BR/architecture/","title":"Arquitetura","text":"<p>O Probato foi projetado com uma arquitetura modular e altamente extens\u00edvel para suportar a automa\u00e7\u00e3o de testes a n\u00edvel funcional de forma eficiente e escal\u00e1vel. Ele utiliza conceitos modernos de design de software, como o Page Object Model (POM) e a inje\u00e7\u00e3o de depend\u00eancias via anota\u00e7\u00f5es, permitindo a cria\u00e7\u00e3o de scripts reutiliz\u00e1veis, f\u00e1ceis de manter e expandir.</p>"},{"location":"pt-BR/architecture/#camadas-modulares-e-isolamento-de-responsabilidades","title":"Camadas Modulares e Isolamento de Responsabilidades","text":"<p>A arquitetura do Probato \u00e9 composta por m\u00faltiplas camadas, cada uma com responsabilidades bem definidas, o que facilita a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do framework.</p>"},{"location":"pt-BR/architecture/#camada-de-interacao-page-object-model","title":"Camada de Intera\u00e7\u00e3o (Page Object Model)","text":"<ul> <li>Implementa o padr\u00e3o POM, encapsulando a l\u00f3gica de intera\u00e7\u00e3o com a interface do usu\u00e1rio.</li> <li>Cada p\u00e1gina, tela ou componente \u00e9 representado como um objeto, contendo m\u00e9todos para intera\u00e7\u00f5es poss\u00edveis (cliques, inser\u00e7\u00e3o de dados, verifica\u00e7\u00f5es, etc.).</li> <li>Promove a reutiliza\u00e7\u00e3o de c\u00f3digo e facilita a manuten\u00e7\u00e3o quando a interface da aplica\u00e7\u00e3o \u00e9 alterada.</li> </ul>"},{"location":"pt-BR/architecture/#camada-de-testes-scripts-e-procedimentos","title":"Camada de Testes (Scripts e Procedimentos)","text":"<ul> <li>Os testes s\u00e3o organizados em scripts compostos por a\u00e7\u00f5es subdivididas em:<ul> <li>Pr\u00e9-condi\u00e7\u00f5es</li> <li>Procedimentos</li> <li>P\u00f3s-condi\u00e7\u00f5es</li> </ul> </li> <li>A separa\u00e7\u00e3o de responsabilidades ajuda a isolar falhas e facilita o diagn\u00f3stico de erros.</li> </ul>"},{"location":"pt-BR/architecture/#camada-de-injecao-de-massa-de-dados","title":"Camada de Inje\u00e7\u00e3o de Massa de Dados","text":"<ul> <li>Permite o uso flex\u00edvel e din\u00e2mico de dados de entrada para testes.</li> <li>Suporta inje\u00e7\u00e3o de dados via arquivos CSV, com previs\u00e3o de suporte futuro para JSON, YAML e bancos de dados por meio de plugins personalizados.</li> </ul>"},{"location":"pt-BR/architecture/#camada-de-persistencia-e-conectores-sql","title":"Camada de Persist\u00eancia e Conectores SQL","text":"<ul> <li>Disponibiliza um executor SQL integrado que se conecta a m\u00faltiplas bases de dados.</li> <li>Permite definir pr\u00e9-condi\u00e7\u00f5es de banco de dados, alterar estados dinamicamente antes dos testes e restaurar os estados ap\u00f3s a execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt-BR/architecture/#injecao-de-dependencias-com-anotacoes","title":"Inje\u00e7\u00e3o de Depend\u00eancias com Anota\u00e7\u00f5es","text":"<ul> <li>Adota um modelo de inje\u00e7\u00e3o de depend\u00eancias via anota\u00e7\u00f5es Java, promovendo a invers\u00e3o de controle (IoC).</li> <li>Simplifica a configura\u00e7\u00e3o manual, permitindo que objetos necess\u00e1rios sejam injetados automaticamente com base nas declara\u00e7\u00f5es de anota\u00e7\u00e3o.</li> <li>Promove modularidade e reutiliza\u00e7\u00e3o de componentes.</li> </ul>"},{"location":"pt-BR/architecture/#executor-de-testes-baseado-no-junit-5","title":"Executor de Testes Baseado no JUnit 5","text":"<p>O Probato integra-se ao ciclo de vida do JUnit 5, utilizando testes din\u00e2micos e a anota\u00e7\u00e3o <code>@TestFactory</code> para gerar casos de teste em tempo de execu\u00e7\u00e3o.</p>"},{"location":"pt-BR/architecture/#ciclo-de-vida-e-estrutura","title":"Ciclo de Vida e Estrutura","text":"<ul> <li> <p>BeforeAll:     Carrega pontos de extens\u00e3o, configura\u00e7\u00f5es e executa valida\u00e7\u00f5es de c\u00f3digo e configura\u00e7\u00f5es. Tamb\u00e9m cria Dynamic tests.</p> </li> <li> <p>BeforeEach:    Carrega conjuntos de dados e scripts necess\u00e1rios e inicia a execu\u00e7\u00e3o dos cen\u00e1rios de teste.</p> </li> <li> <p>TestFactory:     Gera testes dinamicamente com base em classes de script, procedimentos e Page Objects. Suporta data-driven testing, permitindo m\u00faltiplas execu\u00e7\u00f5es com diferentes conjuntos de dados.</p> </li> <li> <p>AfterEach:     Submete os dados coletados durante a execu\u00e7\u00e3o dos testes ao Probato Manager e armazena as imagens e v\u00eddeos no armazenamento.</p> </li> <li> <p>AfterAll:    Calcula a qualidade do software com base em m\u00e9tricas e dados de execu\u00e7\u00e3o e notifica os colaboradores sobre a conclus\u00e3o da execu\u00e7\u00e3o.</p> </li> </ul>"},{"location":"pt-BR/architecture/#suporte-para-execucao-multibrowser","title":"Suporte para Execu\u00e7\u00e3o Multibrowser","text":"<ul> <li>Constru\u00eddo sobre a API do Selenium, permitindo automa\u00e7\u00e3o em m\u00faltiplos navegadores.</li> <li>Suporte extens\u00edvel para adicionar novos browsers e contextos de execu\u00e7\u00e3o (diferentes sistemas operacionais ou vers\u00f5es).</li> </ul>"},{"location":"pt-BR/architecture/#extensibilidade-e-plugins","title":"Extensibilidade e Plugins","text":"<ul> <li>Projetado para ser extens\u00edvel, permitindo a adi\u00e7\u00e3o de novas funcionalidades sem modificar o n\u00facleo do framework.</li> <li>Suporte a plugins para:<ul> <li>Novos drivers de browser.</li> <li>Formatos de dados de entrada adicionais.</li> <li>Novos tipos de valida\u00e7\u00e3o e manipula\u00e7\u00e3o de dados.</li> </ul> </li> </ul>"},{"location":"pt-BR/architecture/#gerenciamento-de-execucoes-e-coleta-de-dados","title":"Gerenciamento de Execu\u00e7\u00f5es e Coleta de Dados","text":"<ul> <li>Durante os testes, captura dados como:<ul> <li>Logs de execu\u00e7\u00e3o.</li> <li>Capturas de tela.</li> <li>V\u00eddeos e passos executados.</li> </ul> </li> <li>Processa e envia os dados para uma aplica\u00e7\u00e3o web integrada, que oferece:<ul> <li>Monitoramento centralizado das execu\u00e7\u00f5es.</li> <li>Gera\u00e7\u00e3o de relat\u00f3rios detalhados.</li> <li>Rastreamento de bugs e an\u00e1lise de versionamento.</li> </ul> </li> <li>Suporta integra\u00e7\u00e3o com ferramentas como TestLink e Mantis Bug Tracker.</li> </ul>"},{"location":"pt-BR/architecture/#configuracoes-e-personalizacoes-avancadas","title":"Configura\u00e7\u00f5es e Personaliza\u00e7\u00f5es Avan\u00e7adas","text":"<ul> <li>Oferece op\u00e7\u00f5es para:<ul> <li>Configurar timeouts e intervalos entre a\u00e7\u00f5es.</li> <li>Ajustar a qualidade de imagens e v\u00eddeos capturados.</li> <li>Definir execu\u00e7\u00e3o em tela (monitores prim\u00e1rios ou secund\u00e1rios).</li> </ul> </li> </ul>"},{"location":"pt-BR/architecture/#notificacoes-e-integracao-continua","title":"Notifica\u00e7\u00f5es e Integra\u00e7\u00e3o Cont\u00ednua","text":"<ul> <li>Envia notifica\u00e7\u00f5es autom\u00e1ticas para colaboradores ap\u00f3s cada execu\u00e7\u00e3o de testes.</li> <li>Integra-se facilmente com ferramentas de CI/CD, como Jenkins, permitindo a automa\u00e7\u00e3o total dos processos de teste no ciclo de desenvolvimento.</li> </ul>"},{"location":"pt-BR/features/","title":"Funcionalidades","text":""},{"location":"pt-BR/features/#estrutura-simples-e-intuitiva","title":"Estrutura Simples e Intuitiva","text":"<p>O Probato oferece uma estrutura organizada e modular para implementa\u00e7\u00e3o de testes, facilitando a reutiliza\u00e7\u00e3o de componentes e a manuten\u00e7\u00e3o de scripts. Isso permite que equipes se concentrem mais na l\u00f3gica de testes do que na estrutura de implementa\u00e7\u00e3o.</p>"},{"location":"pt-BR/features/#injecao-de-objetos-com-anotacoes","title":"Inje\u00e7\u00e3o de Objetos com Anota\u00e7\u00f5es","text":"<p>A utiliza\u00e7\u00e3o de anota\u00e7\u00f5es simplifica a configura\u00e7\u00e3o de testes, permitindo uma inje\u00e7\u00e3o de objetos clara e concisa, sem necessidade de implementa\u00e7\u00f5es adicionais.</p>"},{"location":"pt-BR/features/#padrao-page-object-model-pom","title":"Padr\u00e3o Page Object Model (POM)","text":"<p>O Probato segue o padr\u00e3o Page Object Model, ajudando na separa\u00e7\u00e3o de camadas e organiza\u00e7\u00e3o do c\u00f3digo. Essa abordagem facilita a manuten\u00e7\u00e3o e leitura dos scripts, especialmente em frameworks como Selenium.</p>"},{"location":"pt-BR/features/#organizacao-de-procedimentos-de-teste","title":"Organiza\u00e7\u00e3o de Procedimentos de Teste","text":"<p>Os testes s\u00e3o organizados em tr\u00eas etapas:</p> <ol> <li>Pr\u00e9-condi\u00e7\u00f5es</li> <li>Procedimentos</li> <li>P\u00f3s-condi\u00e7\u00f5es</li> </ol> <p>Essa estrutura permite identificar rapidamente a origem de falhas e entender se os erros est\u00e3o nas funcionalidades alvo ou nas etapas preparat\u00f3rias.</p>"},{"location":"pt-BR/features/#carregamento-e-injecao-implicita-de-massa-de-dados","title":"Carregamento e Inje\u00e7\u00e3o Impl\u00edcita de Massa de Dados","text":"<p>Scripts podem ser executados com diferentes conjuntos de dados, permitindo testes abrangentes sem duplicar c\u00f3digo. Essa funcionalidade melhora a efici\u00eancia e cobertura dos testes.</p>"},{"location":"pt-BR/features/#executor-de-arquivos-sql","title":"Executor de Arquivos SQL","text":"<p>O executor SQL integrado conecta-se a m\u00faltiplas bases de dados para alterar o estado da aplica\u00e7\u00e3o conforme as pr\u00e9-condi\u00e7\u00f5es dos testes. Isso oferece flexibilidade na configura\u00e7\u00e3o de cen\u00e1rios de teste.</p>"},{"location":"pt-BR/features/#criacao-de-roteiros-de-teste-intuitivos","title":"Cria\u00e7\u00e3o de Roteiros de Teste Intuitivos","text":"<p>Os roteiros podem ser criados com c\u00f3digo, descri\u00e7\u00e3o e pesos baseados na relev\u00e2ncia e complexidade da funcionalidade. Isso ajuda na prioriza\u00e7\u00e3o e na an\u00e1lise da qualidade do software testado.</p>"},{"location":"pt-BR/features/#configuracoes-de-timeout-e-intervalos","title":"Configura\u00e7\u00f5es de Timeout e Intervalos","text":"<p>O Probato permite:</p> <ul> <li>Configurar timeouts para o tempo de espera durante a execu\u00e7\u00e3o dos testes.</li> <li>Ajustar intervalos entre a\u00e7\u00f5es, otimizando o desempenho dos testes.</li> </ul>"},{"location":"pt-BR/features/#execucao-em-diversos-browsers","title":"Execu\u00e7\u00e3o em Diversos Browsers","text":"<p>Suporte para execu\u00e7\u00e3o de testes em m\u00faltiplos navegadores, com op\u00e7\u00f5es como:</p> <ul> <li>Modo maximizado, normal ou customizado (dimens\u00f5es espec\u00edficas).</li> <li>Escolha do monitor para execu\u00e7\u00e3o (prim\u00e1rio ou secund\u00e1rio).</li> </ul>"},{"location":"pt-BR/features/#gerenciamento-de-dados-coletados","title":"Gerenciamento de Dados Coletados","text":"<p>O Probato inclui uma aplica\u00e7\u00e3o web para:</p> <ul> <li>Gerenciamento de dados de execu\u00e7\u00e3o.</li> <li>An\u00e1lise da qualidade do software.</li> <li>Cria\u00e7\u00e3o de bugs a partir dos resultados.</li> <li>Visualiza\u00e7\u00e3o de hist\u00f3ricos e versionamento.</li> <li>Gera\u00e7\u00e3o de relat\u00f3rios detalhados com logs e gr\u00e1ficos de cobertura.</li> </ul>"},{"location":"pt-BR/features/#captura-de-dados-durante-a-execucao","title":"Captura de Dados Durante a Execu\u00e7\u00e3o","text":"<p>Coleta e armazena informa\u00e7\u00f5es como:</p> <ul> <li>Su\u00edte e roteiros de testes.</li> <li>Passos executados.</li> <li>Dados aplicados.</li> <li>Scripts SQL.</li> <li>V\u00eddeos e capturas de tela (em casos de falha).</li> </ul> <p>A qualidade das imagens pode ser ajustada para an\u00e1lises detalhadas das falhas.</p>"},{"location":"pt-BR/features/#notificacoes-de-execucao","title":"Notifica\u00e7\u00f5es de Execu\u00e7\u00e3o","text":"<p>Envio de notifica\u00e7\u00f5es para os colaboradores quando novas execu\u00e7\u00f5es ocorrem, mantendo todos atualizados sobre o status dos testes.</p>"},{"location":"pt-BR/features/#extensibilidade","title":"Extensibilidade","text":"<p>O Probato permite personaliza\u00e7\u00f5es por meio de plugins, incluindo:</p> <ul> <li>Suporte a novos browsers.</li> <li>Valida\u00e7\u00f5es adicionais.</li> <li>Entrada de massa de dados em novos formatos.</li> <li>Executores SQL ou NoSQL personalizados.</li> </ul>"},{"location":"pt-BR/features/#integracao-com-ferramentas-de-cicd","title":"Integra\u00e7\u00e3o com Ferramentas de CI/CD","text":"<p>Integra-se facilmente com sistemas de integra\u00e7\u00e3o cont\u00ednua, como:</p> <ul> <li>Jenkins</li> <li>Travis CI</li> <li>GitLab CI</li> </ul> <p>Isso permite a execu\u00e7\u00e3o autom\u00e1tica de testes em cada commit, garantindo valida\u00e7\u00f5es cont\u00ednuas e \u00e1geis.</p>"},{"location":"pt-BR/objective/","title":"Objetivo","text":"<p>O principal objetivo do Probato \u00e9 simplificar e acelerar o processo de automa\u00e7\u00e3o de testes de software, fornecendo uma solu\u00e7\u00e3o robusta e flex\u00edvel para garantir a qualidade de sistemas complexos. A automa\u00e7\u00e3o de testes tornou-se indispens\u00e1vel \u00e0 medida que as pr\u00e1ticas de desenvolvimento evoluem para modelos \u00e1geis, onde a valida\u00e7\u00e3o cont\u00ednua e r\u00e1pida das funcionalidades \u00e9 essencial.</p> <p>Este framework foi projetado para resolver desafios comuns da automa\u00e7\u00e3o e superar limita\u00e7\u00f5es frequentemente encontradas. Como uma iniciativa Open Source, sua evolu\u00e7\u00e3o depende da colabora\u00e7\u00e3o da comunidade. Desenvolvedores, testadores e entusiastas s\u00e3o convidados a contribuir para tornar o Probato mais poderoso, adapt\u00e1vel e alinhado \u00e0s necessidades reais do mercado. Com o apoio da comunidade, \u00e9 poss\u00edvel construir uma solu\u00e7\u00e3o inovadora e acess\u00edvel, promovendo boas pr\u00e1ticas e ampliando o alcance da automa\u00e7\u00e3o.</p>"},{"location":"pt-BR/objective/#propositos-centrais","title":"Prop\u00f3sitos Centrais","text":""},{"location":"pt-BR/objective/#automatizar-processos-repetitivos","title":"Automatizar Processos Repetitivos","text":"<p>O Probato elimina tarefas manuais, como testes de regress\u00e3o, automatizando sua execu\u00e7\u00e3o em cada ciclo de desenvolvimento.</p>"},{"location":"pt-BR/objective/#aumentar-a-confiabilidade-dos-testes","title":"Aumentar a Confiabilidade dos Testes","text":"<p>Ao garantir execu\u00e7\u00f5es consistentes e repet\u00edveis, o Probato minimiza erros humanos e assegura maior confiabilidade.</p>"},{"location":"pt-BR/objective/#melhorar-a-produtividade","title":"Melhorar a Produtividade","text":"<p>Com a automa\u00e7\u00e3o, as equipes podem focar em atividades estrat\u00e9gicas, como desenvolvimento de novas funcionalidades e an\u00e1lise de resultados.</p>"},{"location":"pt-BR/objective/#facilidade-de-integracao-e-extensibilidade","title":"Facilidade de Integra\u00e7\u00e3o e Extensibilidade","text":"<p>Projetado para ser flex\u00edvel, o Probato integra-se facilmente a ferramentas externas e pode ser estendido para atender necessidades espec\u00edficas.</p>"},{"location":"pt-BR/objective/#foco-em-agilidade-e-integracao-continua","title":"Foco em Agilidade e Integra\u00e7\u00e3o Cont\u00ednua","text":""},{"location":"pt-BR/objective/#validacao-rapida-em-ambientes-ageis","title":"Valida\u00e7\u00e3o R\u00e1pida em Ambientes \u00c1geis","text":"<p>Em ciclos \u00e1geis, mudan\u00e7as de c\u00f3digo precisam ser validadas rapidamente. O Probato permite a execu\u00e7\u00e3o cont\u00ednua de testes para evitar novos defeitos.</p>"},{"location":"pt-BR/objective/#suporte-para-pipelines-de-cicd","title":"Suporte para Pipelines de CI/CD","text":"<p>Compat\u00edvel com ferramentas como Jenkins, GitLab CI e Travis CI, o Probato possibilita a execu\u00e7\u00e3o autom\u00e1tica de testes a cada commit ou em etapas estrat\u00e9gicas do desenvolvimento.</p>"},{"location":"pt-BR/objective/#reducao-de-custos-e-esforco-em-manutencao","title":"Redu\u00e7\u00e3o de Custos e Esfor\u00e7o em Manuten\u00e7\u00e3o","text":""},{"location":"pt-BR/objective/#facilidade-de-atualizacao-dos-testes","title":"Facilidade de Atualiza\u00e7\u00e3o dos Testes","text":"<p>A arquitetura do Probato facilita a adapta\u00e7\u00e3o de testes a mudan\u00e7as no software, com suporte ao padr\u00e3o Page Object Model (POM) e reutiliza\u00e7\u00e3o de componentes.</p>"},{"location":"pt-BR/objective/#suporte-a-testes-data-driven","title":"Suporte a Testes Data-Driven","text":"<p>O Probato permite executar um mesmo teste com diferentes conjuntos de dados, ampliando a cobertura sem duplicar scripts.</p>"},{"location":"pt-BR/objective/#confiabilidade-e-cobertura-abrangente","title":"Confiabilidade e Cobertura Abrangente","text":"<p>O Probato oferece cobertura ampla em diferentes plataformas e tipos de testes.</p>"},{"location":"pt-BR/objective/#testes-funcionais-e-de-regressao","title":"Testes Funcionais e de Regress\u00e3o","text":"<p>Garante valida\u00e7\u00f5es consistentes das principais funcionalidades e identifica problemas em funcionalidades existentes durante altera\u00e7\u00f5es de c\u00f3digo.</p>"},{"location":"pt-BR/objective/#aumento-da-confianca-no-processo-de-deploy","title":"Aumento da Confian\u00e7a no Processo de Deploy","text":""},{"location":"pt-BR/objective/#feedback-rapido-e-confiavel","title":"Feedback R\u00e1pido e Confi\u00e1vel","text":"<p>Testes automatizados integrados ao pipeline de CI fornecem feedback imediato, permitindo corre\u00e7\u00f5es r\u00e1pidas.</p>"},{"location":"pt-BR/objective/#deteccao-de-problemas-em-estagios-iniciais","title":"Detec\u00e7\u00e3o de Problemas em Est\u00e1gios Iniciais","text":"<p>A automa\u00e7\u00e3o permite identificar erros durante o desenvolvimento, reduzindo custos associados a defeitos encontrados tardiamente.</p>"},{"location":"pt-BR/objective/#facilidade-de-uso","title":"Facilidade de Uso","text":""},{"location":"pt-BR/objective/#interface-simples-e-intuitiva","title":"Interface Simples e Intuitiva","text":"<p>A interface de gerenciamento de resultados do Probato simplifica a cria\u00e7\u00e3o e execu\u00e7\u00e3o de testes, mesmo para usu\u00e1rios com pouca experi\u00eancia.</p>"},{"location":"pt-BR/objective/#baixa-curva-de-aprendizado","title":"Baixa Curva de Aprendizado","text":"<p>A arquitetura modular e a sintaxe amig\u00e1vel tornam o framework acess\u00edvel para iniciantes e eficiente para profissionais experientes.</p>"},{"location":"pt-BR/objective/#flexibilidade","title":"Flexibilidade","text":""},{"location":"pt-BR/objective/#arquitetura-extensivel","title":"Arquitetura Extens\u00edvel","text":"<p>O Probato permite a implementa\u00e7\u00e3o de plugins para valida\u00e7\u00f5es, browsers e bancos de dados, sem necessidade de grandes modifica\u00e7\u00f5es.</p>"},{"location":"pt-BR/objective/#resumo-dos-objetivos","title":"Resumo dos Objetivos","text":"<p>O Probato foi desenvolvido para:</p> <ul> <li>Automatizar testes repetitivos, reduzindo o esfor\u00e7o manual.</li> <li>Aumentar a confiabilidade e consist\u00eancia dos testes.</li> <li>Facilitar a integra\u00e7\u00e3o com pipelines de CI/CD, promovendo agilidade.</li> <li>Reduzir custos e esfor\u00e7os de manuten\u00e7\u00e3o com uma arquitetura flex\u00edvel.</li> <li>Proporcionar feedback r\u00e1pido, aumentando a confian\u00e7a no processo de deploy.</li> <li>Ser f\u00e1cil de usar, com baixa curva de aprendizado.</li> <li>Ser flex\u00edvel e personaliz\u00e1vel, adaptando-se a diferentes projetos e necessidades.</li> </ul>"},{"location":"pt-BR/target-audience/","title":"P\u00fablico-Alvo","text":"<p>O Probato foi projetado para atender a uma ampla variedade de profissionais envolvidos no desenvolvimento e na garantia da qualidade de software. Com uma abordagem vers\u00e1til e intuitiva, ele \u00e9 \u00fatil tanto para engenheiros de testes experientes quanto para desenvolvedores que desejam integrar a automa\u00e7\u00e3o ao ciclo de desenvolvimento. Al\u00e9m disso, \u00e9 acess\u00edvel a outros stakeholders interessados na qualidade dos projetos. Abaixo, apresentamos os principais perfis de usu\u00e1rios que podem se beneficiar deste framework.</p>"},{"location":"pt-BR/target-audience/#engenheiro-de-teste-qa","title":"Engenheiro de Teste (QA)","text":"<p>Os Engenheiros de Teste ou profissionais de Quality Assurance (QA) s\u00e3o um dos p\u00fablicos principais do Probato. Eles garantem a qualidade do software, validam funcionalidades e asseguram que novos desenvolvimentos n\u00e3o introduzam defeitos.</p>"},{"location":"pt-BR/target-audience/#beneficios","title":"Benef\u00edcios","text":"<ul> <li>Facilidade para QAs menos experientes: Ferramentas intuitivas permitem criar testes automatizados com m\u00ednima codifica\u00e7\u00e3o.</li> <li>Cobertura abrangente: Suporte a testes funcionais e de regress\u00e3o para validar fluxos com efici\u00eancia.</li> <li>An\u00e1lise e feedback r\u00e1pidos: Aplica\u00e7\u00e3o dedicada para an\u00e1lise dos dados coletados nos testes.</li> <li>Boas pr\u00e1ticas e padr\u00f5es: Suporte a metodologias como TDD e BDD.</li> <li>Extensibilidade: API flex\u00edvel para personaliza\u00e7\u00f5es e testes avan\u00e7ados.</li> </ul>"},{"location":"pt-BR/target-audience/#habilidades-recomendadas","title":"Habilidades Recomendadas","text":"<ul> <li>Conhecimento b\u00e1sico em Java.</li> <li>Experi\u00eancia com ferramentas de automa\u00e7\u00e3o de testes.</li> <li>Familiaridade com Data-Driven Testing e Page Object Model (POM).</li> </ul>"},{"location":"pt-BR/target-audience/#facilidade-de-uso","title":"Facilidade de Uso","text":"<p>O Probato possui uma interface intuitiva e suporte para linguagem de alto n\u00edvel, facilitando a cria\u00e7\u00e3o e execu\u00e7\u00e3o de testes mesmo para quem tem pouca experi\u00eancia em programa\u00e7\u00e3o. </p>"},{"location":"pt-BR/target-audience/#desenvolvedor-de-software","title":"Desenvolvedor de Software","text":"<p>Os Desenvolvedores de Software s\u00e3o um p\u00fablico essencial, especialmente em ambientes \u00e1geis. Eles asseguram que novas funcionalidades atendam aos requisitos e n\u00e3o impactem negativamente o sistema.</p>"},{"location":"pt-BR/target-audience/#beneficios_1","title":"Benef\u00edcios","text":"<ul> <li>Integra\u00e7\u00e3o com CI/CD: Facilita a execu\u00e7\u00e3o automatizada de testes em pipelines.</li> <li>Feedback imediato: Relat\u00f3rios detalhados ajudam na identifica\u00e7\u00e3o e corre\u00e7\u00e3o de bugs rapidamente.</li> <li>Gerenciamento de bugs: Ferramentas para an\u00e1lise e documenta\u00e7\u00e3o dos resultados dos testes.</li> </ul>"},{"location":"pt-BR/target-audience/#habilidades-recomendadas_1","title":"Habilidades Recomendadas","text":"<ul> <li>Experi\u00eancia com ferramentas de CI/CD.</li> <li>Conhecimento b\u00e1sico em Java.</li> <li>Familiaridade com pr\u00e1ticas de desenvolvimento \u00e1gil.</li> </ul>"},{"location":"pt-BR/target-audience/#facilidade-de-uso_1","title":"Facilidade de Uso","text":"<p>A API do Probato \u00e9 clara e extens\u00edvel, com exemplos e documenta\u00e7\u00e3o abrangentes para integra\u00e7\u00e3o \u00e1gil nos pipelines de desenvolvimento.</p>"},{"location":"pt-BR/target-audience/#analistas-de-negocio-e-product-owners","title":"Analistas de Neg\u00f3cio e Product Owners","text":"<p>Embora n\u00e3o sejam usu\u00e1rios diretos do Probato, Analistas de Neg\u00f3cio e Product Owners se beneficiam dos resultados gerados pela ferramenta. Eles garantem que os requisitos de neg\u00f3cio sejam continuamente validados.</p>"},{"location":"pt-BR/target-audience/#beneficios_2","title":"Benef\u00edcios","text":"<ul> <li>Integra\u00e7\u00e3o com BDD: Crit\u00e9rios de aceita\u00e7\u00e3o podem ser traduzidos diretamente em testes automatizados.</li> <li>Relat\u00f3rios claros: Vis\u00e3o geral da qualidade do software acess\u00edvel para stakeholders n\u00e3o t\u00e9cnicos.</li> </ul>"},{"location":"pt-BR/target-audience/#habilidades-recomendadas_2","title":"Habilidades Recomendadas","text":"<ul> <li>Defini\u00e7\u00e3o de cen\u00e1rios de teste baseados nos requisitos de neg\u00f3cio.</li> <li>Compreens\u00e3o b\u00e1sica de ferramentas de relat\u00f3rios.</li> </ul>"},{"location":"pt-BR/target-audience/#facilidade-de-uso_2","title":"Facilidade de Uso","text":"<p>Relat\u00f3rios detalhados e acess\u00edveis permitem que Analistas de Neg\u00f3cio e Product Owners validem entregas sem conhecimento t\u00e9cnico aprofundado.</p>"},{"location":"pt-BR/target-audience/#gerente-de-projeto","title":"Gerente de Projeto","text":"<p>Os Gerentes de Projeto desempenham um papel importante no monitoramento da qualidade do software. Embora n\u00e3o criem ou executem os testes diretamente, acompanham o progresso e garantem a entrega dentro dos prazos e padr\u00f5es de qualidade.</p>"},{"location":"pt-BR/target-audience/#beneficios_3","title":"Benef\u00edcios","text":"<ul> <li>Monitoramento em tempo real: Dashboards interativos para acompanhar o progresso dos testes.</li> <li>Identifica\u00e7\u00e3o de riscos: R\u00e1pida identifica\u00e7\u00e3o de gargalos e problemas no ciclo de desenvolvimento.</li> <li>Facilidade na comunica\u00e7\u00e3o: Alinha desenvolvedores, engenheiros de QA e stakeholders.</li> </ul>"},{"location":"pt-BR/target-audience/#habilidades-recomendadas_3","title":"Habilidades Recomendadas","text":"<ul> <li>Interpreta\u00e7\u00e3o de relat\u00f3rios e m\u00e9tricas.</li> <li>Familiaridade com metodologias \u00e1geis e integra\u00e7\u00e3o de testes.</li> </ul>"},{"location":"pt-BR/target-audience/#facilidade-de-uso_3","title":"Facilidade de Uso","text":"<p>Relat\u00f3rios visuais e gr\u00e1ficos oferecem uma vis\u00e3o clara e imediata da qualidade do software, ajudando na tomada de decis\u00f5es r\u00e1pidas e eficazes.</p>"},{"location":"pt-BR/target-audience/#clientes","title":"Clientes","text":"<p>Os Clientes participam do processo de homologa\u00e7\u00e3o e valida\u00e7\u00e3o, garantindo que o produto final atenda aos requisitos do neg\u00f3cio.</p>"},{"location":"pt-BR/target-audience/#beneficios_4","title":"Benef\u00edcios","text":"<ul> <li>Acompanhamento transparente: Relat\u00f3rios claros permitem aos clientes acompanhar o progresso dos testes.</li> <li>Execu\u00e7\u00e3o de testes: Interface intuitiva para valida\u00e7\u00e3o direta de funcionalidades.</li> </ul>"},{"location":"pt-BR/target-audience/#habilidades-recomendadas_4","title":"Habilidades Recomendadas","text":"<ul> <li>Interpreta\u00e7\u00e3o b\u00e1sica de relat\u00f3rios.</li> <li>Compreens\u00e3o dos requisitos de neg\u00f3cio e do plano de testes.</li> </ul>"},{"location":"pt-BR/target-audience/#facilidade-de-uso_4","title":"Facilidade de Uso","text":"<p>Uma interface simplificada e relat\u00f3rios objetivos facilitam a valida\u00e7\u00e3o e homologa\u00e7\u00e3o do software pelos clientes.</p> <p>O Probato \u00e9 uma ferramenta vers\u00e1til e intuitiva, projetada para atender a diferentes p\u00fablicos, promovendo colabora\u00e7\u00e3o e garantindo a qualidade do software de forma \u00e1gil e eficiente.</p>"},{"location":"pt-BR/documentation/","title":"Documenta\u00e7\u00e3o","text":""},{"location":"pt-BR/documentation/configure-environment/","title":"Configura\u00e7\u00e3o de Ambiente","text":"<p>Nesta se\u00e7\u00e3o, vamos configurar o ambiente de desenvolvimento para usar o Probato. Este framework utiliza a linguagem de programa\u00e7\u00e3o Java, ent\u00e3o ser\u00e1 necess\u00e1rio instalar o Java Development Kit (JDK), configurar vari\u00e1veis de ambiente e instalar uma IDE para come\u00e7ar a desenvolver aplica\u00e7\u00f5es Java.</p>"},{"location":"pt-BR/documentation/configure-environment/#componentes-necessarios","title":"Componentes Necess\u00e1rios","text":"<p>Antes de come\u00e7ar, certifique-se de que ter\u00e1 os seguintes itens configurados:</p> <ul> <li>Java Development Kit (JDK): Para compilar e executar c\u00f3digo Java.</li> <li>Maven: Para gerenciamento de depend\u00eancias e automa\u00e7\u00e3o de builds.</li> <li>IDE (Ambiente de Desenvolvimento Integrado): Para facilitar a escrita e depura\u00e7\u00e3o do c\u00f3digo.</li> </ul> <p>\u26a0\ufe0f Nota: \u00c9 necess\u00e1rio usar o JDK vers\u00e3o 11 ou superior.</p> <p>No final desta configura\u00e7\u00e3o, voc\u00ea ter\u00e1 todos os componentes prontos para desenvolver e executar testes no Probato.</p>"},{"location":"pt-BR/documentation/configure-environment/#1-baixar-e-instalar-o-java-development-kit-jdk","title":"1. Baixar e Instalar o Java Development Kit (JDK)","text":"<p>O JDK \u00e9 um conjunto de ferramentas para desenvolvimento e execu\u00e7\u00e3o de aplica\u00e7\u00f5es Java.</p>"},{"location":"pt-BR/documentation/configure-environment/#baixar-o-jdk","title":"Baixar o JDK","text":"<ol> <li> <p>Acesse um dos links abaixo para baixar o JDK:</p> <ul> <li>Oracle JDK</li> <li>OpenJDK</li> <li>Adoptium</li> <li>Amazon Corretto</li> </ul> </li> <li> <p>Escolha a vers\u00e3o desejada (obrigatoriamente 11 ou superior).</p> </li> <li>Baixe o arquivo no formato <code>.zip</code> e extraia para um diret\u00f3rio, como <code>C:\\\\dev\\\\java\\\\jdk&lt;vers\u00e3o&gt;</code>.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#configurar-variavel-de-ambiente","title":"Configurar Vari\u00e1vel de Ambiente","text":"<ol> <li>Pressione <code>Win + S</code>, procure por Vari\u00e1veis de Ambiente e clique em \"Editar as vari\u00e1veis de ambiente do sistema\".</li> <li>Na aba Avan\u00e7ado, clique em Vari\u00e1veis de Ambiente.</li> <li>Em Vari\u00e1veis de Sistema, clique em Novo e adicione:<ul> <li>Nome: <code>JAVA_HOME</code></li> <li>Valor: <code>C:\\\\dev\\\\java\\\\jdk&lt;vers\u00e3o&gt;</code></li> </ul> </li> <li>Edite a vari\u00e1vel <code>Path</code> e adicione <code>%JAVA_HOME%\\\\bin</code> \u00e0 lista.</li> <li>Clique em OK para salvar.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#verificar-a-instalacao","title":"Verificar a Instala\u00e7\u00e3o","text":"<ol> <li>Abra o Prompt de Comando (pressione <code>Win + R</code>, digite <code>cmd</code> e pressione Enter).</li> <li>Execute o comando:     <pre><code>java --version\n</code></pre></li> <li>A sa\u00edda dever\u00e1 mostrar a vers\u00e3o do Java instalado, como:     <pre><code>java version \"11.0.X\"\nJava(TM) SE Runtime Environment (build 11.0.X)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0.X)\n</code></pre>     \u2705 Se voc\u00ea vir essa sa\u00edda, o Java est\u00e1 instalado e configurado corretamente!</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#2-instalar-o-maven","title":"2. Instalar o Maven","text":""},{"location":"pt-BR/documentation/configure-environment/#baixar-e-instalar","title":"Baixar e Instalar","text":"<ol> <li>Acesse o site oficial do Apache Maven.</li> <li>Baixe o arquivo bin\u00e1rio ZIP e extraia para <code>C:\\\\dev\\\\maven</code>.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#configurar-variavel-de-ambiente_1","title":"Configurar Vari\u00e1vel de Ambiente","text":"<ol> <li>Pressione <code>Win + S</code>, procure por Vari\u00e1veis de Ambiente e clique em \"Editar as vari\u00e1veis de ambiente do sistema\".</li> <li>Em Vari\u00e1veis de Sistema, clique em Novo e adicione:<ul> <li>Nome: <code>MAVEN_HOME</code></li> <li>Valor: <code>C:\\\\dev\\\\maven</code></li> </ul> </li> <li>Edite a vari\u00e1vel <code>Path</code> e adicione <code>%MAVEN_HOME%\\\\bin</code> \u00e0 lista.</li> <li>Clique em OK para salvar.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#verificar-a-instalacao_1","title":"Verificar a Instala\u00e7\u00e3o","text":"<ol> <li>Abra o Prompt de Comando e execute:     <pre><code>mvn -version\n</code></pre></li> <li>A sa\u00edda dever\u00e1 ser semelhante a:     <pre><code>Apache Maven 3.X.X\nMaven home: C:\\\\dev\\\\maven\nJava version: 11.0.X, vendor: Oracle Corporation\nOS name: \"windows 11\", version: \"10.0\", arch: \"amd64\"\n</code></pre>     \u2705 Se voc\u00ea vir essa sa\u00edda, o Maven est\u00e1 instalado e configurado corretamente!</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#3-instalar-uma-ide","title":"3. Instalar uma IDE","text":"<p>Uma IDE facilita a escrita, execu\u00e7\u00e3o e depura\u00e7\u00e3o do c\u00f3digo Java. Aqui est\u00e3o algumas op\u00e7\u00f5es:</p>"},{"location":"pt-BR/documentation/configure-environment/#eclipse-ide","title":"Eclipse IDE","text":"<ol> <li>Baixe o Eclipse.</li> <li>Instale o \"Eclipse IDE for Java Developers\".</li> <li>Configure um workspace e comece a criar projetos.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#intellij-idea","title":"IntelliJ IDEA","text":"<ol> <li>Baixe o IntelliJ IDEA.</li> <li>Escolha a vers\u00e3o Community (gratuita).</li> <li>Durante a primeira execu\u00e7\u00e3o, configure o caminho do JDK.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#vs-code","title":"VS Code","text":"<ol> <li>Baixe o VS Code.</li> <li>Instale a extens\u00e3o \"Language Support for Java\u2122 by Red Hat\".</li> <li>Configure o JDK nas prefer\u00eancias do editor.</li> </ol>"},{"location":"pt-BR/documentation/configure-environment/#checklist-final","title":"Checklist Final","text":"<p>Antes de seguir para a pr\u00f3xima se\u00e7\u00e3o, confirme se tudo foi configurado:</p> <ul> <li>\u2705 JDK instalado e configurado (<code>java --version</code> funcionando).</li> <li>\u2705 Maven instalado e configurado (<code>mvn -version</code> funcionando).</li> <li>\u2705 IDE instalada e configurada.</li> </ul> <p>\ud83c\udf89 Seu ambiente est\u00e1 pronto para usar o Probato!</p>"},{"location":"pt-BR/documentation/create-project/","title":"Cria\u00e7\u00e3o do Projeto","text":"<p>Nesta se\u00e7\u00e3o, vamos criar o projeto base para o desenvolvimento da automa\u00e7\u00e3o de testes funcionais com Probato. Configuraremos um projeto Maven, ajustaremos a estrutura de pacotes e pastas, e adicionaremos as depend\u00eancias iniciais necess\u00e1rias para come\u00e7ar a utilizar o framework.</p>"},{"location":"pt-BR/documentation/create-project/#1-criar-um-projeto-maven","title":"1. Criar um Projeto Maven","text":""},{"location":"pt-BR/documentation/create-project/#usando-o-terminal-ou-prompt-de-comando","title":"Usando o terminal ou prompt de comando","text":"<ol> <li>Abra o terminal ou prompt de comando.</li> <li>Navegue at\u00e9 o diret\u00f3rio onde deseja criar o projeto.</li> <li> <p>Execute o comando abaixo:     <pre><code>mvn archetype:generate -DgroupId=com.example.automation -DartifactId=my-project-automation -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre></p> <p>Par\u00e2metros: - groupId: Identificador do grupo da sua organiza\u00e7\u00e3o, geralmente relacionado ao dom\u00ednio (ex.: <code>com.example.automation</code>). - artifactId: Nome do projeto de automa\u00e7\u00e3o de testes (ex.: <code>my-project-automation</code>).</p> <p>Nota: Caso prefira, a cria\u00e7\u00e3o do projeto tamb\u00e9m pode ser feita diretamente pela sua IDE.</p> </li> <li> <p>Ap\u00f3s a execu\u00e7\u00e3o, a seguinte estrutura ser\u00e1 criada:     <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/example/automation/App.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/automation/AppTest.java\n\u2514\u2500\u2500 pom.xml\n</code></pre></p> </li> </ol>"},{"location":"pt-BR/documentation/create-project/#sobre-o-maven-archetype","title":"Sobre o Maven Archetype","text":"<p>O comando <code>mvn archetype:generate</code> utiliza o Maven Archetype para gerar um projeto com uma estrutura inicial padr\u00e3o. Ele \u00e9 \u00fatil para criar projetos rapidamente, incluindo diret\u00f3rios e arquivos b\u00e1sicos.</p>"},{"location":"pt-BR/documentation/create-project/#2-configurar-a-estrutura-de-pacotes-e-pastas","title":"2. Configurar a Estrutura de Pacotes e Pastas","text":"<ol> <li>Abra o diret\u00f3rio <code>src/main/java/</code>.</li> <li>Remova o pacote <code>com.*</code> gerado automaticamente.</li> <li>No diret\u00f3rio <code>src/test/java/com/example/automation/</code>, remova o arquivo <code>AppTest.java</code>.</li> <li>Crie o diret\u00f3rio <code>src/test/resources/</code> e adicione um arquivo chamado <code>configuration.yml</code>.</li> </ol> <p>A estrutura do projeto ficar\u00e1 assim:</p> <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       \u2502   \u2514\u2500\u2500 com/example/automation/\n\u2502       \u2502       \u251c\u2500\u2500 model/\n\u2502       \u2502       \u251c\u2500\u2500 page/\n\u2502       \u2502       \u2514\u2500\u2500 usecase/\n\u2502       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n\u2502           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre> <p>Descri\u00e7\u00e3o das pastas:</p> <ul> <li><code>src/test/java/com/example/automation/</code>: Local onde ser\u00e1 implementada a automa\u00e7\u00e3o dos testes.</li> <li><code>src/test/resources/</code>: Pasta para armazenar configura\u00e7\u00f5es, massas de dados, scripts SQL, entre outros arquivos necess\u00e1rios para os testes. <p>Nota: O arquivo configuration.yml ser\u00e1 configurado em detalhes em se\u00e7\u00f5es futuras.</p> </li> </ul>"},{"location":"pt-BR/documentation/create-project/#3-adicionar-dependencias-ao-maven","title":"3. Adicionar Depend\u00eancias ao Maven","text":"<ol> <li>Abra o arquivo <code>pom.xml</code> localizado no diret\u00f3rio raiz do projeto.</li> <li>Adicione as seguintes depend\u00eancias:     <pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project-automation&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/probato.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;\n</code></pre></li> </ol>"},{"location":"pt-BR/documentation/create-project/#descricao-das-dependencias","title":"Descri\u00e7\u00e3o das Depend\u00eancias","text":"<ul> <li><code>probato-api</code>: Oferece acesso \u00e0s funcionalidades do Probato.</li> <li><code>junit-jupiter</code>: Necess\u00e1rio para executar os testes com o JUnit 5.</li> </ul> <p>Nota: Outras depend\u00eancias ser\u00e3o adicionadas conforme avan\u00e7amos no tutorial.</p>"},{"location":"pt-BR/documentation/create-project/#checklist-final","title":"Checklist Final","text":"<p>Antes de seguir para a pr\u00f3xima se\u00e7\u00e3o, confirme se tudo foi configurado:</p> <ul> <li>\u2705 Projeto Maven criado (<code>my-project-automation</code>).</li> <li>\u2705 Estrutura de pastas ajustada conforme o exemplo.</li> <li>\u2705 Depend\u00eancias adicionadas ao arquivo <code>pom.xml</code>.</li> <li>\u2705 Arquivo <code>configuration.yml</code> criado em <code>src/test/resources/</code>.</li> </ul> <p>\ud83c\udf89 Seu projeto est\u00e1 pronto para come\u00e7ar a automa\u00e7\u00e3o de testes com o Probato!</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/","title":"Entendendo Boas Pr\u00e1ticas para Testes","text":"<p>Nesta se\u00e7\u00e3o, antes de implementarmos scripts de teste, alinharemos o entendimento sobre o que s\u00e3o scripts de teste, sua composi\u00e7\u00e3o, estrutura e objetivos. Compreender e aplicar boas pr\u00e1ticas em testes melhora a efici\u00eancia, a confiabilidade e reduz custos no desenvolvimento de software.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#o-que-e-uma-suite-de-testes","title":"O que \u00e9 uma suite de testes?","text":"<p>Uma suite de testes \u00e9 um conjunto organizado de casos ou scripts de teste agrupados para validar um ou mais aspectos de um sistema, aplica\u00e7\u00e3o ou funcionalidade. Esses testes podem ser organizados com base em crit\u00e9rios como funcionalidade, prioridade, tipo de teste (funcional, desempenho, seguran\u00e7a, etc.) ou fases do ciclo de vida do software.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#objetivo-da-suite","title":"Objetivo da suite","text":"<p>O principal objetivo de uma suite de testes \u00e9 permitir a execu\u00e7\u00e3o coordenada e estruturada de m\u00faltiplos testes, garantindo:</p> <ul> <li>Cobertura abrangente: Valida\u00e7\u00e3o de diferentes cen\u00e1rios de uso e requisitos do sistema.</li> <li>Reutiliza\u00e7\u00e3o: Organiza\u00e7\u00e3o de testes relacionados para facilitar manuten\u00e7\u00e3o e reutiliza\u00e7\u00e3o.</li> <li>Automa\u00e7\u00e3o: Execu\u00e7\u00e3o cont\u00ednua de testes no processo de integra\u00e7\u00e3o ou entrega cont\u00ednua (CI/CD).</li> <li>An\u00e1lise de qualidade: Coletar resultados e identificar \u00e1reas cr\u00edticas no sistema.</li> </ul>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#composicao-de-uma-suite","title":"Composi\u00e7\u00e3o de uma suite","text":"<p>Uma suite de testes geralmente inclui:</p> <ul> <li>Casos de teste ou scripts: Cen\u00e1rios espec\u00edficos que devem ser validados.</li> <li>Configura\u00e7\u00f5es gerais: Par\u00e2metros compartilhados, como URLs e credenciais.</li> <li>Dados de teste: Massa de dados compartilhada ou espec\u00edfica para cada teste.</li> <li>Depend\u00eancias: Rela\u00e7\u00f5es entre testes, caso algum dependa de outro.</li> <li>Crit\u00e9rios de sucesso ou falha: Regras para determinar o resultado da suite.</li> </ul>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#tipos-de-suites","title":"Tipos de suites","text":"Tipo Objetivo Exemplo Funcional Validar requisitos funcionais Testar login e cadastro Regress\u00e3o Garantir que altera\u00e7\u00f5es n\u00e3o introduzam erros Executar testes ap\u00f3s corre\u00e7\u00f5es Performance Avaliar desempenho sob diferentes condi\u00e7\u00f5es Testar tempo de resposta da API Integra\u00e7\u00e3o Validar comunica\u00e7\u00e3o entre m\u00f3dulos Testar integra\u00e7\u00e3o com servi\u00e7o de pagamento Smoke Verificar funcionalidade b\u00e1sica Testar carregamento da p\u00e1gina inicial Explorat\u00f3ria Descobrir comportamentos inesperados Testar novos fluxos sem roteiro fixo"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#estrutura-de-um-script-de-teste","title":"Estrutura de um Script de Teste","text":"<p>Os scripts de teste s\u00e3o compostos por pr\u00e9-condi\u00e7\u00f5es, procedimentos e p\u00f3s-condi\u00e7\u00f5es. Essa estrutura garante testes organizados e resultados verific\u00e1veis.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#pre-condicoes","title":"Pr\u00e9-Condi\u00e7\u00f5es","text":"<p>Condi\u00e7\u00f5es ou estados que precisam ser estabelecidos antes que o teste seja executado.</p> <p>Exemplos: </p> <ul> <li>Ambiente configurado (servidor em execu\u00e7\u00e3o).</li> <li>Dados de teste carregados.</li> <li>APIs externas dispon\u00edveis.</li> </ul> <p>Boas pr\u00e1ticas:</p> <ul> <li>Automatizar a configura\u00e7\u00e3o das pr\u00e9-condi\u00e7\u00f5es.</li> <li>Definir depend\u00eancias e garantir estados reproduz\u00edveis.</li> </ul> <p>Exemplo no Probato:  Pr\u00e9-condi\u00e7\u00e3o para alterar o estado do banco de dados usando o executor SQL antes do teste.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#procedimentos","title":"Procedimentos","text":"<p>Passos que comp\u00f5em o teste, simulando a\u00e7\u00f5es do usu\u00e1rio ou intera\u00e7\u00f5es com o sistema.</p> <p>Exemplos:</p> <ol> <li>Navegar para a p\u00e1gina de login.</li> <li>Preencher campos 'E-mail' com <code>user@probato.org</code>.</li> <li>Preencher campos 'Senha' com <code>p@ssword</code>.</li> <li>Clicar no bot\u00e3o 'Acessar'.</li> </ol> <p>Boas pr\u00e1ticas:</p> <ul> <li>Cada passo deve ser at\u00f4mico e focar em uma \u00fanica a\u00e7\u00e3o.</li> <li>Documentar a\u00e7\u00f5es de forma clara e acess\u00edvel.</li> <li>Incluir checkpoints para validar estados intermedi\u00e1rios.</li> </ul> <p>Exemplo no Probato:  Procedimentos organizados em etapas bem definidas, com logs detalhados de cada a\u00e7\u00e3o.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#pos-condicoes","title":"P\u00f3s-Condi\u00e7\u00f5es","text":"<p>Resultados esperados ou estados finais ap\u00f3s a execu\u00e7\u00e3o do teste.</p> <p>Exemplos:</p> <ul> <li>Usu\u00e1rio autenticado.</li> <li>Redirecionado para a p\u00e1gina inicial.</li> <li>Dados persistidos no banco de dados.</li> </ul> <p>Boas pr\u00e1ticas:</p> <ul> <li>Verificar condi\u00e7\u00f5es relevantes sem redund\u00e2ncia.</li> <li>Automatizar valida\u00e7\u00f5es para maior precis\u00e3o.</li> <li>Rastrear erros com logs, v\u00eddeos e screenshots.</li> <li>Valida se estado da aplica\u00e7\u00e3o est\u00e1 em conformidade ap\u00f3s a execu\u00e7\u00e3o do procedimento alvo.</li> </ul> <p>Exemplo no Probato:  Ap\u00f3s o teste, capturar logs e validar condi\u00e7\u00f5es de sucesso ou falha.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#caso-de-uso-realizar-login","title":"Caso de Uso: Realizar Login","text":"<p>O caso de uso de realizar login permite que o usu\u00e1rio acesse a aplica\u00e7\u00e3o usando e-mail e senha cadastrados. Inclui os seguintes fluxos:</p> Fluxo Pr\u00e9-condi\u00e7\u00f5es Procedimento P\u00f3s-condi\u00e7\u00f5es Login com sucesso Usu\u00e1rio ativo Preencher e-mail e senha, clicar em acessar Painel principal exibido Usu\u00e1rio n\u00e3o encontrado Usu\u00e1rio n\u00e3o cadastrado Preencher e-mail e senha, clicar em acessar Mensagem de usu\u00e1rio n\u00e3o encontrado Usu\u00e1rio inativo Usu\u00e1rio inativo Preencher e-mail e senha, clicar em acessar Mensagem de usu\u00e1rio inativo exibida Senha incorreta Senha diferente Preencher e-mail e senha errada, clicar em acessar Mensagem de senha incorreta exibida Campos obrigat\u00f3rios Campos de e-mail e senha vazios Clicar em acessar Mensagens de erro exibidas"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#massa-de-dados","title":"Massa de Dados","text":"<p>Massa de dados refere-se ao conjunto de dados usados nos testes para validar diferentes aspectos do sistema.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#objetivo","title":"Objetivo:","text":"<ul> <li>Simular cen\u00e1rios reais.</li> <li>Garantir cobertura de testes com entradas v\u00e1lidas, inv\u00e1lidas e extremas.</li> <li>Identificar falhas causadas por dados inesperados.</li> </ul>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#tipos","title":"Tipos:","text":"<ul> <li>Dados v\u00e1lidos: Entradas que atendem aos requisitos.</li> <li>Dados inv\u00e1lidos: Entradas que n\u00e3o atendem aos requisitos.</li> <li>Dados extremos: Valores nos limites aceit\u00e1veis.</li> <li>Dados massivos: Grandes volumes para avaliar desempenho.</li> </ul> <p>Exemplo de Dados: <pre><code>Dados v\u00e1lidos:\n- Email: user@example.com\n- Senha: Password123!\n\nDados inv\u00e1lidos:\n- Email: user@example\n- Senha: 123\n\nDados extremos:\n- Email: [256 caracteres]\n- Senha: [0 caracteres]\n</code></pre></p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#page-object","title":"Page Object","text":"<p>Page Object \u00e9 um padr\u00e3o de design que organiza e abstrai intera\u00e7\u00f5es com a interface do usu\u00e1rio (UI). Ele encapsula a l\u00f3gica de intera\u00e7\u00e3o, promovendo reutiliza\u00e7\u00e3o, manuten\u00e7\u00e3o e legibilidade.</p>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#estrutura","title":"Estrutura:","text":"<ul> <li>Classe da p\u00e1gina: Representa a p\u00e1gina ou componente da interface.</li> <li>Elementos da interface: Bot\u00f5es, campos e links como atributos.</li> <li>M\u00e9todos para intera\u00e7\u00e3o: L\u00f3gica encapsulada para interagir com os elementos.</li> </ul> <p>Exemplo: LoginPage<pre><code>public class LoginPage {\n\n    @FindBy(id = \"email\") \n    private WebElement emailField;\n    @FindBy(id = \"password\") \n    private WebElement passwordField;\n    @FindBy(id = \"loginButton\") \n    private WebElement loginButton;\n\n    public void loginAs(String email, String password) {\n        emailField.sendKeys(email);\n        passwordField.sendKeys(password);\n        loginButton.click();\n    }\n}\n</code></pre></p> <p>Boas pr\u00e1ticas:</p> <ul> <li>Evitar l\u00f3gica de neg\u00f3cio nos Page Objects.</li> <li>Nomear m\u00e9todos de forma intuitiva.</li> <li>Manter o c\u00f3digo modular e simples.</li> </ul>"},{"location":"pt-BR/documentation/understand-good-pratices-for-testing/#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>Nesta se\u00e7\u00e3o, discutimos os principais elementos que garantem testes bem estruturados e alinhados aos objetivos da automa\u00e7\u00e3o. Aplicar boas pr\u00e1ticas e usar ferramentas como o Probato facilita a implementa\u00e7\u00e3o de testes robustos, escal\u00e1veis e de f\u00e1cil manuten\u00e7\u00e3o. Nos pr\u00f3ximos cap\u00edtulos, exploraremos cada conceito com maior profundidade e exemplos pr\u00e1ticos.</p>"},{"location":"pt-BR/good-practices/","title":"Entendendo Boas Pr\u00e1ticas para Testes","text":"<p>Nesta se\u00e7\u00e3o, antes de implementarmos scripts de teste, alinharemos o entendimento sobre o que s\u00e3o scripts de teste, sua composi\u00e7\u00e3o, estrutura e objetivos. Compreender e aplicar boas pr\u00e1ticas em testes melhora a efici\u00eancia, a confiabilidade e reduz custos no desenvolvimento de software.</p>"},{"location":"pt-BR/good-practices/#o-que-e-uma-suite-de-testes","title":"O que \u00e9 uma suite de testes?","text":"<p>Uma suite de testes \u00e9 um conjunto organizado de casos ou scripts de teste agrupados para validar um ou mais aspectos de um sistema, aplica\u00e7\u00e3o ou funcionalidade. Esses testes podem ser organizados com base em crit\u00e9rios como funcionalidade, prioridade, tipo de teste (funcional, desempenho, seguran\u00e7a, etc.) ou fases do ciclo de vida do software.</p>"},{"location":"pt-BR/good-practices/#objetivo-da-suite","title":"Objetivo da suite","text":"<p>O principal objetivo de uma suite de testes \u00e9 permitir a execu\u00e7\u00e3o coordenada e estruturada de m\u00faltiplos testes, garantindo:</p> <ul> <li>Cobertura abrangente: Valida\u00e7\u00e3o de diferentes cen\u00e1rios de uso e requisitos do sistema.</li> <li>Reutiliza\u00e7\u00e3o: Organiza\u00e7\u00e3o de testes relacionados para facilitar manuten\u00e7\u00e3o e reutiliza\u00e7\u00e3o.</li> <li>Automa\u00e7\u00e3o: Execu\u00e7\u00e3o cont\u00ednua de testes no processo de integra\u00e7\u00e3o ou entrega cont\u00ednua (CI/CD).</li> <li>An\u00e1lise de qualidade: Coletar resultados e identificar \u00e1reas cr\u00edticas no sistema.</li> </ul>"},{"location":"pt-BR/good-practices/#composicao-de-uma-suite","title":"Composi\u00e7\u00e3o de uma suite","text":"<p>Uma suite de testes geralmente inclui:</p> <ul> <li>Casos de teste ou scripts: Cen\u00e1rios espec\u00edficos que devem ser validados.</li> <li>Configura\u00e7\u00f5es gerais: Par\u00e2metros compartilhados, como URLs e credenciais.</li> <li>Dados de teste: Massa de dados compartilhada ou espec\u00edfica para cada teste.</li> <li>Depend\u00eancias: Rela\u00e7\u00f5es entre testes, caso algum dependa de outro.</li> <li>Crit\u00e9rios de sucesso ou falha: Regras para determinar o resultado da suite.</li> </ul>"},{"location":"pt-BR/good-practices/#tipos-de-suites","title":"Tipos de suites","text":"Tipo Objetivo Exemplo Funcional Validar requisitos funcionais Testar login e cadastro Regress\u00e3o Garantir que altera\u00e7\u00f5es n\u00e3o introduzam erros Executar testes ap\u00f3s corre\u00e7\u00f5es Performance Avaliar desempenho sob diferentes condi\u00e7\u00f5es Testar tempo de resposta da API Integra\u00e7\u00e3o Validar comunica\u00e7\u00e3o entre m\u00f3dulos Testar integra\u00e7\u00e3o com servi\u00e7o de pagamento Smoke Verificar funcionalidade b\u00e1sica Testar carregamento da p\u00e1gina inicial Explorat\u00f3ria Descobrir comportamentos inesperados Testar novos fluxos sem roteiro fixo"},{"location":"pt-BR/good-practices/#estrutura-de-um-script-de-teste","title":"Estrutura de um Script de Teste","text":"<p>Os scripts de teste s\u00e3o compostos por pr\u00e9-condi\u00e7\u00f5es, procedimentos e p\u00f3s-condi\u00e7\u00f5es. Essa estrutura garante testes organizados e resultados verific\u00e1veis.</p>"},{"location":"pt-BR/good-practices/#pre-condicoes","title":"Pr\u00e9-Condi\u00e7\u00f5es","text":"<p>Condi\u00e7\u00f5es ou estados que precisam ser estabelecidos antes que o teste seja executado.</p> <p>Exemplos: </p> <ul> <li>Ambiente configurado (servidor em execu\u00e7\u00e3o).</li> <li>Dados de teste carregados.</li> <li>APIs externas dispon\u00edveis.</li> </ul> <p>Boas pr\u00e1ticas:</p> <ul> <li>Automatizar a configura\u00e7\u00e3o das pr\u00e9-condi\u00e7\u00f5es.</li> <li>Definir depend\u00eancias e garantir estados reproduz\u00edveis.</li> </ul> <p>Exemplo no Probato:  Pr\u00e9-condi\u00e7\u00e3o para alterar o estado do banco de dados usando o executor SQL antes do teste.</p>"},{"location":"pt-BR/good-practices/#procedimentos","title":"Procedimentos","text":"<p>Passos que comp\u00f5em o teste, simulando a\u00e7\u00f5es do usu\u00e1rio ou intera\u00e7\u00f5es com o sistema.</p> <p>Exemplos:</p> <ol> <li>Navegar para a p\u00e1gina de login.</li> <li>Preencher campo 'E-mail' com <code>user@probato.org</code>.</li> <li>Preencher campo 'Senha' com <code>p@ssword</code>.</li> <li>Acionar a\u00e7\u00e3o 'Acessar'.</li> </ol> <p>Boas pr\u00e1ticas:</p> <ul> <li>Cada passo deve ser at\u00f4mico e focar em uma \u00fanica a\u00e7\u00e3o.</li> <li>Documentar a\u00e7\u00f5es de forma clara e acess\u00edvel.</li> <li>Incluir checkpoints para validar estados intermedi\u00e1rios.</li> </ul> <p>Exemplo no Probato:  Procedimentos organizados em etapas bem definidas, com logs detalhados de cada a\u00e7\u00e3o.</p>"},{"location":"pt-BR/good-practices/#pos-condicoes","title":"P\u00f3s-Condi\u00e7\u00f5es","text":"<p>Resultados esperados ou estados finais ap\u00f3s a execu\u00e7\u00e3o do teste.</p> <p>Exemplos:</p> <ul> <li>Usu\u00e1rio autenticado.</li> <li>Redirecionado para a p\u00e1gina inicial.</li> <li>Dados persistidos no banco de dados.</li> </ul> <p>Boas pr\u00e1ticas:</p> <ul> <li>Verificar condi\u00e7\u00f5es relevantes sem redund\u00e2ncia.</li> <li>Automatizar valida\u00e7\u00f5es para maior precis\u00e3o.</li> <li>Rastrear erros com logs, v\u00eddeos e screenshots.</li> <li>Valida se estado da aplica\u00e7\u00e3o est\u00e1 em conformidade ap\u00f3s a execu\u00e7\u00e3o do procedimento alvo.</li> </ul> <p>Exemplo no Probato:  Ap\u00f3s o teste, capturar logs e validar condi\u00e7\u00f5es de sucesso ou falha.</p>"},{"location":"pt-BR/good-practices/#caso-de-uso-realizar-login","title":"Caso de Uso: Realizar Login","text":"<p>O caso de uso de realizar login permite que o usu\u00e1rio acesse a aplica\u00e7\u00e3o usando e-mail e senha cadastrados. Inclui os seguintes fluxos:</p> Fluxo Pr\u00e9-condi\u00e7\u00f5es Procedimento P\u00f3s-condi\u00e7\u00f5es Login com sucesso Usu\u00e1rio ativo Preencher e-mail e senha, clicar em acessar Painel principal exibido Usu\u00e1rio n\u00e3o encontrado Usu\u00e1rio n\u00e3o cadastrado Preencher e-mail e senha, clicar em acessar Mensagem de usu\u00e1rio n\u00e3o encontrado Usu\u00e1rio inativo Usu\u00e1rio inativo Preencher e-mail e senha, clicar em acessar Mensagem de usu\u00e1rio inativo exibida Senha incorreta Senha diferente Preencher e-mail e senha errada, clicar em acessar Mensagem de senha incorreta exibida Campos obrigat\u00f3rios Campos de e-mail e senha vazios Clicar em acessar Mensagens de erro exibidas"},{"location":"pt-BR/good-practices/#massa-de-dados","title":"Massa de Dados","text":"<p>Massa de dados refere-se ao conjunto de dados usados nos testes para validar diferentes aspectos do sistema.</p>"},{"location":"pt-BR/good-practices/#objetivo","title":"Objetivo:","text":"<ul> <li>Simular cen\u00e1rios reais.</li> <li>Garantir cobertura de testes com entradas v\u00e1lidas, inv\u00e1lidas e extremas.</li> <li>Identificar falhas causadas por dados inesperados.</li> </ul>"},{"location":"pt-BR/good-practices/#tipos","title":"Tipos:","text":"<ul> <li>Dados v\u00e1lidos: Entradas que atendem aos requisitos.</li> <li>Dados inv\u00e1lidos: Entradas que n\u00e3o atendem aos requisitos.</li> <li>Dados extremos: Valores nos limites aceit\u00e1veis.</li> <li>Dados massivos: Grandes volumes para avaliar desempenho.</li> </ul> <p>Exemplo de Dados: <pre><code>Dados v\u00e1lidos:\n- Email: user@example.com\n- Senha: Password123!\n\nDados inv\u00e1lidos:\n- Email: user@example\n- Senha: 123\n\nDados extremos:\n- Email: [256 caracteres]\n- Senha: [0 caracteres]\n</code></pre></p>"},{"location":"pt-BR/good-practices/#page-object","title":"Page Object","text":"<p>Page Object \u00e9 um padr\u00e3o de design que organiza e abstrai intera\u00e7\u00f5es com a interface do usu\u00e1rio (UI). Ele encapsula a l\u00f3gica de intera\u00e7\u00e3o, promovendo reutiliza\u00e7\u00e3o, manuten\u00e7\u00e3o e legibilidade.</p>"},{"location":"pt-BR/good-practices/#estrutura","title":"Estrutura:","text":"<ul> <li>Classe da p\u00e1gina: Representa a p\u00e1gina ou componente da interface.</li> <li>Elementos da interface: Bot\u00f5es, campos e links como atributos.</li> <li>M\u00e9todos para intera\u00e7\u00e3o: L\u00f3gica encapsulada para interagir com os elementos.</li> </ul> <p>Exemplo: LoginPage<pre><code>public class LoginPage {\n\n    @FindBy(xpath = \"//*[@id=\\\"email\\\"]\")\n    private WebElement emailInput;\n\n    @FindBy(xpath = \"//*[@id=\\\"password\\\"]\")\n    private WebElement passwordInput;\n\n    @FindBy(xpath = \"//*[@id=\\\"login-btn\\\"]\")\n    private WebElement accessButton;\n\n    public void fillEmail(String email) {\n        emailInput.sendKeys(email);\n    }\n\n    public void fillPassword(String password) {\n        passwordInput.sendKeys(password);\n    }\n\n    public void pressAccessButton() {\n        accessButton.click();\n    }\n}\n</code></pre></p> <p>Boas pr\u00e1ticas:</p> <ul> <li>Evitar l\u00f3gica de neg\u00f3cio nos Page Objects.</li> <li>Nomear m\u00e9todos de forma intuitiva.</li> <li>Manter o c\u00f3digo modular e simples.</li> </ul>"},{"location":"pt-BR/good-practices/#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>Nesta se\u00e7\u00e3o, discutimos os principais elementos que garantem testes bem estruturados e alinhados aos objetivos da automa\u00e7\u00e3o. Aplicar boas pr\u00e1ticas e usar ferramentas como o Probato para facilita a implementa\u00e7\u00e3o de testes robustos, escal\u00e1veis e de f\u00e1cil manuten\u00e7\u00e3o. Nos pr\u00f3ximos cap\u00edtulos, exploraremos cada conceito com maior profundidade em exemplos pr\u00e1ticos.</p>"},{"location":"pt-BR/good-practices/#referencias-gerais","title":"Refer\u00eancias Gerais:","text":"<ul> <li>ISTQB: Fundamentos de Testes de Software</li> <li>Selenium: Guia Oficial Selenium</li> <li>Selenium: Page Object Design Pattern</li> <li>OWASP: Boas Pr\u00e1ticas de Seguran\u00e7a para Dados</li> <li>CI/CD: Guia Pr\u00e1tico de Integra\u00e7\u00e3o Cont\u00ednua</li> </ul>"},{"location":"pt-BR/quick-guide/","title":"Guia do Usu\u00e1rio","text":"<p>Bem-vindo ao guia r\u00e1pido do Probato! Este documento foi criado para ajud\u00e1-lo a configurar, utilizar e personalizar este framework de automa\u00e7\u00e3o de testes. Aqui, voc\u00ea encontrar\u00e1 exemplos pr\u00e1ticos e orienta\u00e7\u00f5es claras para come\u00e7ar sua jornada com o Probato.</p>"},{"location":"pt-BR/quick-guide/#como-usar-este-guia","title":"Como usar este guia","text":"<p>Este guia est\u00e1 dividido em quatro cap\u00edtulos, cada um cobrindo um aspecto essencial do uso do Probato:</p> <ul> <li> <p> Configura\u00e7\u00e3o de Ambiente</p> <p>Aprenda a instalar e configurar as ferramentas necess\u00e1rias para come\u00e7ar a usar o Probato, incluindo JDK, Maven e IDEs.</p> <p> Ir</p> </li> <li> <p> Cria\u00e7\u00e3o e Configura\u00e7\u00e3o do Projeto</p> <p>Descubra como criar e configurar um projeto base, estruturando diret\u00f3rios, adicionando depend\u00eancias e configurando o <code>configuration.yml</code>.</p> <p> Ir</p> </li> <li> <p> Implementa\u00e7\u00e3o de Roteiros B\u00e1sicos</p> <p>Entenda como criar su\u00edtes, scripts e procedimentos para automatizar casos de uso simples no Probato.</p> <p> Ir</p> </li> <li> <p> Execu\u00e7\u00e3o e An\u00e1lise de Resultados</p> <p>Veja como executar o projeto, interpretar logs e validar resultados para garantir a qualidade do seu software.</p> <p> Ir</p> </li> </ul>"},{"location":"pt-BR/quick-guide/#fluxo-de-teste-no-probato","title":"Fluxo de Teste no Probato","text":"<p>Abaixo est\u00e1 o fluxo t\u00edpico de execu\u00e7\u00e3o de testes com o Probato:</p> <p>Testing Workflow</p> <pre><code>graph LR\n  A[Implementar Roteiros] --&gt; B[Executar Suites];\n  B --&gt; C{Integrou?};\n  C --&gt; |Yes| D[Probato Manager];\n  C --&gt; |No| B;\n  D --&gt; E[Analisar Resultados];</code></pre> <p>Descri\u00e7\u00e3o do Fluxo:</p> <ol> <li>Implementar Roteiros: Desenvolva su\u00edtes, scripts e procedimentos para cobrir os casos de teste.</li> <li>Executar Suites: Execute os testes automatizados e colete os resultados.</li> <li>Analisar Resultados: Verifique logs, relat\u00f3rios e evid\u00eancias geradas para identificar falhas ou validar o comportamento esperado.</li> </ol>"},{"location":"pt-BR/quick-guide/#pronto-para-comecar","title":"Pronto para come\u00e7ar?","text":"<p>Siga para o primeiro cap\u00edtulo: Configura\u00e7\u00e3o de Ambiente.</p>"},{"location":"pt-BR/quick-guide/configure-environment/","title":"Configura\u00e7\u00e3o de Ambiente","text":"<p>Configurar corretamente o ambiente de desenvolvimento \u00e9 o primeiro passo para aproveitar todo o potencial do Probato, um framework poderoso para automa\u00e7\u00e3o de testes. Este guia detalha os passos necess\u00e1rios para configurar ferramentas essenciais, como JDK, Maven e uma IDE, garantindo um ambiente pronto para criar e executar testes automatizados.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#instalar-o-jdk","title":"Instalar o JDK","text":"<p>O Java Development Kit (JDK) \u00e9 necess\u00e1rio para compilar e executar o c\u00f3digo Java utilizado pelo Probato. Certifique-se de instalar a vers\u00e3o 11 ou superior.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#baixar-o-jdk","title":"Baixar o JDK","text":"<ol> <li>Acesse um dos links abaixo para fazer o download do JDK:<ul> <li>Oracle JDK</li> <li>OpenJDK</li> <li>Adoptium</li> <li>Amazon Corretto</li> </ul> </li> </ol> <p>Warning</p> <p>Baixe e instale a vers\u00e3o 11 ou superior.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#configurar-variaveis-de-ambiente","title":"Configurar Vari\u00e1veis de Ambiente","text":"<ol> <li> <p>No Windows:</p> <ul> <li>Acesse \"Editar vari\u00e1veis de ambiente do sistema\".</li> <li>Em Vari\u00e1veis de Sistema, clique em Novo:<ul> <li>Nome: <code>JAVA_HOME</code></li> <li>Valor: <code>C:\\dev\\java\\jdk-11</code></li> </ul> </li> <li>Edite a vari\u00e1vel <code>Path</code> e adicione: <code>%JAVA_HOME%\\bin</code></li> </ul> </li> <li> <p>No Mac/Linux:</p> <ul> <li>Adicione as seguintes linhas ao arquivo <code>~/.bash_profile</code> ou <code>~/.zshrc</code>:   <pre><code>export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH\n</code></pre></li> </ul> </li> <li> <p>Valide a instala\u00e7\u00e3o:    <pre><code>java --version\n</code></pre>    A sa\u00edda esperada:    <pre><code>java version \"11.0.X\"\nJava(TM) SE Runtime Environment (build 11.0.X)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0.X)\n</code></pre>    \ud83c\udf89 JDK instalado com sucesso!</p> </li> </ol>"},{"location":"pt-BR/quick-guide/configure-environment/#instalar-o-maven","title":"Instalar o Maven","text":"<p>O Maven \u00e9 usado para gerenciar as depend\u00eancias do projeto e automatizar processos de build.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#baixar-e-instalar","title":"Baixar e Instalar","text":"<ol> <li>Acesse o site oficial do Apache Maven.</li> <li>Baixe o arquivo ZIP e extraia para <code>C:\\dev\\maven</code> (Windows) ou <code>/usr/local/maven</code> (Mac/Linux).</li> </ol>"},{"location":"pt-BR/quick-guide/configure-environment/#configurar-variaveis-de-ambiente_1","title":"Configurar Vari\u00e1veis de Ambiente","text":"<ol> <li> <p>No Windows:</p> <ul> <li>Adicione uma nova vari\u00e1vel:<ul> <li>Nome: <code>MAVEN_HOME</code></li> <li>Valor: <code>C:\\dev\\maven</code></li> </ul> </li> <li>Inclua <code>%MAVEN_HOME%\\bin</code> no <code>Path</code>.</li> </ul> </li> <li> <p>No Mac/Linux:</p> <ul> <li>Adicione ao arquivo <code>~/.bash_profile</code> ou <code>~/.zshrc</code>:   <pre><code>export MAVEN_HOME=/usr/local/maven\nexport PATH=$MAVEN_HOME/bin:$PATH\n</code></pre></li> </ul> </li> <li> <p>Valide a instala\u00e7\u00e3o:    <pre><code>mvn -version\n</code></pre>    A sa\u00edda esperada:    <pre><code>Apache Maven 3.X.X\nMaven home: /usr/local/maven\nJava version: 11.0.X, vendor: Oracle Corporation\nOS name: \"mac os x\", version: \"10.15.7\", arch: \"x86_64\"\n</code></pre>    \ud83c\udf89 Maven instalado com sucesso!</p> </li> </ol>"},{"location":"pt-BR/quick-guide/configure-environment/#escolher-uma-ide","title":"Escolher uma IDE","text":"<p>Uma IDE (Ambiente de Desenvolvimento Integrado) facilita a escrita, execu\u00e7\u00e3o e depura\u00e7\u00e3o de c\u00f3digo Java. Aqui est\u00e3o algumas op\u00e7\u00f5es populares:</p> IDE Vantagem Principal Uso Recomendado  Eclipse Leve e gratuito Para iniciantes  IntelliJ Recursos avan\u00e7ados e plugins ricos Para desenvolvedores avan\u00e7ados  VS Code Moderno e extens\u00edvel Para projetos Java simples <p>Note</p> <p>Escolha a IDE que melhor atende \u00e0s suas necessidades. Certifique-se de instalar os plugins necess\u00e1rios para suporte ao Java.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#checklist-final","title":"Checklist Final","text":"<p>Antes de prosseguir para a cria\u00e7\u00e3o do projeto, verifique se:</p> <ul> <li>\u2705 JDK instalado e configurado (<code>java --version</code> funcionando).</li> <li>\u2705 Maven instalado e configurado (<code>mvn -version</code> funcionando).</li> <li>\u2705 IDE instalada e pronta para uso.</li> </ul> <p>\ud83c\udf89 Seu ambiente est\u00e1 configurado! Agora voc\u00ea est\u00e1 pronto para criar projetos no Probato.</p>"},{"location":"pt-BR/quick-guide/configure-environment/#pronto-para-continuar","title":"Pronto para continuar?","text":"<p>Siga para o pr\u00f3ximo cap\u00edtulo: Cria\u00e7\u00e3o e Configura\u00e7\u00e3o do Projeto.</p>"},{"location":"pt-BR/quick-guide/configure-project/","title":"Cria\u00e7\u00e3o e Configura\u00e7\u00e3o do Projeto","text":"<p>Nesta se\u00e7\u00e3o, ser\u00e1 detalhado como criar e configurar um projeto Maven para utilizar o Probato, garantindo uma estrutura base eficiente para automa\u00e7\u00e3o de testes. O objetivo \u00e9 preparar um ambiente com depend\u00eancias organizadas e configura\u00e7\u00f5es essenciais para rodar testes automatizados de forma eficaz.</p>"},{"location":"pt-BR/quick-guide/configure-project/#criar-um-projeto-maven","title":"Criar um Projeto Maven","text":""},{"location":"pt-BR/quick-guide/configure-project/#usando-o-terminal-ou-prompt-de-comando","title":"Usando o terminal ou prompt de comando","text":"<ol> <li>Abra o terminal ou prompt de comando.</li> <li>Navegue at\u00e9 o diret\u00f3rio onde deseja criar o projeto.</li> <li> <p>Execute o comando abaixo:     <pre><code>mvn archetype:generate -DgroupId=com.example.automation -DartifactId=my-project-automation -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre></p> <p>Par\u00e2metros:</p> <ul> <li>groupId: Identificador do grupo da sua organiza\u00e7\u00e3o, geralmente relacionado ao dom\u00ednio (ex.: <code>com.example.automation</code>).</li> <li>artifactId: Nome do projeto de automa\u00e7\u00e3o de testes (ex.: <code>my-project-automation</code>).</li> </ul> <p>Note</p> <p>Caso prefira, a cria\u00e7\u00e3o do projeto tamb\u00e9m pode ser feita diretamente pela sua IDE.</p> </li> <li> <p>Ap\u00f3s a execu\u00e7\u00e3o, a seguinte estrutura ser\u00e1 criada:     <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u2514\u2500\u2500 java/\n\u2502   \u2502       \u2514\u2500\u2500 com/example/automation/App.java\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/automation/AppTest.java\n\u2514\u2500\u2500 pom.xml\n</code></pre></p> </li> </ol>"},{"location":"pt-BR/quick-guide/configure-project/#sobre-o-maven-archetype","title":"Sobre o Maven Archetype","text":"<p>O comando <code>mvn archetype:generate</code> utiliza o Maven Archetype para gerar um projeto com uma estrutura inicial padr\u00e3o. Ele \u00e9 \u00fatil para criar projetos rapidamente, incluindo diret\u00f3rios e arquivos b\u00e1sicos.</p>"},{"location":"pt-BR/quick-guide/configure-project/#configurar-a-estrutura-de-pacotes-e-pastas","title":"Configurar a Estrutura de Pacotes e Pastas","text":"<ol> <li>Abra o diret\u00f3rio <code>src/main/java/</code>.</li> <li>Remova o pacote <code>com.*</code> gerado automaticamente.</li> <li>No pacote <code>com.example.automation</code> em <code>src/test/java/</code>, remova o arquivo <code>AppTest.java</code>.</li> <li>Crie o diret\u00f3rio <code>src/test/resources/</code> e adicione um arquivo chamado <code>configuration.yml</code>.</li> </ol> <p>A estrutura do projeto ficar\u00e1 assim:</p> <pre><code>my-project-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       \u2502   \u2514\u2500\u2500 com/example/automation/\n\u2502       \u2502       \u251c\u2500\u2500 model/\n\u2502       \u2502       \u251c\u2500\u2500 page/\n\u2502       \u2502       \u2514\u2500\u2500 usecase/\n\u2502       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n\u2502           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre> <p>Descri\u00e7\u00e3o das pastas:</p> <ul> <li><code>src/test/java/</code>: Local onde ser\u00e1 implementada a automa\u00e7\u00e3o dos testes.</li> <li> <p><code>src/test/resources/</code>: Pasta para armazenar configura\u00e7\u00f5es, massas de dados, scripts SQL, entre outros arquivos necess\u00e1rios para os testes.</p> <p>Note</p> <p>O arquivo <code>configuration.yml</code> ser\u00e1 configurado em detalhes em se\u00e7\u00f5es futuras.</p> </li> </ul>"},{"location":"pt-BR/quick-guide/configure-project/#adicionar-dependencias-ao-maven","title":"Adicionar Depend\u00eancias ao Maven","text":"<ol> <li>Abra o arquivo <code>pom.xml</code> localizado no diret\u00f3rio raiz do projeto.</li> <li>Adicione as seguintes depend\u00eancias:     pom.xml<pre><code>&lt;project \n    xmlns=\"http://maven.apache.org/POM/4.0.0\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example.automation&lt;/groupId&gt;\n    &lt;artifactId&gt;my-project-automation&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;probato.version&gt;0.1.0&lt;/probato.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Depend\u00eancias do Probato --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-api&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-browser&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-dataset-csv&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-database-sql&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-record&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.probato&lt;/groupId&gt;\n            &lt;artifactId&gt;probato-manager&lt;/artifactId&gt;\n            &lt;version&gt;${probato.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do bando de dados da aplica\u00e7\u00e3o alvo dos testes --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;version&gt;42.7.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Depend\u00eancia do JUnit 5 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;5.9.3&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.0.0-M7&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;includes&gt;\n                        &lt;include&gt;**/*.java&lt;/include&gt;\n                    &lt;/includes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/configure-project/#descricao-das-dependencias","title":"Descri\u00e7\u00e3o das Depend\u00eancias","text":"<ul> <li><code>probato-api</code>, <code>probato-browser</code>, <code>probato-dataset-csv</code>, <code>probato-database-sql</code>, <code>probato-record</code>, <code>probato-manager</code>  : Oferece acesso \u00e0s funcionalidades do Probato.</li> <li><code>postgresql</code>: Necess\u00e1rio para conex\u00e3o com banco de dados, ent\u00e3o deve ser adicionada a depend\u00eancia relativa ao banco de dados da aplica\u00e7\u00e3o alvo dos testes.</li> <li> <p><code>junit-jupiter</code>: Necess\u00e1rio para executar os testes com o JUnit 5.</p> <p>Note</p> <p>Outras depend\u00eancias ser\u00e3o adicionadas conforme avan\u00e7amos no tutorial.</p> </li> </ul>"},{"location":"pt-BR/quick-guide/configure-project/#adicionando-e-configurando-o-probato","title":"Adicionando e configurando o Probato","text":"<ol> <li>No arquivo <code>configuration.yml</code> adicionar as configura\u00e7\u00f5es abaixo configuration.yml<pre><code>execution:\n\n   target:\n      url: http://localhost:8099\n      version: 0.0.0\n\n   delay:\n      waitingTimeout: 5000\n      actionInterval: 500\n\n   video:\n      enabled: true\n      frameRate: 1000\n      quality: MEDIUM\n\n   manager:\n      submit: true\n      url: http://localhost:8080\n      token: [TOKEN]\n\nbrowsers:\n\n-  type: CHROME\n   headless: false\n   dimension:\n      mode: FULLSCREEN\n\n-  type: FIREFOX\n   headless: false\n   dimension:\n      mode: MAXIMIZED\n\n-  type: EDGE\n   headless: false\n   dimension:\n      mode: CUSTOM\n      width: 1256\n      height: 1018\n\ndatasources:\n\n   probato:\n      url: jdbc:postgresql://localhost:5444/testano\n      driver: org.postgresql.Driver\n      username: root\n      password: root\n</code></pre> Propriedades:<ul> <li>execution.delay.waitingTimeout:  Tempo de espera m\u00e1ximo para execu\u00e7\u00e3o de a\u00e7\u00e3o.</li> <li>execution.delay.actionInterval:  Intervalo de tempo entre a\u00e7\u00f5es a serem executadas.</li> <li>browsers.[*].type:  Informa qual o navegador ser\u00e1 executado.</li> <li>browsers.[*].headless:  Por padr\u00e3o \u00e9 <code>false</code>. Se <code>true</code> a janela do browser ficar\u00e1 invis\u00edvel durante a execu\u00e7\u00e3o.</li> <li>browsers.[*].dimension.mode:  Por padr\u00e3o \u00e9 definido como <code>MAXIMIZED</code>, tem valores poss\u00edveis <code>FULLSCREEN</code>, <code>MAXIMIZED</code> e <code>CUSTOM</code>. Se informado <code>CUSTOM</code>, as propriedades <code>width</code> e <code>height</code> ser\u00e3o obrigat\u00f3rias.</li> <li>browsers.[*].dimension.width: Informa qual a dimens\u00e3o de largura o navegador ser\u00e1 executado.</li> <li>browsers.[*].dimension.height:  Informa qual a dimens\u00e3o de altura o navegador ser\u00e1 executado.</li> <li>datasources.[nome]:  Informa o nome do recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].url:  Informa a URL do recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].driver:  Informa o driver de conex\u00e3o para o recurso que ser\u00e1 acessado.</li> <li>datasources.[nome].schema:  Informa o schema para o recurso que ser\u00e1 acessado.</li> <li>datasources.[*].dimension.width: Informa o usu\u00e1rio para o recurso que ser\u00e1 acessado.</li> <li>datasources.[*].dimension.height:  Informa a senha para o recurso que ser\u00e1 acessado.</li> </ul> </li> </ol>"},{"location":"pt-BR/quick-guide/configure-project/#checklist-final","title":"Checklist Final","text":"<p>Antes de seguir para a pr\u00f3xima se\u00e7\u00e3o, confirme se tudo foi configurado:</p> <ul> <li>\u2705 Projeto Maven criado (<code>my-project-automation</code>).</li> <li>\u2705 Estrutura de pastas ajustada conforme o exemplo.</li> <li>\u2705 Arquivo <code>configuration.yml</code> criado em <code>src/test/resources/</code>.</li> <li>\u2705 Depend\u00eancias adicionadas ao arquivo <code>pom.xml</code>.</li> <li>\u2705 Configura\u00e7\u00f5es adicionadas ao arquivo <code>configuration.yml</code>.</li> </ul> <p>\ud83c\udf89 Seu projeto est\u00e1 pronto para come\u00e7ar a automa\u00e7\u00e3o de testes com o Probato!</p>"},{"location":"pt-BR/quick-guide/configure-project/#pronto-para-continuar","title":"Pronto para continuar?","text":"<p>Siga para o pr\u00f3ximo cap\u00edtulo: Implementa\u00e7\u00e3o de Roteiros B\u00e1sicos.</p>"},{"location":"pt-BR/quick-guide/execution-result-analysis/","title":"Execu\u00e7\u00e3o e An\u00e1lise de Resultados","text":""},{"location":"pt-BR/quick-guide/execution-result-analysis/#executando-os-testes-automatizados","title":"Executando os Testes Automatizados","text":"<p>Ap\u00f3s a implementa\u00e7\u00e3o do roteiro de testes utilizando o Probato, o pr\u00f3ximo passo \u00e9 executar os testes automatizados para validar as funcionalidades da aplica\u00e7\u00e3o. A execu\u00e7\u00e3o pode ser realizada de forma eficiente seguindo as etapas abaixo:</p> <ol> <li> <p>Execu\u00e7\u00e3o via IDE:</p> <ul> <li>Utilize a IDE para iniciar a execu\u00e7\u00e3o dos testes como JUnit.</li> <li>Caso necess\u00e1rio, ajuste os arquivos de configura\u00e7\u00e3o (<code>configuration.yml</code>) para personalizar a execu\u00e7\u00e3o, como tempos de espera, navegador utilizado, ou ambiente alvo (desenvolvimento, homologa\u00e7\u00e3o, produ\u00e7\u00e3o).</li> </ul> <p></p> </li> <li> <p>Execu\u00e7\u00e3o via Terminal:</p> <ul> <li>Utilize comandos como <code>mvn test</code> (Maven) ou <code>gradle test</code> (Gradle) para iniciar a execu\u00e7\u00e3o dos testes.</li> <li>Monitore o log gerado durante a execu\u00e7\u00e3o para identificar erros ou comportamentos inesperados.</li> </ul> <p></p> </li> <li> <p>Execu\u00e7\u00e3o em Pipelines CI/CD:</p> <ul> <li>Integre os testes em pipelines de integra\u00e7\u00e3o cont\u00ednua, como Jenkins, GitHub Actions ou GitLab CI, para garantir a valida\u00e7\u00e3o automatizada a cada altera\u00e7\u00e3o no c\u00f3digo.</li> <li>Configure notifica\u00e7\u00f5es para alertar a equipe sobre falhas nos testes.</li> </ul> <p>Note</p> <p>A execu\u00e7\u00e3o \u00e9 semelhante ao procedimento pelo CMD.</p> <p>Warning</p> <p>O ambiente de execu\u00e7\u00e3o precisa ter todos os recursos necess\u00e1rios instalados.</p> </li> </ol>"},{"location":"pt-BR/quick-guide/execution-result-analysis/#coleta-de-resultados","title":"Coleta de Resultados","text":"<p>Durante a execu\u00e7\u00e3o dos testes, o Probato coleta dados relevantes para an\u00e1lise, como:</p> <ul> <li>Passos executados:         Cada a\u00e7\u00e3o realizada pelo script \u00e9 registrada, proporcionando um hist\u00f3rico detalhado da execu\u00e7\u00e3o.</li> <li>Capturas de tela e v\u00eddeos:       Em caso de falha, capturas de tela e v\u00eddeos do momento da execu\u00e7\u00e3o s\u00e3o gerados automaticamente para facilitar a an\u00e1lise.</li> <li>Resultados de valida\u00e7\u00e3o:         Informa\u00e7\u00f5es sobre quais testes foram aprovados ou falharam, com detalhes sobre os erros encontrados.</li> <li>Tempo de execu\u00e7\u00e3o:         Relat\u00f3rios indicam o tempo total para cada teste, auxiliando na identifica\u00e7\u00e3o de gargalos de desempenho.</li> <li> <p>Logs SQL:      Todos os comandos SQL executados durante o teste s\u00e3o registrados, permitindo a auditoria das altera\u00e7\u00f5es feitas no banco de dados.</p> <p>Note</p> <p>Esses dados s\u00e3o armazenados em disco temporariamente durante a execu\u00e7\u00e3o dos testes. Ao finalizar cada um dos roteiros, os dados ser\u00e3o submetidos para o Probato Manager.</p> </li> </ul>"},{"location":"pt-BR/quick-guide/execution-result-analysis/#analise-de-resultados","title":"An\u00e1lise de Resultados","text":"<p>Ap\u00f3s a execu\u00e7\u00e3o, \u00e9 essencial realizar uma an\u00e1lise detalhada para identificar falhas e melhorar a qualidade do sistema. O Probato possui uma aplica\u00e7\u00e3o dedicada com essa finalidade, o Probato Manager. \u00c9 atrav\u00e9s dela que os dados coletados durante a execu\u00e7\u00e3o dos testes s\u00e3o armazenados e podem ser observados e analisados. As informa\u00e7\u00f5es de qualidade aferidas tamb\u00e9m est\u00e3o dispon\u00edveis nessa ferramenta.</p> <ol> <li> <p>M\u00e9tricas de qualidade:</p> <ul> <li>O Probato Manager fornece, de forma gr\u00e1fica, m\u00e9tricas de qualidade das aplica\u00e7\u00f5es alvo dos testes ao longo de sua evolu\u00e7\u00e3o. Tamb\u00e9m \u00e9 poss\u00edvel visualizar essas mesmas m\u00e9tricas para uma aplica\u00e7\u00e3o espec\u00edfica.</li> <li>O Probato Manager fornece m\u00e9tricas diversas, como quantidade de projetos analisados, colaboradores, su\u00edtes, scripts, execu\u00e7\u00f5es, complexidade m\u00e9dia dos produtos e hist\u00f3rico de qualidade ao longo do tempo.</li> </ul> <p></p> </li> <li> <p>Relat\u00f3rios Detalhados:</p> <ul> <li>Utilize relat\u00f3rios gerados pelo Probato Manager para visualizar o status de cada teste, erros encontrados e evid\u00eancias coletadas.</li> <li>Verifique a correla\u00e7\u00e3o entre os erros reportados e os logs da aplica\u00e7\u00e3o para identificar a causa raiz.</li> </ul> <p></p> </li> <li> <p>Valida\u00e7\u00e3o de Requisitos:</p> <ul> <li>Certifique-se de que todos os cen\u00e1rios definidos nos requisitos foram validados.</li> <li>Atualize os casos de teste conforme novos requisitos ou mudan\u00e7as na aplica\u00e7\u00e3o.</li> </ul> <p></p> </li> <li> <p>Acompanhamento de Falhas:</p> <ul> <li>Para cada falha identificada, crie tickets em ferramentas de gerenciamento de projetos, como Jira, Trello ou GitLab.</li> <li>Priorize a corre\u00e7\u00e3o das falhas mais cr\u00edticas, garantindo que os erros sejam resolvidos antes de prosseguir com novas implementa\u00e7\u00f5es.</li> </ul> <p></p> </li> </ol>"},{"location":"pt-BR/quick-guide/execution-result-analysis/#checklist-final","title":"Checklist Final","text":"<p>Antes de concluir a an\u00e1lise de resultados no Probato Manager, verifique se:</p> <ul> <li>\u2705 Todos os logs relevantes foram analisados e correlacionados com os erros reportados.</li> <li>\u2705 Todos os casos de teste falhos foram documentados em ferramentas de gerenciamento de projetos.</li> <li>\u2705 Relat\u00f3rios foram gerados e enviados para as partes interessadas.</li> <li>\u2705 O ambiente de execu\u00e7\u00e3o foi revisado para garantir consist\u00eancia nas pr\u00f3ximas execu\u00e7\u00f5es.</li> </ul> <p>\ud83c\udf89 Pronto para aprimorar ainda mais a qualidade do seu sistema!</p>"},{"location":"pt-BR/quick-guide/implement-script/","title":"Implementa\u00e7\u00e3o de roteiro b\u00e1sico","text":"<p>Nessa se\u00e7\u00e3o ser\u00e1 implementado um script de testes b\u00e1sico. O Probato adota uma estrutura modular que inclui scripts, procedures, page objects e test suites. Para exemplificar a automa\u00e7\u00e3o de uma funcionalidade real, seguiremos com o desenvolvimento da automa\u00e7\u00e3o da aplica\u00e7\u00e3o Probato Manager. O Probato Manager possui como tela principal a p\u00e1gina de login, ent\u00e3o partiremos desta funcionalidade para o desenvolvimento dos testes automatizados: Efetuar Login</p>"},{"location":"pt-BR/quick-guide/implement-script/#estrutura-base-da-aplicacao","title":"Estrutura base da aplica\u00e7\u00e3o","text":"<p>Vamos partir do princ\u00edpio que o projeto possui a seguinte estrutura abaixo:</p> Estrutura<pre><code>probato-manager-automation/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500  test/\n\u2502       \u251c\u2500\u2500 java/\n\u2502       |   \u2514\u2500\u2500 org.probato.manager.automation\n\u2502       |       \u251c\u2500\u2500 model\n\u2502       |       \u251c\u2500\u2500 page\n\u2502       |       \u2514\u2500\u2500 usecase\n|       \u2514\u2500\u2500 resources/\n\u2502           \u251c\u2500\u2500 dataset/\n\u2502           \u251c\u2500\u2500 sql/\n|           \u2514\u2500\u2500 configuration.yml\n\u2514\u2500\u2500 pom.xml\n</code></pre>"},{"location":"pt-BR/quick-guide/implement-script/#implementando-a-classe-suite","title":"Implementando a classe Suite","text":"<ol> <li>No pacote <code>org.probato.manager.usecase</code> vamos criar o novo pacote <code>UC01</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar a classe <code>UC01_PerformLogin.java</code>.</li> <li>Na classe <code>UC01_PerformLogin.java</code> vamos implementar o c\u00f3digo abaixo. UC01_PerformLogin.java<pre><code>@SQL(\n    datasource = \"probato\", \n    scriptPath = { \"sql/init/init.sql\" })\n@Suite(\n    code = \"UC01\", \n    name = \"Perform login\", \n    description = \"This feature aims to allow the user to login to this application\")\nclass UC01_PerformLogin implements TestSuite {\n\n    @TestCase\n    private UC01TC01_PerformLoginSuccessfully uc01tc01;\n\n  // Adicioanr outros casos de teste para suite\n\n}\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#implementando-a-classe-script","title":"Implementando a classe Script","text":"<ol> <li>No pacote <code>org.probato.manager.usecase.UC01</code> vamos criar o novo pacote <code>script</code> .</li> <li>No pacote <code>org.probato.manager.usecase.UC01.script</code> vamos criar a classe <code>UC01TC01_PerformLoginSuccessfully.java</code>.</li> <li>Na classe <code>UC01TC01_PerformLoginSuccessfully.java</code> vamos implementar o c\u00f3digo abaixo. UC01TC01_PerformLoginSuccessfully.java<pre><code>@Dataset(\"dataset/UC01/UC01TC01.csv\")\n@SQL(\n    datasource = \"probato\", \n    scriptPath = { \"sql/user/insert-user.sql\" })\n@Script(\n    code = \"UC01TC01\", \n    name = \"Perform login successfully\", \n    description = \"This script aims to validate the user's login in the application successfully\")\npublic class UC01TC01_PerformLoginSuccessfully {\n\n    @Page\n    private LoginPage loginPage;\n\n    @Page\n    private DashboardPage dashboardPage;\n\n    @Procedure\n    private void procedure(LoginModel model) {\n        loginPage.selectEnglishTranslate();\n        loginPage.checkPage();\n        loginPage.fillEmail(model.getEmail());\n        loginPage.fillPassword(model.getPassword());\n        loginPage.pressAccessButton();\n        dashboardPage.checkPage();\n    }\n\n}\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#implementando-page-object","title":"Implementando Page Object","text":"<ol> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>LoginPage.java</code>. LoginPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class LoginPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"public-container\\\"]/app-login/form/div/div[1]/h1\")\n  private WebElement titlePage;\n\n  @FindBy(xpath = \"//*[@id=\\\"email\\\"]\")\n  private WebElement emailInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"password\\\"]\")\n  private WebElement passwordInput;\n\n  @FindBy(xpath = \"//*[@id=\\\"login-btn\\\"]\")\n  private WebElement accessButton;\n\n  @Action(\"Check `Login` page\")\n  public void checkPage() {\n    assertEquals(\"Login\", titlePage.getText());\n    assertTrue(emailInput.isDisplayed());\n    assertTrue(passwordInput.isDisplayed());\n    assertTrue(accessButton.isDisplayed());\n  }\n\n  @Action(\"Fill in the 'Email' field with '{{email}}' value\")\n  public void fillEmail(@Param(\"email\") String email) {\n    emailInput.sendKeys(email);\n  }\n\n  @Action(\"Fill in the 'Password' field with {{password}} value\")\n  public void fillPassword(@Param(\"password\") String password) {\n    passwordInput.sendKeys(password);\n  }\n\n  @Action(\"Press the 'Access' button\")\n  public void pressAccessButton() {\n    accessButton.click();\n  }\n\n}\n</code></pre></li> <li>No pacote <code>org.probato.manager.page</code> vamos criar a classe <code>DashboardPage.java</code>. DashboardPage.java<pre><code>package org.probato.manager.automation.page;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\n\nimport org.probato.api.Action;\nimport org.probato.api.Param;\nimport org.probato.page.WebPage;\n\npublic class DashboardPage extends WebPage {\n\n  @FindBy(xpath = \"//*[@id=\\\"private-container\\\"]/app-view-dashboard/div/div[1]/div/h1\")\n  private WebElement titlePage;\n\n  @Action(\"Check `Dashboard` page\")\n  public void checkPage() {\n    assertEquals(\"Dashboard\", titlePage.getText());\n  }\n\n}\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#criando-arquivo-dataset","title":"Criando arquivo dataset","text":"<ol> <li>Na pasta <code>src/test/resources/dataset</code> vamos criar a nova pasta <code>UC01</code>.</li> <li>Na pasta <code>src/test/resources/dataset/UC01</code> vamos criar o arquivo chamado <code>UC01TC01.csv</code>.</li> <li>No arquivo <code>UC01TC01.csv</code> vamos adicionar o conte\u00fado abaixo. UC01TC01.csv<pre><code>EMAIL, PASSWORD\nuser01@probato.org, p@ssword\nuser02@probato.org, p@ssword123\nuser02@probato.org, p@ssword321\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#implementando-classe-de-mapeamento-de-entrada","title":"Implementando classe de mapeamento de entrada","text":"<ol> <li>No pacote <code>org.probato.manager.automation.model</code> vamos criar a classe <code>LoginPage.java</code>. LoginModel.java<pre><code>package org.probato.manager.automation.model;\n\nimport org.probato.model.Datamodel;\n\npublic class LoginModel extends Datamodel {\n\n    private String email;\n    private String password;\n\n    public String getEmail() {\n        return email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n}\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#criando-arquivos-sql","title":"Criando arquivos SQL","text":"<ol> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>init</code>.</li> <li>Na pasta <code>src/test/resources/sql</code> vamos criar a nova pasta <code>user</code>.</li> <li>Na pasta <code>src/test/resources/sql/init</code> vamos criar o arquivo chamado <code>init.sql</code>.</li> <li>Na pasta <code>src/test/resources/sql/user</code> vamos criar o arquivo chamado <code>insert-user.sql</code>.</li> <li>No arquivo <code>init.sql</code> vamos adicionar o conte\u00fado abaixo. init.sql<pre><code>DELETE FROM testano_app.users;\n</code></pre></li> <li>No arquivo <code>insert-user.sql</code> vamos adicionar o conte\u00fado abaixo. insert-user.sql<pre><code>INSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('a02b03e6-c462-4980-9997-c1203a094c9d'::uuid, 'User 01', 'user01@probato.org', '$2a$10$Kml4nk3ADhnWrJg0GkStVeTJoslDBir/Fgyw2gkLR0FukujfIxZQ2', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('bd84a2c8-d315-40ea-80aa-1841254b20c9'::uuid, 'User 02', 'user02@probato.org', '$2a$10$oHZ7er1/2/xKjgOq0znXnOPcvoOXpX.in6XO/4mf2xf5ZV7OMyvq6', 'MALE',  true);\n\nINSERT INTO testano_app.users\n(id, \"name\", email, \"password\", gender, active)\nVALUES('b86a08ac-2ee8-42c7-a46f-c589b1d26503'::uuid, 'User 03', 'user03@probato.org', '$2a$10$81pSkjzZTqgn3/nU5DzxVemmr0rjJ7NHtK/UiGhzomEwTyHZgFliC', 'MALE',  true);\n</code></pre></li> </ol>"},{"location":"pt-BR/quick-guide/implement-script/#consideracoes-finais","title":"Considera\u00e7\u00f5es finais","text":"<p>Conseguimos implementar com sucesso um roteiro b\u00e1sico utilizando o Probato. Ao longo desta se\u00e7\u00e3o, foi poss\u00edvel demonstrar como o framework proporciona uma estrutura organizada e modular para a automa\u00e7\u00e3o de testes, abrangendo desde a cria\u00e7\u00e3o de Suites, Scripts, e Page Objects at\u00e9 a utiliza\u00e7\u00e3o de massas de dados e pr\u00e9-condi\u00e7\u00f5es com scripts SQL.</p> <p>Este exemplo abordou a automa\u00e7\u00e3o de um cen\u00e1rio fundamental: o login de um usu\u00e1rio na aplica\u00e7\u00e3o Probato Manager. A aplica\u00e7\u00e3o de pr\u00e1ticas como a utiliza\u00e7\u00e3o do padr\u00e3o Page Object, que facilita a manuten\u00e7\u00e3o e promove a reutiliza\u00e7\u00e3o de c\u00f3digo, destacou-se como uma abordagem essencial para a constru\u00e7\u00e3o de testes robustos e escal\u00e1veis.</p>"},{"location":"pt-BR/quick-guide/implement-script/#aprendizados-e-beneficios-observados","title":"Aprendizados e benef\u00edcios observados","text":"<ul> <li>Modularidade e organiza\u00e7\u00e3o: A separa\u00e7\u00e3o em pacotes e a utiliza\u00e7\u00e3o de annotations simplificam a organiza\u00e7\u00e3o do projeto e aumentam a clareza do fluxo de execu\u00e7\u00e3o dos testes.</li> <li>Facilidade na configura\u00e7\u00e3o inicial: Com a estrutura bem definida, a cria\u00e7\u00e3o de novos testes e o gerenciamento de massas de dados tornam-se intuitivos.</li> <li>Integra\u00e7\u00e3o com dados e banco de dados: O uso de datasets e scripts SQL facilita a prepara\u00e7\u00e3o do estado inicial da aplica\u00e7\u00e3o, garantindo a consist\u00eancia dos testes.</li> <li>Padroniza\u00e7\u00e3o: A ado\u00e7\u00e3o de conven\u00e7\u00f5es no design de Suites, Scripts, e Pages promove a padroniza\u00e7\u00e3o e reduz a curva de aprendizado para novos integrantes na equipe.</li> </ul>"},{"location":"pt-BR/quick-guide/implement-script/#checklist-final","title":"Checklist Final","text":"<p>Antes de finalizar a implementa\u00e7\u00e3o de um roteiro b\u00e1sico no Probato, verifique os seguintes pontos para garantir que tudo est\u00e1 corretamente configurado e funcional:</p> <ul> <li>\u2705 Classes de Suite e Script implementadas com as annotations adequadas.</li> <li>\u2705 Classes de Page Object criadas, com elementos mapeados e m\u00e9todos funcionando conforme esperado.</li> <li>\u2705 Arquivos de dataset criados, contendo os dados necess\u00e1rios para os testes.</li> <li>\u2705 Scripts SQL de pr\u00e9-condi\u00e7\u00e3o configurados corretamente, garantindo o estado inicial da aplica\u00e7\u00e3o.</li> </ul> <p>\ud83c\udf89 Seu projeto est\u00e1 pronto para continuar a automa\u00e7\u00e3o de testes com o Probato!</p>"},{"location":"pt-BR/quick-guide/implement-script/#pronto-para-continuar","title":"Pronto para continuar?","text":"<p>Siga para o pr\u00f3ximo cap\u00edtulo: Execu\u00e7\u00e3o e An\u00e1lise de Resultados.</p>"}]}